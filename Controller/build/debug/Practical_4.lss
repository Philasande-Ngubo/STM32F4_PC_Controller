
build/debug/Practical_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002598  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002768  08002768  00003768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ec  080027ec  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080027ec  080027ec  000037ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027f4  080027f4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f4  080027f4  000037f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027f8  080027f8  000037f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080027fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08002858  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08002858  00004288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c339  00000000  00000000  000040c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6f  00000000  00000000  000103fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00005a95  00000000  00000000  0001236d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000828  00000000  00000000  00017e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000683  00000000  00000000  00018630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f9f  00000000  00000000  00018cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000034fe  00000000  00000000  00022c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013a8  00000000  00000000  00026150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000196  00000000  00000000  000274f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b80c 	b.w	80002b0 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f002 f8da 	bl	8002458 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_idiv0>:
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop

080002b4 <__do_global_dtors_aux>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	4c05      	ldr	r4, [pc, #20]	@ (80002cc <__do_global_dtors_aux+0x18>)
 80002b8:	7823      	ldrb	r3, [r4, #0]
 80002ba:	b933      	cbnz	r3, 80002ca <__do_global_dtors_aux+0x16>
 80002bc:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x1c>)
 80002be:	b113      	cbz	r3, 80002c6 <__do_global_dtors_aux+0x12>
 80002c0:	4804      	ldr	r0, [pc, #16]	@ (80002d4 <__do_global_dtors_aux+0x20>)
 80002c2:	f3af 8000 	nop.w
 80002c6:	2301      	movs	r3, #1
 80002c8:	7023      	strb	r3, [r4, #0]
 80002ca:	bd10      	pop	{r4, pc}
 80002cc:	2000005c 	.word	0x2000005c
 80002d0:	00000000 	.word	0x00000000
 80002d4:	08002750 	.word	0x08002750

080002d8 <frame_dummy>:
 80002d8:	b508      	push	{r3, lr}
 80002da:	4b03      	ldr	r3, [pc, #12]	@ (80002e8 <frame_dummy+0x10>)
 80002dc:	b11b      	cbz	r3, 80002e6 <frame_dummy+0xe>
 80002de:	4903      	ldr	r1, [pc, #12]	@ (80002ec <frame_dummy+0x14>)
 80002e0:	4803      	ldr	r0, [pc, #12]	@ (80002f0 <frame_dummy+0x18>)
 80002e2:	f3af 8000 	nop.w
 80002e6:	bd08      	pop	{r3, pc}
 80002e8:	00000000 	.word	0x00000000
 80002ec:	20000060 	.word	0x20000060
 80002f0:	08002750 	.word	0x08002750

080002f4 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 80002f4:	b082      	sub	sp, #8
	  volatile unsigned int counter;
	  microseconds *= 3;
 80002f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	  for(counter = 0; counter<microseconds; counter++)
 80002fa:	2300      	movs	r3, #0
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	e004      	b.n	800030a <delay+0x16>
	  {
	    __asm("nop");
 8000300:	bf00      	nop
	    __asm("nop");
 8000302:	bf00      	nop
	  for(counter = 0; counter<microseconds; counter++)
 8000304:	9b01      	ldr	r3, [sp, #4]
 8000306:	3301      	adds	r3, #1
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b01      	ldr	r3, [sp, #4]
 800030c:	4283      	cmp	r3, r0
 800030e:	d3f7      	bcc.n	8000300 <delay+0xc>
	  }
}
 8000310:	b002      	add	sp, #8
 8000312:	4770      	bx	lr

08000314 <pulse_strobe>:
{
 8000314:	b510      	push	{r4, lr}
    delay(20);				// Delay
 8000316:	2014      	movs	r0, #20
 8000318:	f7ff ffec 	bl	80002f4 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 800031c:	4c09      	ldr	r4, [pc, #36]	@ (8000344 <pulse_strobe+0x30>)
 800031e:	69a3      	ldr	r3, [r4, #24]
 8000320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000324:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 8000326:	2014      	movs	r0, #20
 8000328:	f7ff ffe4 	bl	80002f4 <delay>
    GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 800032c:	69a3      	ldr	r3, [r4, #24]
 800032e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000332:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 8000334:	2014      	movs	r0, #20
 8000336:	f7ff ffdd 	bl	80002f4 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 800033a:	69a3      	ldr	r3, [r4, #24]
 800033c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000340:	61a3      	str	r3, [r4, #24]
}
 8000342:	bd10      	pop	{r4, pc}
 8000344:	40020800 	.word	0x40020800

08000348 <lcd_command>:
{
 8000348:	b510      	push	{r4, lr}
 800034a:	4604      	mov	r4, r0
    GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as commands);
 800034c:	4a3f      	ldr	r2, [pc, #252]	@ (800044c <lcd_command+0x104>)
 800034e:	6993      	ldr	r3, [r2, #24]
 8000350:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000354:	6193      	str	r3, [r2, #24]
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 8000356:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800035a:	d145      	bne.n	80003e8 <lcd_command+0xa0>
    	GPIOA->BSRR |= LCD_D7_RESET;
 800035c:	4a3c      	ldr	r2, [pc, #240]	@ (8000450 <lcd_command+0x108>)
 800035e:	6993      	ldr	r3, [r2, #24]
 8000360:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000364:	6193      	str	r3, [r2, #24]
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 8000366:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800036a:	d044      	beq.n	80003f6 <lcd_command+0xae>
        GPIOA->BSRR |= LCD_D6_SET;
 800036c:	4a38      	ldr	r2, [pc, #224]	@ (8000450 <lcd_command+0x108>)
 800036e:	6993      	ldr	r3, [r2, #24]
 8000370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000374:	6193      	str	r3, [r2, #24]
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 8000376:	f014 0f20 	tst.w	r4, #32
 800037a:	d042      	beq.n	8000402 <lcd_command+0xba>
    	GPIOB->BSRR |= LCD_D5_SET;	
 800037c:	4a35      	ldr	r2, [pc, #212]	@ (8000454 <lcd_command+0x10c>)
 800037e:	6993      	ldr	r3, [r2, #24]
 8000380:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000384:	6193      	str	r3, [r2, #24]
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 8000386:	f014 0f10 	tst.w	r4, #16
 800038a:	d040      	beq.n	800040e <lcd_command+0xc6>
    	GPIOB->BSRR |= LCD_D4_SET;
 800038c:	4a31      	ldr	r2, [pc, #196]	@ (8000454 <lcd_command+0x10c>)
 800038e:	6993      	ldr	r3, [r2, #24]
 8000390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000394:	6193      	str	r3, [r2, #24]
    pulse_strobe ();			// Send data
 8000396:	f7ff ffbd 	bl	8000314 <pulse_strobe>
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 800039a:	f014 0f08 	tst.w	r4, #8
 800039e:	d03c      	beq.n	800041a <lcd_command+0xd2>
    	GPIOA->BSRR |= LCD_D7_SET;
 80003a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000450 <lcd_command+0x108>)
 80003a2:	6993      	ldr	r3, [r2, #24]
 80003a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003a8:	6193      	str	r3, [r2, #24]
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 80003aa:	f014 0f04 	tst.w	r4, #4
 80003ae:	d03a      	beq.n	8000426 <lcd_command+0xde>
        GPIOA->BSRR |= LCD_D6_SET;
 80003b0:	4a27      	ldr	r2, [pc, #156]	@ (8000450 <lcd_command+0x108>)
 80003b2:	6993      	ldr	r3, [r2, #24]
 80003b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003b8:	6193      	str	r3, [r2, #24]
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 80003ba:	f014 0f02 	tst.w	r4, #2
 80003be:	d038      	beq.n	8000432 <lcd_command+0xea>
    	GPIOB->BSRR |= LCD_D5_SET;         
 80003c0:	4a24      	ldr	r2, [pc, #144]	@ (8000454 <lcd_command+0x10c>)
 80003c2:	6993      	ldr	r3, [r2, #24]
 80003c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003c8:	6193      	str	r3, [r2, #24]
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 80003ca:	f014 0f01 	tst.w	r4, #1
 80003ce:	d036      	beq.n	800043e <lcd_command+0xf6>
    	GPIOB->BSRR |= LCD_D4_SET;
 80003d0:	4a20      	ldr	r2, [pc, #128]	@ (8000454 <lcd_command+0x10c>)
 80003d2:	6993      	ldr	r3, [r2, #24]
 80003d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003d8:	6193      	str	r3, [r2, #24]
    pulse_strobe();			// Send data
 80003da:	f7ff ff9b 	bl	8000314 <pulse_strobe>
    delay(3000);
 80003de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80003e2:	f7ff ff87 	bl	80002f4 <delay>
}
 80003e6:	bd10      	pop	{r4, pc}
    	GPIOA->BSRR |= LCD_D7_SET;
 80003e8:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80003ec:	6993      	ldr	r3, [r2, #24]
 80003ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	e7b7      	b.n	8000366 <lcd_command+0x1e>
        GPIOA->BSRR |= LCD_D6_RESET;
 80003f6:	4a16      	ldr	r2, [pc, #88]	@ (8000450 <lcd_command+0x108>)
 80003f8:	6993      	ldr	r3, [r2, #24]
 80003fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	e7b9      	b.n	8000376 <lcd_command+0x2e>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000402:	4a14      	ldr	r2, [pc, #80]	@ (8000454 <lcd_command+0x10c>)
 8000404:	6993      	ldr	r3, [r2, #24]
 8000406:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	e7bb      	b.n	8000386 <lcd_command+0x3e>
    	GPIOB->BSRR |= LCD_D4_RESET;
 800040e:	4a11      	ldr	r2, [pc, #68]	@ (8000454 <lcd_command+0x10c>)
 8000410:	6993      	ldr	r3, [r2, #24]
 8000412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	e7bd      	b.n	8000396 <lcd_command+0x4e>
    	GPIOA->BSRR |= LCD_D7_RESET;
 800041a:	4a0d      	ldr	r2, [pc, #52]	@ (8000450 <lcd_command+0x108>)
 800041c:	6993      	ldr	r3, [r2, #24]
 800041e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	e7c1      	b.n	80003aa <lcd_command+0x62>
        GPIOA->BSRR |= LCD_D6_RESET;
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <lcd_command+0x108>)
 8000428:	6993      	ldr	r3, [r2, #24]
 800042a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	e7c3      	b.n	80003ba <lcd_command+0x72>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000432:	4a08      	ldr	r2, [pc, #32]	@ (8000454 <lcd_command+0x10c>)
 8000434:	6993      	ldr	r3, [r2, #24]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	e7c5      	b.n	80003ca <lcd_command+0x82>
    	GPIOB->BSRR |= LCD_D4_RESET;
 800043e:	4a05      	ldr	r2, [pc, #20]	@ (8000454 <lcd_command+0x10c>)
 8000440:	6993      	ldr	r3, [r2, #24]
 8000442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	e7c7      	b.n	80003da <lcd_command+0x92>
 800044a:	bf00      	nop
 800044c:	40020800 	.word	0x40020800
 8000450:	40020000 	.word	0x40020000
 8000454:	40020400 	.word	0x40020400

08000458 <init_LCD>:
{
 8000458:	b508      	push	{r3, lr}
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <init_LCD+0x68>)
 800045c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800045e:	f042 0201 	orr.w	r2, r2, #1
 8000462:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	f042 0202 	orr.w	r2, r2, #2
 800046a:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800046c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800046e:	f042 0204 	orr.w	r2, r2, #4
 8000472:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 8000474:	4a13      	ldr	r2, [pc, #76]	@ (80004c4 <init_LCD+0x6c>)
 8000476:	6813      	ldr	r3, [r2, #0]
 8000478:	f043 4382 	orr.w	r3, r3, #1090519040	@ 0x41000000
 800047c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 800047e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000482:	6813      	ldr	r3, [r2, #0]
 8000484:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000488:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 800048a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800048e:	6813      	ldr	r3, [r2, #0]
 8000490:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000494:	6013      	str	r3, [r2, #0]
    delay(30000);			// Allow the LCD some power up time (~30ms)
 8000496:	f247 5030 	movw	r0, #30000	@ 0x7530
 800049a:	f7ff ff2b 	bl	80002f4 <delay>
    lcd_command(POWER_UP);		// Power up initialization for the lcd
 800049e:	2033      	movs	r0, #51	@ 0x33
 80004a0:	f7ff ff52 	bl	8000348 <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 80004a4:	2032      	movs	r0, #50	@ 0x32
 80004a6:	f7ff ff4f 	bl	8000348 <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 80004aa:	200c      	movs	r0, #12
 80004ac:	f7ff ff4c 	bl	8000348 <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 80004b0:	2028      	movs	r0, #40	@ 0x28
 80004b2:	f7ff ff49 	bl	8000348 <lcd_command>
    lcd_command(CLEAR);			// Clear display
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff ff46 	bl	8000348 <lcd_command>
}
 80004bc:	bd08      	pop	{r3, pc}
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020000 	.word	0x40020000

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004cc:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	ad03      	add	r5, sp, #12
 80004d0:	2400      	movs	r4, #0
 80004d2:	9403      	str	r4, [sp, #12]
 80004d4:	9404      	str	r4, [sp, #16]
 80004d6:	9405      	str	r4, [sp, #20]
 80004d8:	9406      	str	r4, [sp, #24]
 80004da:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004dc:	9400      	str	r4, [sp, #0]
 80004de:	4b4d      	ldr	r3, [pc, #308]	@ (8000614 <MX_GPIO_Init+0x14c>)
 80004e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80004e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80004e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ea:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80004ee:	9200      	str	r2, [sp, #0]
 80004f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	9401      	str	r4, [sp, #4]
 80004f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004f6:	f042 0201 	orr.w	r2, r2, #1
 80004fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80004fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004fe:	f002 0201 	and.w	r2, r2, #1
 8000502:	9201      	str	r2, [sp, #4]
 8000504:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	9402      	str	r4, [sp, #8]
 8000508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800050a:	f042 0202 	orr.w	r2, r2, #2
 800050e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	9b02      	ldr	r3, [sp, #8]

  // -------------------------------
  // LCD pins configuration
  // -------------------------------
  // Configure PC14 (RS) and PC15 (E) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 800051a:	f44f 4b40 	mov.w	fp, #49152	@ 0xc000
 800051e:	f8cd b00c 	str.w	fp, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	f04f 0801 	mov.w	r8, #1
 8000526:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052a:	4629      	mov	r1, r5
 800052c:	483a      	ldr	r0, [pc, #232]	@ (8000618 <MX_GPIO_Init+0x150>)
 800052e:	f000 fc45 	bl	8000dbc <HAL_GPIO_Init>

  // Configure PB8 (D4) and PB9 (D5) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000532:	f44f 7940 	mov.w	r9, #768	@ 0x300
 8000536:	f8cd 900c 	str.w	r9, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053a:	4f38      	ldr	r7, [pc, #224]	@ (800061c <MX_GPIO_Init+0x154>)
 800053c:	4629      	mov	r1, r5
 800053e:	4638      	mov	r0, r7
 8000540:	f000 fc3c 	bl	8000dbc <HAL_GPIO_Init>

  // Configure PA12 (D6) and PA15 (D7) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_15;
 8000544:	f44f 4a10 	mov.w	sl, #36864	@ 0x9000
 8000548:	f8cd a00c 	str.w	sl, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	4e34      	ldr	r6, [pc, #208]	@ (8000620 <MX_GPIO_Init+0x158>)
 800054e:	4629      	mov	r1, r5
 8000550:	4630      	mov	r0, r6
 8000552:	f000 fc33 	bl	8000dbc <HAL_GPIO_Init>

  // Set all LCD pins LOW initially
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000556:	4622      	mov	r2, r4
 8000558:	4659      	mov	r1, fp
 800055a:	482f      	ldr	r0, [pc, #188]	@ (8000618 <MX_GPIO_Init+0x150>)
 800055c:	f000 fd1e 	bl	8000f9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000560:	4622      	mov	r2, r4
 8000562:	4649      	mov	r1, r9
 8000564:	4638      	mov	r0, r7
 8000566:	f000 fd19 	bl	8000f9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12 | GPIO_PIN_15, GPIO_PIN_RESET);
 800056a:	4622      	mov	r2, r4
 800056c:	4651      	mov	r1, sl
 800056e:	4630      	mov	r0, r6
 8000570:	f000 fd14 	bl	8000f9c <HAL_GPIO_WritePin>


  // -------------------------------
  // Button0 configuration (PA0)
  // -------------------------------
  GPIO_InitStruct.Pin = Button0_Pin;
 8000574:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; // Interrupt on rising edge
 8000578:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800057c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;         // Use pull-up resistor
 800057e:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	4629      	mov	r1, r5
 8000584:	4630      	mov	r0, r6
 8000586:	f000 fc19 	bl	8000dbc <HAL_GPIO_Init>

  // Enable and set EXTI line 0 interrupt priority
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800058a:	4622      	mov	r2, r4
 800058c:	2102      	movs	r1, #2
 800058e:	2006      	movs	r0, #6
 8000590:	f000 fafe 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000594:	2006      	movs	r0, #6
 8000596:	f000 fb0b 	bl	8000bb0 <HAL_NVIC_EnableIRQ>

  // Configure PC0, PC1, PC2, PC3 as inputs with interrupts
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 800059a:	230f      	movs	r3, #15
 800059c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
 800059e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005a2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;            // Enable internal pull-up resistor
 80005a4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	4629      	mov	r1, r5
 80005ac:	4630      	mov	r0, r6
 80005ae:	f000 fc05 	bl	8000dbc <HAL_GPIO_Init>
    
  // Enable and set EXTI line interrupts
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);  // SW0 on PC0
 80005b2:	4622      	mov	r2, r4
 80005b4:	2102      	movs	r1, #2
 80005b6:	2006      	movs	r0, #6
 80005b8:	f000 faea 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005bc:	2006      	movs	r0, #6
 80005be:	f000 faf7 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
    
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);  // SW1 on PC1
 80005c2:	4622      	mov	r2, r4
 80005c4:	2102      	movs	r1, #2
 80005c6:	2007      	movs	r0, #7
 80005c8:	f000 fae2 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005cc:	2007      	movs	r0, #7
 80005ce:	f000 faef 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
    
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);  // SW2 on PC2
 80005d2:	4622      	mov	r2, r4
 80005d4:	2102      	movs	r1, #2
 80005d6:	2008      	movs	r0, #8
 80005d8:	f000 fada 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005dc:	2008      	movs	r0, #8
 80005de:	f000 fae7 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
    
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);  // SW3 on PC3
 80005e2:	4622      	mov	r2, r4
 80005e4:	2102      	movs	r1, #2
 80005e6:	2009      	movs	r0, #9
 80005e8:	f000 fad2 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005ec:	2009      	movs	r0, #9
 80005ee:	f000 fadf 	bl	8000bb0 <HAL_NVIC_EnableIRQ>

   // Set PA5 and PA6 as analog mode, no pull-up/down
  GPIOA->MODER |= (3U << (5 * 2)) | (3U << (6 * 2));
 80005f2:	6833      	ldr	r3, [r6, #0]
 80005f4:	f443 5370 	orr.w	r3, r3, #15360	@ 0x3c00
 80005f8:	6033      	str	r3, [r6, #0]
  GPIOA->PUPDR &= ~((3U << (5 * 2)) | (3U << (6 * 2)));
 80005fa:	68f3      	ldr	r3, [r6, #12]
 80005fc:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8000600:	60f3      	str	r3, [r6, #12]

  GPIOB->MODER = 0x5555;
 8000602:	f245 5355 	movw	r3, #21845	@ 0x5555
 8000606:	603b      	str	r3, [r7, #0]
  GPIOB->ODR = 0xFF;
 8000608:	23ff      	movs	r3, #255	@ 0xff
 800060a:	617b      	str	r3, [r7, #20]
}
 800060c:	b009      	add	sp, #36	@ 0x24
 800060e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40020800 	.word	0x40020800
 800061c:	40020400 	.word	0x40020400
 8000620:	40020000 	.word	0x40020000

08000624 <MX_DMA_Init>:
{
 8000624:	b500      	push	{lr}
 8000626:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000628:	2100      	movs	r1, #0
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_DMA_Init+0x30>)
 800062e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000630:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000634:	631a      	str	r2, [r3, #48]	@ 0x30
 8000636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000640:	460a      	mov	r2, r1
 8000642:	2010      	movs	r0, #16
 8000644:	f000 faa4 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000648:	2010      	movs	r0, #16
 800064a:	f000 fab1 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
}
 800064e:	b003      	add	sp, #12
 8000650:	f85d fb04 	ldr.w	pc, [sp], #4
 8000654:	40023800 	.word	0x40023800

08000658 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000658:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fca4 	bl	8000fa8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000660:	bd08      	pop	{r3, pc}

08000662 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000662:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000664:	2002      	movs	r0, #2
 8000666:	f000 fc9f 	bl	8000fa8 <HAL_GPIO_EXTI_IRQHandler>
}
 800066a:	bd08      	pop	{r3, pc}

0800066c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800066c:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800066e:	2004      	movs	r0, #4
 8000670:	f000 fc9a 	bl	8000fa8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000674:	bd08      	pop	{r3, pc}

08000676 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000676:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000678:	2008      	movs	r0, #8
 800067a:	f000 fc95 	bl	8000fa8 <HAL_GPIO_EXTI_IRQHandler>
}
 800067e:	bd08      	pop	{r3, pc}

08000680 <HAL_GPIO_EXTI_Callback>:

uint32_t lastInterruptTime[4] = {0};
#define DEBOUNCE_DELAY 200  // 200ms debounce

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000680:	b510      	push	{r4, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	4604      	mov	r4, r0
    uint32_t currentTime = HAL_GetTick();
 8000686:	f000 fa29 	bl	8000adc <HAL_GetTick>
    
    switch(GPIO_Pin)
 800068a:	1e63      	subs	r3, r4, #1
 800068c:	2b07      	cmp	r3, #7
 800068e:	d80a      	bhi.n	80006a6 <HAL_GPIO_EXTI_Callback+0x26>
 8000690:	e8df f003 	tbb	[pc, r3]
 8000694:	3c092104 	.word	0x3c092104
 8000698:	57090909 	.word	0x57090909
    {
        case GPIO_PIN_0:  // SW0
            if((currentTime - lastInterruptTime[0]) > DEBOUNCE_DELAY)
 800069c:	4b36      	ldr	r3, [pc, #216]	@ (8000778 <HAL_GPIO_EXTI_Callback+0xf8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1ac3      	subs	r3, r0, r3
 80006a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80006a4:	d801      	bhi.n	80006aa <HAL_GPIO_EXTI_Callback+0x2a>
                char msg[] = "BTN3\r\n";
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
            }
            break;
    }
}
 80006a6:	b002      	add	sp, #8
 80006a8:	bd10      	pop	{r4, pc}
                lastInterruptTime[3] = currentTime;
 80006aa:	4b33      	ldr	r3, [pc, #204]	@ (8000778 <HAL_GPIO_EXTI_Callback+0xf8>)
 80006ac:	60d8      	str	r0, [r3, #12]
                char msg[] = "BTN0\r\n";
 80006ae:	4b33      	ldr	r3, [pc, #204]	@ (800077c <HAL_GPIO_EXTI_Callback+0xfc>)
 80006b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006b4:	9000      	str	r0, [sp, #0]
 80006b6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80006ba:	0c09      	lsrs	r1, r1, #16
 80006bc:	f88d 1006 	strb.w	r1, [sp, #6]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006c0:	4668      	mov	r0, sp
 80006c2:	f7ff fd85 	bl	80001d0 <strlen>
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	b282      	uxth	r2, r0
 80006cc:	4669      	mov	r1, sp
 80006ce:	482c      	ldr	r0, [pc, #176]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x100>)
 80006d0:	f001 f94a 	bl	8001968 <HAL_UART_Transmit>
 80006d4:	e7e7      	b.n	80006a6 <HAL_GPIO_EXTI_Callback+0x26>
            if((currentTime - lastInterruptTime[1]) > DEBOUNCE_DELAY)
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <HAL_GPIO_EXTI_Callback+0xf8>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	1ac3      	subs	r3, r0, r3
 80006dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80006de:	d9e2      	bls.n	80006a6 <HAL_GPIO_EXTI_Callback+0x26>
                lastInterruptTime[3] = currentTime;
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <HAL_GPIO_EXTI_Callback+0xf8>)
 80006e2:	60d8      	str	r0, [r3, #12]
                char msg[] = "BTN1\r\n";
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x104>)
 80006e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ea:	9000      	str	r0, [sp, #0]
 80006ec:	f8ad 1004 	strh.w	r1, [sp, #4]
 80006f0:	0c09      	lsrs	r1, r1, #16
 80006f2:	f88d 1006 	strb.w	r1, [sp, #6]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006f6:	4668      	mov	r0, sp
 80006f8:	f7ff fd6a 	bl	80001d0 <strlen>
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	b282      	uxth	r2, r0
 8000702:	4669      	mov	r1, sp
 8000704:	481e      	ldr	r0, [pc, #120]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x100>)
 8000706:	f001 f92f 	bl	8001968 <HAL_UART_Transmit>
 800070a:	e7cc      	b.n	80006a6 <HAL_GPIO_EXTI_Callback+0x26>
            if((currentTime - lastInterruptTime[2]) > DEBOUNCE_DELAY)
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <HAL_GPIO_EXTI_Callback+0xf8>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	1ac3      	subs	r3, r0, r3
 8000712:	2bc8      	cmp	r3, #200	@ 0xc8
 8000714:	d9c7      	bls.n	80006a6 <HAL_GPIO_EXTI_Callback+0x26>
                lastInterruptTime[3] = currentTime;
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000718:	60d8      	str	r0, [r3, #12]
                char msg[] = "BTN2\r\n";
 800071a:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x108>)
 800071c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000720:	9000      	str	r0, [sp, #0]
 8000722:	f8ad 1004 	strh.w	r1, [sp, #4]
 8000726:	0c09      	lsrs	r1, r1, #16
 8000728:	f88d 1006 	strb.w	r1, [sp, #6]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800072c:	4668      	mov	r0, sp
 800072e:	f7ff fd4f 	bl	80001d0 <strlen>
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	b282      	uxth	r2, r0
 8000738:	4669      	mov	r1, sp
 800073a:	4811      	ldr	r0, [pc, #68]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x100>)
 800073c:	f001 f914 	bl	8001968 <HAL_UART_Transmit>
 8000740:	e7b1      	b.n	80006a6 <HAL_GPIO_EXTI_Callback+0x26>
            if((currentTime - lastInterruptTime[3]) > DEBOUNCE_DELAY)
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	1ac3      	subs	r3, r0, r3
 8000748:	2bc8      	cmp	r3, #200	@ 0xc8
 800074a:	d9ac      	bls.n	80006a6 <HAL_GPIO_EXTI_Callback+0x26>
                lastInterruptTime[3] = currentTime;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <HAL_GPIO_EXTI_Callback+0xf8>)
 800074e:	60d8      	str	r0, [r3, #12]
                char msg[] = "BTN3\r\n";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000752:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000756:	9000      	str	r0, [sp, #0]
 8000758:	f8ad 1004 	strh.w	r1, [sp, #4]
 800075c:	0c09      	lsrs	r1, r1, #16
 800075e:	f88d 1006 	strb.w	r1, [sp, #6]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000762:	4668      	mov	r0, sp
 8000764:	f7ff fd34 	bl	80001d0 <strlen>
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	b282      	uxth	r2, r0
 800076e:	4669      	mov	r1, sp
 8000770:	4803      	ldr	r0, [pc, #12]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x100>)
 8000772:	f001 f8f9 	bl	8001968 <HAL_UART_Transmit>
}
 8000776:	e796      	b.n	80006a6 <HAL_GPIO_EXTI_Callback+0x26>
 8000778:	20000078 	.word	0x20000078
 800077c:	08002768 	.word	0x08002768
 8000780:	20000090 	.word	0x20000090
 8000784:	08002770 	.word	0x08002770
 8000788:	08002778 	.word	0x08002778
 800078c:	08002780 	.word	0x08002780

08000790 <ADC1_Start>:

void ADC1_Start(uint8_t channel)
{
    ADC1->SQR3 = channel & 0x1F;                  // Select ADC channel
 8000790:	f000 001f 	and.w	r0, r0, #31
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <ADC1_Start+0x14>)
 8000796:	6358      	str	r0, [r3, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;                 // Start conversion
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40012000 	.word	0x40012000

080007a8 <ADC_IRQHandler>:
        Error_Handler();
    }
}

void ADC_IRQHandler(void)
{
 80007a8:	b508      	push	{r3, lr}
    if (ADC1->SR & ADC_SR_EOC)
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <ADC_IRQHandler+0x3c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f013 0f02 	tst.w	r3, #2
 80007b2:	d00d      	beq.n	80007d0 <ADC_IRQHandler+0x28>
    {
        static uint8_t current_channel = 5;       // Start from channel 5
        uint16_t value = ADC1->DR;                // Read result, clears EOC flag
 80007b4:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <ADC_IRQHandler+0x3c>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	b29b      	uxth	r3, r3

        if (current_channel == 5)
 80007ba:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <ADC_IRQHandler+0x40>)
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	2a05      	cmp	r2, #5
 80007c0:	d007      	beq.n	80007d2 <ADC_IRQHandler+0x2a>
            current_channel = 6;
            ADC1_Start(6);                        // Next: PA6
        }
        else
        {
            pot1_value = value;
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <ADC_IRQHandler+0x44>)
 80007c4:	8013      	strh	r3, [r2, #0]
            current_channel = 5; 
 80007c6:	2005      	movs	r0, #5
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <ADC_IRQHandler+0x40>)
 80007ca:	7018      	strb	r0, [r3, #0]
            ADC1_Start(5);                        // Next: PA5
 80007cc:	f7ff ffe0 	bl	8000790 <ADC1_Start>
        }
    }
}
 80007d0:	bd08      	pop	{r3, pc}
            pot0_value = value;
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <ADC_IRQHandler+0x48>)
 80007d4:	8013      	strh	r3, [r2, #0]
            current_channel = 6;
 80007d6:	2006      	movs	r0, #6
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <ADC_IRQHandler+0x40>)
 80007da:	7018      	strb	r0, [r3, #0]
            ADC1_Start(6);                        // Next: PA6
 80007dc:	f7ff ffd8 	bl	8000790 <ADC1_Start>
 80007e0:	e7f6      	b.n	80007d0 <ADC_IRQHandler+0x28>
 80007e2:	bf00      	nop
 80007e4:	40012000 	.word	0x40012000
 80007e8:	20000000 	.word	0x20000000
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	2000008e 	.word	0x2000008e

080007f4 <ADC1_Init>:

void ADC1_Init(void)
{
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;           // Enable ADC1 clock
 80007f4:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <ADC1_Init+0x50>)
 80007f6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80007f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007fc:	6453      	str	r3, [r2, #68]	@ 0x44

    // ADC common prescaler (PCLK2 / 4)
    ADC->CCR &= ~(3U << 16);
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <ADC1_Init+0x54>)
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8000806:	605a      	str	r2, [r3, #4]
    ADC->CCR |= (1U << 16);                       // Divide by 4
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800080e:	605a      	str	r2, [r3, #4]

    ADC1->CR1 = 0;                                // 12-bit, single conversion
 8000810:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = ADC_CR2_EOCS | ADC_CR2_CONT;      // EOC after each, continuous mode
 8000818:	f240 4102 	movw	r1, #1026	@ 0x402
 800081c:	6099      	str	r1, [r3, #8]
    ADC1->SQR1 = 0;                               // One conversion per sequence
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Sampling time for channels 5 and 6: 56 cycles (enough for stable reads)
    ADC1->SMPR2 |= (3U << (5 * 3)) | (3U << (6 * 3));
 8000820:	691a      	ldr	r2, [r3, #16]
 8000822:	f442 2258 	orr.w	r2, r2, #884736	@ 0xd8000
 8000826:	611a      	str	r2, [r3, #16]

    // Enable EOC interrupt
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	f042 0220 	orr.w	r2, r2, #32
 800082e:	605a      	str	r2, [r3, #4]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <ADC1_Init+0x58>)
 8000832:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8000836:	6011      	str	r1, [r2, #0]
    NVIC_EnableIRQ(ADC_IRQn);

    ADC1->CR2 |= ADC_CR2_ADON;                    // Power on ADC
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	f042 0201 	orr.w	r2, r2, #1
 800083e:	609a      	str	r2, [r3, #8]
}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40012300 	.word	0x40012300
 800084c:	e000e100 	.word	0xe000e100

08000850 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000852:	e7fe      	b.n	8000852 <Error_Handler+0x2>

08000854 <UART1_Init>:
{
 8000854:	b510      	push	{r4, lr}
 8000856:	b088      	sub	sp, #32
    __HAL_RCC_USART1_CLK_ENABLE();
 8000858:	2400      	movs	r4, #0
 800085a:	9401      	str	r4, [sp, #4]
 800085c:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <UART1_Init+0x7c>)
 800085e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000860:	f042 0210 	orr.w	r2, r2, #16
 8000864:	645a      	str	r2, [r3, #68]	@ 0x44
 8000866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000868:	f002 0210 	and.w	r2, r2, #16
 800086c:	9201      	str	r2, [sp, #4]
 800086e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	9402      	str	r4, [sp, #8]
 8000872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000874:	f042 0201 	orr.w	r2, r2, #1
 8000878:	631a      	str	r2, [r3, #48]	@ 0x30
 800087a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	a903      	add	r1, sp, #12
 8000886:	9403      	str	r4, [sp, #12]
 8000888:	604c      	str	r4, [r1, #4]
 800088a:	608c      	str	r4, [r1, #8]
 800088c:	60cc      	str	r4, [r1, #12]
 800088e:	610c      	str	r4, [r1, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000890:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000894:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800089e:	2307      	movs	r3, #7
 80008a0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <UART1_Init+0x80>)
 80008a4:	f000 fa8a 	bl	8000dbc <HAL_GPIO_Init>
    huart1.Instance = USART1;
 80008a8:	480b      	ldr	r0, [pc, #44]	@ (80008d8 <UART1_Init+0x84>)
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <UART1_Init+0x88>)
 80008ac:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 115200;
 80008ae:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80008b2:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b4:	6084      	str	r4, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80008b6:	60c4      	str	r4, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80008b8:	6104      	str	r4, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80008ba:	230c      	movs	r3, #12
 80008bc:	6143      	str	r3, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	6184      	str	r4, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	61c4      	str	r4, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c2:	f001 f821 	bl	8001908 <HAL_UART_Init>
 80008c6:	b908      	cbnz	r0, 80008cc <UART1_Init+0x78>
}
 80008c8:	b008      	add	sp, #32
 80008ca:	bd10      	pop	{r4, pc}
        Error_Handler();
 80008cc:	f7ff ffc0 	bl	8000850 <Error_Handler>
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	20000090 	.word	0x20000090
 80008dc:	40011000 	.word	0x40011000

080008e0 <SystemClock_Config>:
{
 80008e0:	b510      	push	{r4, lr}
 80008e2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e4:	ac07      	add	r4, sp, #28
 80008e6:	2234      	movs	r2, #52	@ 0x34
 80008e8:	2100      	movs	r1, #0
 80008ea:	4620      	mov	r0, r4
 80008ec:	f001 f930 	bl	8001b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	2300      	movs	r3, #0
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	9303      	str	r3, [sp, #12]
 80008f6:	9304      	str	r3, [sp, #16]
 80008f8:	9305      	str	r3, [sp, #20]
 80008fa:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	4a19      	ldr	r2, [pc, #100]	@ (8000964 <SystemClock_Config+0x84>)
 8000900:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000902:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000906:	6411      	str	r1, [r2, #64]	@ 0x40
 8000908:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800090a:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800090e:	9200      	str	r2, [sp, #0]
 8000910:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	4914      	ldr	r1, [pc, #80]	@ (8000968 <SystemClock_Config+0x88>)
 8000916:	680a      	ldr	r2, [r1, #0]
 8000918:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800091c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000920:	600a      	str	r2, [r1, #0]
 8000922:	680a      	ldr	r2, [r1, #0]
 8000924:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000928:	9201      	str	r2, [sp, #4]
 800092a:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2202      	movs	r2, #2
 800092e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2201      	movs	r2, #1
 8000932:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2210      	movs	r2, #16
 8000936:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000938:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	4620      	mov	r0, r4
 800093c:	f000 fcc8 	bl	80012d0 <HAL_RCC_OscConfig>
 8000940:	b960      	cbnz	r0, 800095c <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000946:	2100      	movs	r1, #0
 8000948:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094c:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	9106      	str	r1, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000950:	a802      	add	r0, sp, #8
 8000952:	f000 fb53 	bl	8000ffc <HAL_RCC_ClockConfig>
 8000956:	b918      	cbnz	r0, 8000960 <SystemClock_Config+0x80>
}
 8000958:	b014      	add	sp, #80	@ 0x50
 800095a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800095c:	f7ff ff78 	bl	8000850 <Error_Handler>
    Error_Handler();
 8000960:	f7ff ff76 	bl	8000850 <Error_Handler>
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <main>:
{
 800096c:	b500      	push	{lr}
 800096e:	b085      	sub	sp, #20
  HAL_Init();
 8000970:	f000 f88e 	bl	8000a90 <HAL_Init>
  SystemClock_Config();
 8000974:	f7ff ffb4 	bl	80008e0 <SystemClock_Config>
  MX_GPIO_Init();
 8000978:	f7ff fda6 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800097c:	f7ff fe52 	bl	8000624 <MX_DMA_Init>
  UART1_Init();
 8000980:	f7ff ff68 	bl	8000854 <UART1_Init>
  ADC1_Init();
 8000984:	f7ff ff36 	bl	80007f4 <ADC1_Init>
  ADC1_Start( 5);
 8000988:	2005      	movs	r0, #5
 800098a:	f7ff ff01 	bl	8000790 <ADC1_Start>
  init_LCD();
 800098e:	f7ff fd63 	bl	8000458 <init_LCD>
  lcd_command(CLEAR);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fcd8 	bl	8000348 <lcd_command>
 8000998:	e00b      	b.n	80009b2 <main+0x46>
    if ( abs(pot1_value - old_pot1_value) > 30){
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <main+0xbc>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <main+0xc0>)
 80009a2:	8812      	ldrh	r2, [r2, #0]
 80009a4:	b292      	uxth	r2, r2
 80009a6:	1a9b      	subs	r3, r3, r2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bfb8      	it	lt
 80009ac:	425b      	neglt	r3, r3
 80009ae:	2b1e      	cmp	r3, #30
 80009b0:	dc22      	bgt.n	80009f8 <main+0x8c>
    if ( abs(pot0_value - old_pot0_value) > 30){
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <main+0xc4>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a34 <main+0xc8>)
 80009ba:	8812      	ldrh	r2, [r2, #0]
 80009bc:	b292      	uxth	r2, r2
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bfb8      	it	lt
 80009c4:	425b      	neglt	r3, r3
 80009c6:	2b1e      	cmp	r3, #30
 80009c8:	dde7      	ble.n	800099a <main+0x2e>
        old_pot0_value = pot0_value;
 80009ca:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <main+0xc4>)
 80009cc:	8813      	ldrh	r3, [r2, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	4918      	ldr	r1, [pc, #96]	@ (8000a34 <main+0xc8>)
 80009d2:	800b      	strh	r3, [r1, #0]
        sprintf(buf, "POT0 %4u\r\n", pot0_value);
 80009d4:	8812      	ldrh	r2, [r2, #0]
 80009d6:	ac01      	add	r4, sp, #4
 80009d8:	b292      	uxth	r2, r2
 80009da:	4917      	ldr	r1, [pc, #92]	@ (8000a38 <main+0xcc>)
 80009dc:	4620      	mov	r0, r4
 80009de:	f001 f895 	bl	8001b0c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80009e2:	4620      	mov	r0, r4
 80009e4:	f7ff fbf4 	bl	80001d0 <strlen>
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ec:	b282      	uxth	r2, r0
 80009ee:	4621      	mov	r1, r4
 80009f0:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <main+0xd0>)
 80009f2:	f000 ffb9 	bl	8001968 <HAL_UART_Transmit>
 80009f6:	e7d0      	b.n	800099a <main+0x2e>
        old_pot1_value = pot1_value;
 80009f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a28 <main+0xbc>)
 80009fa:	8813      	ldrh	r3, [r2, #0]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	490b      	ldr	r1, [pc, #44]	@ (8000a2c <main+0xc0>)
 8000a00:	800b      	strh	r3, [r1, #0]
        sprintf(buf, "POT1 %4u\r\n",pot1_value);
 8000a02:	8812      	ldrh	r2, [r2, #0]
 8000a04:	ac01      	add	r4, sp, #4
 8000a06:	b292      	uxth	r2, r2
 8000a08:	490d      	ldr	r1, [pc, #52]	@ (8000a40 <main+0xd4>)
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	f001 f87e 	bl	8001b0c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a10:	4620      	mov	r0, r4
 8000a12:	f7ff fbdd 	bl	80001d0 <strlen>
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	b282      	uxth	r2, r0
 8000a1c:	4621      	mov	r1, r4
 8000a1e:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <main+0xd0>)
 8000a20:	f000 ffa2 	bl	8001968 <HAL_UART_Transmit>
 8000a24:	e7c5      	b.n	80009b2 <main+0x46>
 8000a26:	bf00      	nop
 8000a28:	2000008c 	.word	0x2000008c
 8000a2c:	20000088 	.word	0x20000088
 8000a30:	2000008e 	.word	0x2000008e
 8000a34:	2000008a 	.word	0x2000008a
 8000a38:	08002788 	.word	0x08002788
 8000a3c:	20000090 	.word	0x20000090
 8000a40:	08002794 	.word	0x08002794

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_InitTick+0x40>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a54:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <HAL_InitTick+0x44>)
 8000a56:	6810      	ldr	r0, [r2, #0]
 8000a58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a5c:	f000 f8ac 	bl	8000bb8 <HAL_SYSTICK_Config>
 8000a60:	b968      	cbnz	r0, 8000a7e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	2c0f      	cmp	r4, #15
 8000a64:	d901      	bls.n	8000a6a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a66:	2001      	movs	r0, #1
 8000a68:	e00a      	b.n	8000a80 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4621      	mov	r1, r4
 8000a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a72:	f000 f88d 	bl	8000b90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_InitTick+0x48>)
 8000a78:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
}
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	20000001 	.word	0x20000001
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_Init>:
{
 8000a90:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_Init+0x30>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a9a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000aa2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000aaa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f85d 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f7ff ffc6 	bl	8000a44 <HAL_InitTick>
  HAL_MspInit();
 8000ab8:	f000 fa84 	bl	8000fc4 <HAL_MspInit>
}
 8000abc:	2000      	movs	r0, #0
 8000abe:	bd08      	pop	{r3, pc}
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ac4:	4a03      	ldr	r2, [pc, #12]	@ (8000ad4 <HAL_IncTick+0x10>)
 8000ac6:	6811      	ldr	r1, [r2, #0]
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x14>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	440b      	add	r3, r1
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000138 	.word	0x20000138
 8000ad8:	20000001 	.word	0x20000001

08000adc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000adc:	4b01      	ldr	r3, [pc, #4]	@ (8000ae4 <HAL_GetTick+0x8>)
 8000ade:	6818      	ldr	r0, [r3, #0]
}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000138 	.word	0x20000138

08000ae8 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	db07      	blt.n	8000afc <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aec:	f000 021f 	and.w	r2, r0, #31
 8000af0:	0940      	lsrs	r0, r0, #5
 8000af2:	2301      	movs	r3, #1
 8000af4:	4093      	lsls	r3, r2
 8000af6:	4a02      	ldr	r2, [pc, #8]	@ (8000b00 <__NVIC_EnableIRQ+0x18>)
 8000af8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000b04:	2800      	cmp	r0, #0
 8000b06:	db08      	blt.n	8000b1a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	0109      	lsls	r1, r1, #4
 8000b0a:	b2c9      	uxtb	r1, r1
 8000b0c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000b10:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000b14:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000b18:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	f000 000f 	and.w	r0, r0, #15
 8000b1e:	0109      	lsls	r1, r1, #4
 8000b20:	b2c9      	uxtb	r1, r1
 8000b22:	4b01      	ldr	r3, [pc, #4]	@ (8000b28 <__NVIC_SetPriority+0x24>)
 8000b24:	5419      	strb	r1, [r3, r0]
  }
}
 8000b26:	4770      	bx	lr
 8000b28:	e000ed14 	.word	0xe000ed14

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b32:	f1c0 0c07 	rsb	ip, r0, #7
 8000b36:	f1bc 0f04 	cmp.w	ip, #4
 8000b3a:	bf28      	it	cs
 8000b3c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b40:	1d03      	adds	r3, r0, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d90f      	bls.n	8000b66 <NVIC_EncodePriority+0x3a>
 8000b46:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 3eff 	mov.w	lr, #4294967295
 8000b4c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000b50:	ea21 0100 	bic.w	r1, r1, r0
 8000b54:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b56:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b5a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000b5e:	ea41 0002 	orr.w	r0, r1, r2
 8000b62:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	2300      	movs	r3, #0
 8000b68:	e7ee      	b.n	8000b48 <NVIC_EncodePriority+0x1c>
	...

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b70:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	0200      	lsls	r0, r0, #8
 8000b7a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b88:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_NVIC_SetPriority+0x1c>)
 8000b96:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b98:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b9c:	f7ff ffc6 	bl	8000b2c <NVIC_EncodePriority>
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f7ff ffae 	bl	8000b04 <__NVIC_SetPriority>
}
 8000ba8:	bd10      	pop	{r4, pc}
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb2:	f7ff ff99 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000bb6:	bd08      	pop	{r3, pc}

08000bb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	3801      	subs	r0, #1
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bbe:	d20b      	bcs.n	8000bd8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000bc4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <HAL_SYSTICK_Config+0x24>)
 8000bc8:	21f0      	movs	r1, #240	@ 0xf0
 8000bca:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bce:	2000      	movs	r0, #0
 8000bd0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bd8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000bea:	4b72      	ldr	r3, [pc, #456]	@ (8000db4 <HAL_DMA_IRQHandler+0x1d4>)
 8000bec:	681d      	ldr	r5, [r3, #0]
 8000bee:	4b72      	ldr	r3, [pc, #456]	@ (8000db8 <HAL_DMA_IRQHandler+0x1d8>)
 8000bf0:	fba3 3505 	umull	r3, r5, r3, r5
 8000bf4:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bf6:	6d87      	ldr	r7, [r0, #88]	@ 0x58

  tmpisr = regs->ISR;
 8000bf8:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bfa:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	4233      	tst	r3, r6
 8000c02:	d010      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c04:	6803      	ldr	r3, [r0, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	f012 0f04 	tst.w	r2, #4
 8000c0c:	d00b      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	f022 0204 	bic.w	r2, r2, #4
 8000c14:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c16:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000c18:	2308      	movs	r3, #8
 8000c1a:	4093      	lsls	r3, r2
 8000c1c:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c1e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6543      	str	r3, [r0, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c26:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c28:	2301      	movs	r3, #1
 8000c2a:	4093      	lsls	r3, r2
 8000c2c:	4233      	tst	r3, r6
 8000c2e:	d009      	beq.n	8000c44 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000c30:	6822      	ldr	r2, [r4, #0]
 8000c32:	6952      	ldr	r2, [r2, #20]
 8000c34:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000c38:	d004      	beq.n	8000c44 <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000c3a:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000c3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c44:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c46:	2304      	movs	r3, #4
 8000c48:	4093      	lsls	r3, r2
 8000c4a:	4233      	tst	r3, r6
 8000c4c:	d009      	beq.n	8000c62 <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000c4e:	6822      	ldr	r2, [r4, #0]
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	f012 0f02 	tst.w	r2, #2
 8000c56:	d004      	beq.n	8000c62 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000c58:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000c5a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c62:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c64:	2310      	movs	r3, #16
 8000c66:	4093      	lsls	r3, r2
 8000c68:	4233      	tst	r3, r6
 8000c6a:	d024      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	f012 0f08 	tst.w	r2, #8
 8000c74:	d01f      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c76:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000c80:	d00d      	beq.n	8000c9e <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000c88:	d104      	bne.n	8000c94 <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c8c:	b19b      	cbz	r3, 8000cb6 <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c8e:	4620      	mov	r0, r4
 8000c90:	4798      	blx	r3
 8000c92:	e010      	b.n	8000cb6 <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c94:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000c96:	b173      	cbz	r3, 8000cb6 <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4798      	blx	r3
 8000c9c:	e00b      	b.n	8000cb6 <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000ca4:	d103      	bne.n	8000cae <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	f022 0208 	bic.w	r2, r2, #8
 8000cac:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000cae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000cb0:	b10b      	cbz	r3, 8000cb6 <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000cb8:	2320      	movs	r3, #32
 8000cba:	4093      	lsls	r3, r2
 8000cbc:	4233      	tst	r3, r6
 8000cbe:	d054      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x18a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	f012 0f10 	tst.w	r2, #16
 8000cc8:	d04f      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x18a>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000cca:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ccc:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	d00e      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x112>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000cdc:	d033      	beq.n	8000d46 <HAL_DMA_IRQHandler+0x166>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000ce4:	d12a      	bne.n	8000d3c <HAL_DMA_IRQHandler+0x15c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000ce6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d03e      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000cec:	4620      	mov	r0, r4
 8000cee:	4798      	blx	r3
 8000cf0:	e03b      	b.n	8000d6a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cf2:	6822      	ldr	r2, [r4, #0]
 8000cf4:	6813      	ldr	r3, [r2, #0]
 8000cf6:	f023 0316 	bic.w	r3, r3, #22
 8000cfa:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	6953      	ldr	r3, [r2, #20]
 8000d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d04:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d08:	b1a3      	cbz	r3, 8000d34 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	f023 0308 	bic.w	r3, r3, #8
 8000d12:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d14:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000d16:	233f      	movs	r3, #63	@ 0x3f
 8000d18:	4093      	lsls	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000d22:	2300      	movs	r3, #0
 8000d24:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8000d28:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d03f      	beq.n	8000dae <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8000d2e:	4620      	mov	r0, r4
 8000d30:	4798      	blx	r3
        return;
 8000d32:	e03c      	b.n	8000dae <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d34:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1e7      	bne.n	8000d0a <HAL_DMA_IRQHandler+0x12a>
 8000d3a:	e7eb      	b.n	8000d14 <HAL_DMA_IRQHandler+0x134>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d3c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000d3e:	b1a3      	cbz	r3, 8000d6a <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d40:	4620      	mov	r0, r4
 8000d42:	4798      	blx	r3
 8000d44:	e011      	b.n	8000d6a <HAL_DMA_IRQHandler+0x18a>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000d4c:	d109      	bne.n	8000d62 <HAL_DMA_IRQHandler+0x182>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	f022 0210 	bic.w	r2, r2, #16
 8000d54:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000d62:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000d64:	b10b      	cbz	r3, 8000d6a <HAL_DMA_IRQHandler+0x18a>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d66:	4620      	mov	r0, r4
 8000d68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000d6c:	b1fb      	cbz	r3, 8000dae <HAL_DMA_IRQHandler+0x1ce>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d6e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000d70:	f013 0f01 	tst.w	r3, #1
 8000d74:	d017      	beq.n	8000da6 <HAL_DMA_IRQHandler+0x1c6>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d76:	2305      	movs	r3, #5
 8000d78:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d7c:	6822      	ldr	r2, [r4, #0]
 8000d7e:	6813      	ldr	r3, [r2, #0]
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 8000d86:	9b01      	ldr	r3, [sp, #4]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d804      	bhi.n	8000d9a <HAL_DMA_IRQHandler+0x1ba>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f013 0f01 	tst.w	r3, #1
 8000d98:	d1f5      	bne.n	8000d86 <HAL_DMA_IRQHandler+0x1a6>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000da0:	2300      	movs	r3, #0
 8000da2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000da6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000da8:	b10b      	cbz	r3, 8000dae <HAL_DMA_IRQHandler+0x1ce>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000daa:	4620      	mov	r0, r4
 8000dac:	4798      	blx	r3
    }
  }
}
 8000dae:	b003      	add	sp, #12
 8000db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	1b4e81b5 	.word	0x1b4e81b5

08000dbc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	f200 80e3 	bhi.w	8000f8a <HAL_GPIO_Init+0x1ce>
{
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	e065      	b.n	8000e96 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000dd0:	2403      	movs	r4, #3
 8000dd2:	fa04 f40e 	lsl.w	r4, r4, lr
 8000dd6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	68cc      	ldr	r4, [r1, #12]
 8000ddc:	fa04 f40e 	lsl.w	r4, r4, lr
 8000de0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000de2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	684a      	ldr	r2, [r1, #4]
 8000dec:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000df0:	409a      	lsls	r2, r3
 8000df2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000df4:	6042      	str	r2, [r0, #4]
 8000df6:	e05c      	b.n	8000eb2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df8:	08dc      	lsrs	r4, r3, #3
 8000dfa:	3408      	adds	r4, #8
 8000dfc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e00:	f003 0507 	and.w	r5, r3, #7
 8000e04:	00ad      	lsls	r5, r5, #2
 8000e06:	f04f 0e0f 	mov.w	lr, #15
 8000e0a:	fa0e fe05 	lsl.w	lr, lr, r5
 8000e0e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e12:	690a      	ldr	r2, [r1, #16]
 8000e14:	40aa      	lsls	r2, r5
 8000e16:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000e1a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000e1e:	e05c      	b.n	8000eda <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e20:	2206      	movs	r2, #6
 8000e22:	e000      	b.n	8000e26 <HAL_GPIO_Init+0x6a>
 8000e24:	2200      	movs	r2, #0
 8000e26:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e2a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2c:	3402      	adds	r4, #2
 8000e2e:	4d57      	ldr	r5, [pc, #348]	@ (8000f8c <HAL_GPIO_Init+0x1d0>)
 8000e30:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e34:	4a56      	ldr	r2, [pc, #344]	@ (8000f90 <HAL_GPIO_Init+0x1d4>)
 8000e36:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	ea6f 020c 	mvn.w	r2, ip
 8000e3c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e40:	684e      	ldr	r6, [r1, #4]
 8000e42:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000e46:	d001      	beq.n	8000e4c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000e48:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000e4c:	4c50      	ldr	r4, [pc, #320]	@ (8000f90 <HAL_GPIO_Init+0x1d4>)
 8000e4e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000e50:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e56:	684e      	ldr	r6, [r1, #4]
 8000e58:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000e5c:	d001      	beq.n	8000e62 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000e5e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000e62:	4c4b      	ldr	r4, [pc, #300]	@ (8000f90 <HAL_GPIO_Init+0x1d4>)
 8000e64:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000e66:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e6c:	684e      	ldr	r6, [r1, #4]
 8000e6e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000e72:	d001      	beq.n	8000e78 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000e74:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000e78:	4c45      	ldr	r4, [pc, #276]	@ (8000f90 <HAL_GPIO_Init+0x1d4>)
 8000e7a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e7e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e80:	684d      	ldr	r5, [r1, #4]
 8000e82:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000e86:	d001      	beq.n	8000e8c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000e88:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000e8c:	4c40      	ldr	r4, [pc, #256]	@ (8000f90 <HAL_GPIO_Init+0x1d4>)
 8000e8e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e90:	3301      	adds	r3, #1
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	d877      	bhi.n	8000f86 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000e96:	2201      	movs	r2, #1
 8000e98:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	680c      	ldr	r4, [r1, #0]
 8000e9c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000ea0:	ea32 0404 	bics.w	r4, r2, r4
 8000ea4:	d1f4      	bne.n	8000e90 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	684c      	ldr	r4, [r1, #4]
 8000ea8:	f004 0403 	and.w	r4, r4, #3
 8000eac:	3c01      	subs	r4, #1
 8000eae:	2c01      	cmp	r4, #1
 8000eb0:	d98b      	bls.n	8000dca <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb2:	684a      	ldr	r2, [r1, #4]
 8000eb4:	f002 0203 	and.w	r2, r2, #3
 8000eb8:	2a03      	cmp	r2, #3
 8000eba:	d009      	beq.n	8000ed0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000ebc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	005d      	lsls	r5, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	40aa      	lsls	r2, r5
 8000ec4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec8:	688a      	ldr	r2, [r1, #8]
 8000eca:	40aa      	lsls	r2, r5
 8000ecc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000ece:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	684a      	ldr	r2, [r1, #4]
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	2a02      	cmp	r2, #2
 8000ed8:	d08e      	beq.n	8000df8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000eda:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000edc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ee6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eea:	684a      	ldr	r2, [r1, #4]
 8000eec:	f002 0203 	and.w	r2, r2, #3
 8000ef0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ef4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000ef6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef8:	684a      	ldr	r2, [r1, #4]
 8000efa:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000efe:	d0c7      	beq.n	8000e90 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	2200      	movs	r2, #0
 8000f02:	9201      	str	r2, [sp, #4]
 8000f04:	4a23      	ldr	r2, [pc, #140]	@ (8000f94 <HAL_GPIO_Init+0x1d8>)
 8000f06:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000f08:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000f0c:	6454      	str	r4, [r2, #68]	@ 0x44
 8000f0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000f10:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000f14:	9201      	str	r2, [sp, #4]
 8000f16:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f18:	089c      	lsrs	r4, r3, #2
 8000f1a:	1ca5      	adds	r5, r4, #2
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <HAL_GPIO_Init+0x1d0>)
 8000f1e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f22:	f003 0e03 	and.w	lr, r3, #3
 8000f26:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f30:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_GPIO_Init+0x1dc>)
 8000f36:	4290      	cmp	r0, r2
 8000f38:	f43f af74 	beq.w	8000e24 <HAL_GPIO_Init+0x68>
 8000f3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f40:	4290      	cmp	r0, r2
 8000f42:	d016      	beq.n	8000f72 <HAL_GPIO_Init+0x1b6>
 8000f44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f48:	4290      	cmp	r0, r2
 8000f4a:	d014      	beq.n	8000f76 <HAL_GPIO_Init+0x1ba>
 8000f4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f50:	4290      	cmp	r0, r2
 8000f52:	d012      	beq.n	8000f7a <HAL_GPIO_Init+0x1be>
 8000f54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f58:	4290      	cmp	r0, r2
 8000f5a:	d010      	beq.n	8000f7e <HAL_GPIO_Init+0x1c2>
 8000f5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f60:	4290      	cmp	r0, r2
 8000f62:	d00e      	beq.n	8000f82 <HAL_GPIO_Init+0x1c6>
 8000f64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f68:	4290      	cmp	r0, r2
 8000f6a:	f43f af59 	beq.w	8000e20 <HAL_GPIO_Init+0x64>
 8000f6e:	2207      	movs	r2, #7
 8000f70:	e759      	b.n	8000e26 <HAL_GPIO_Init+0x6a>
 8000f72:	2201      	movs	r2, #1
 8000f74:	e757      	b.n	8000e26 <HAL_GPIO_Init+0x6a>
 8000f76:	2202      	movs	r2, #2
 8000f78:	e755      	b.n	8000e26 <HAL_GPIO_Init+0x6a>
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	e753      	b.n	8000e26 <HAL_GPIO_Init+0x6a>
 8000f7e:	2204      	movs	r2, #4
 8000f80:	e751      	b.n	8000e26 <HAL_GPIO_Init+0x6a>
 8000f82:	2205      	movs	r2, #5
 8000f84:	e74f      	b.n	8000e26 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000f86:	b002      	add	sp, #8
 8000f88:	bd70      	pop	{r4, r5, r6, pc}
 8000f8a:	4770      	bx	lr
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40013c00 	.word	0x40013c00
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f9c:	b10a      	cbz	r2, 8000fa2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9e:	6181      	str	r1, [r0, #24]
 8000fa0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	6181      	str	r1, [r0, #24]
  }
}
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fa8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4203      	tst	r3, r0
 8000fb0:	d100      	bne.n	8000fb4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000fb2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fb4:	4b02      	ldr	r3, [pc, #8]	@ (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000fb6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fb8:	f7ff fb62 	bl	8000680 <HAL_GPIO_EXTI_Callback>
}
 8000fbc:	e7f9      	b.n	8000fb2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000fbe:	bf00      	nop
 8000fc0:	40013c00 	.word	0x40013c00

08000fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	9100      	str	r1, [sp, #0]
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <HAL_MspInit+0x34>)
 8000fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fd2:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000fd6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000fda:	9200      	str	r2, [sp, #0]
 8000fdc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	9101      	str	r1, [sp, #4]
 8000fe0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fe2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000fe6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	b002      	add	sp, #8
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	f000 809b 	beq.w	8001138 <HAL_RCC_ClockConfig+0x13c>
{
 8001002:	b570      	push	{r4, r5, r6, lr}
 8001004:	460d      	mov	r5, r1
 8001006:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001008:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <HAL_RCC_ClockConfig+0x14c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	428b      	cmp	r3, r1
 8001012:	d208      	bcs.n	8001026 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001014:	b2cb      	uxtb	r3, r1
 8001016:	4a4c      	ldr	r2, [pc, #304]	@ (8001148 <HAL_RCC_ClockConfig+0x14c>)
 8001018:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	428b      	cmp	r3, r1
 8001022:	f040 808b 	bne.w	800113c <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	f013 0f02 	tst.w	r3, #2
 800102c:	d017      	beq.n	800105e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800102e:	f013 0f04 	tst.w	r3, #4
 8001032:	d004      	beq.n	800103e <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001034:	4a45      	ldr	r2, [pc, #276]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 8001036:	6893      	ldr	r3, [r2, #8]
 8001038:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800103c:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	f013 0f08 	tst.w	r3, #8
 8001044:	d004      	beq.n	8001050 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001046:	4a41      	ldr	r2, [pc, #260]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 8001048:	6893      	ldr	r3, [r2, #8]
 800104a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800104e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001050:	4a3e      	ldr	r2, [pc, #248]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 8001052:	6893      	ldr	r3, [r2, #8]
 8001054:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001058:	68a1      	ldr	r1, [r4, #8]
 800105a:	430b      	orrs	r3, r1
 800105c:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	f013 0f01 	tst.w	r3, #1
 8001064:	d032      	beq.n	80010cc <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001066:	6863      	ldr	r3, [r4, #4]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d021      	beq.n	80010b0 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106c:	1e9a      	subs	r2, r3, #2
 800106e:	2a01      	cmp	r2, #1
 8001070:	d925      	bls.n	80010be <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001072:	4a36      	ldr	r2, [pc, #216]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	f012 0f02 	tst.w	r2, #2
 800107a:	d061      	beq.n	8001140 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800107c:	4933      	ldr	r1, [pc, #204]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 800107e:	688a      	ldr	r2, [r1, #8]
 8001080:	f022 0203 	bic.w	r2, r2, #3
 8001084:	4313      	orrs	r3, r2
 8001086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001088:	f7ff fd28 	bl	8000adc <HAL_GetTick>
 800108c:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	6862      	ldr	r2, [r4, #4]
 8001098:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800109c:	d016      	beq.n	80010cc <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109e:	f7ff fd1d 	bl	8000adc <HAL_GetTick>
 80010a2:	1b80      	subs	r0, r0, r6
 80010a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010a8:	4298      	cmp	r0, r3
 80010aa:	d9f0      	bls.n	800108e <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 80010ac:	2003      	movs	r0, #3
 80010ae:	e042      	b.n	8001136 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b0:	4a26      	ldr	r2, [pc, #152]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80010b8:	d1e0      	bne.n	800107c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80010ba:	2001      	movs	r0, #1
 80010bc:	e03b      	b.n	8001136 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80010c6:	d1d9      	bne.n	800107c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80010c8:	2001      	movs	r0, #1
 80010ca:	e034      	b.n	8001136 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <HAL_RCC_ClockConfig+0x14c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	42ab      	cmp	r3, r5
 80010d6:	d907      	bls.n	80010e8 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d8:	b2ea      	uxtb	r2, r5
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_RCC_ClockConfig+0x14c>)
 80010dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	42ab      	cmp	r3, r5
 80010e6:	d12d      	bne.n	8001144 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	f013 0f04 	tst.w	r3, #4
 80010ee:	d006      	beq.n	80010fe <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f0:	4a16      	ldr	r2, [pc, #88]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 80010f2:	6893      	ldr	r3, [r2, #8]
 80010f4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80010f8:	68e1      	ldr	r1, [r4, #12]
 80010fa:	430b      	orrs	r3, r1
 80010fc:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	f013 0f08 	tst.w	r3, #8
 8001104:	d007      	beq.n	8001116 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001106:	4a11      	ldr	r2, [pc, #68]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 8001108:	6893      	ldr	r3, [r2, #8]
 800110a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800110e:	6921      	ldr	r1, [r4, #16]
 8001110:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001114:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001116:	f000 f847 	bl	80011a8 <HAL_RCC_GetSysClockFreq>
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_RCC_ClockConfig+0x150>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001122:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_RCC_ClockConfig+0x154>)
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	40d8      	lsrs	r0, r3
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HAL_RCC_ClockConfig+0x158>)
 800112a:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_RCC_ClockConfig+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f7ff fc88 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001134:	2000      	movs	r0, #0
}
 8001136:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001138:	2001      	movs	r0, #1
}
 800113a:	4770      	bx	lr
      return HAL_ERROR;
 800113c:	2001      	movs	r0, #1
 800113e:	e7fa      	b.n	8001136 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001140:	2001      	movs	r0, #1
 8001142:	e7f8      	b.n	8001136 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001144:	2001      	movs	r0, #1
 8001146:	e7f6      	b.n	8001136 <HAL_RCC_ClockConfig+0x13a>
 8001148:	40023c00 	.word	0x40023c00
 800114c:	40023800 	.word	0x40023800
 8001150:	080027a8 	.word	0x080027a8
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800115c:	4b01      	ldr	r3, [pc, #4]	@ (8001164 <HAL_RCC_GetHCLKFreq+0x8>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001168:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800116a:	f7ff fff7 	bl	800115c <HAL_RCC_GetHCLKFreq>
 800116e:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001176:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001178:	5cd3      	ldrb	r3, [r2, r3]
}
 800117a:	40d8      	lsrs	r0, r3
 800117c:	bd08      	pop	{r3, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	080027a0 	.word	0x080027a0

08001188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001188:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800118a:	f7ff ffe7 	bl	800115c <HAL_RCC_GetHCLKFreq>
 800118e:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001196:	4a03      	ldr	r2, [pc, #12]	@ (80011a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
}
 800119a:	40d8      	lsrs	r0, r3
 800119c:	bd08      	pop	{r3, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	080027a0 	.word	0x080027a0

080011a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a8:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d043      	beq.n	8001242 <HAL_RCC_GetSysClockFreq+0x9a>
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d17f      	bne.n	80012be <HAL_RCC_GetSysClockFreq+0x116>
      sysclockfreq = HSI_VALUE;
      break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011be:	4842      	ldr	r0, [pc, #264]	@ (80012c8 <HAL_RCC_GetSysClockFreq+0x120>)
 80011c0:	e019      	b.n	80011f6 <HAL_RCC_GetSysClockFreq+0x4e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011c2:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80011d0:	d012      	beq.n	80011f8 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d2:	4b3c      	ldr	r3, [pc, #240]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011da:	483b      	ldr	r0, [pc, #236]	@ (80012c8 <HAL_RCC_GetSysClockFreq+0x120>)
 80011dc:	2300      	movs	r3, #0
 80011de:	fba1 0100 	umull	r0, r1, r1, r0
 80011e2:	f7ff f84d 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011ee:	3301      	adds	r3, #1
 80011f0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80011f2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011f6:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f8:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 80011fa:	6858      	ldr	r0, [r3, #4]
 80011fc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001200:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001204:	ebbc 0c00 	subs.w	ip, ip, r0
 8001208:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800120c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001210:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001214:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001218:	ebb1 010c 	subs.w	r1, r1, ip
 800121c:	eb63 030e 	sbc.w	r3, r3, lr
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001226:	00c9      	lsls	r1, r1, #3
 8001228:	eb11 0c00 	adds.w	ip, r1, r0
 800122c:	f143 0300 	adc.w	r3, r3, #0
 8001230:	0299      	lsls	r1, r3, #10
 8001232:	2300      	movs	r3, #0
 8001234:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001238:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800123c:	f7ff f820 	bl	8000280 <__aeabi_uldivmod>
 8001240:	e7d1      	b.n	80011e6 <HAL_RCC_GetSysClockFreq+0x3e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001250:	d010      	beq.n	8001274 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001252:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <HAL_RCC_GetSysClockFreq+0x120>)
 800125c:	2300      	movs	r3, #0
 800125e:	fba1 0100 	umull	r0, r1, r1, r0
 8001262:	f7ff f80d 	bl	8000280 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 800126e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001272:	e7c0      	b.n	80011f6 <HAL_RCC_GetSysClockFreq+0x4e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001276:	6858      	ldr	r0, [r3, #4]
 8001278:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800127c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001280:	ebbc 0c00 	subs.w	ip, ip, r0
 8001284:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001288:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800128c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001290:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001294:	ebb1 010c 	subs.w	r1, r1, ip
 8001298:	eb63 030e 	sbc.w	r3, r3, lr
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012a2:	00c9      	lsls	r1, r1, #3
 80012a4:	eb11 0c00 	adds.w	ip, r1, r0
 80012a8:	f143 0300 	adc.w	r3, r3, #0
 80012ac:	0299      	lsls	r1, r3, #10
 80012ae:	2300      	movs	r3, #0
 80012b0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80012b4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80012b8:	f7fe ffe2 	bl	8000280 <__aeabi_uldivmod>
 80012bc:	e7d3      	b.n	8001266 <HAL_RCC_GetSysClockFreq+0xbe>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012be:	4803      	ldr	r0, [pc, #12]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x124>)
  return sysclockfreq;
 80012c0:	e799      	b.n	80011f6 <HAL_RCC_GetSysClockFreq+0x4e>
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	017d7840 	.word	0x017d7840
 80012cc:	00f42400 	.word	0x00f42400

080012d0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d0:	2800      	cmp	r0, #0
 80012d2:	f000 8201 	beq.w	80016d8 <HAL_RCC_OscConfig+0x408>
{
 80012d6:	b570      	push	{r4, r5, r6, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012dc:	6803      	ldr	r3, [r0, #0]
 80012de:	f013 0f01 	tst.w	r3, #1
 80012e2:	d041      	beq.n	8001368 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80012e4:	4b99      	ldr	r3, [pc, #612]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d032      	beq.n	8001356 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80012f0:	4b96      	ldr	r3, [pc, #600]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 030c 	and.w	r3, r3, #12
        || \
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d027      	beq.n	800134c <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fc:	4b93      	ldr	r3, [pc, #588]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001304:	2b0c      	cmp	r3, #12
 8001306:	d059      	beq.n	80013bc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	6863      	ldr	r3, [r4, #4]
 800130a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130e:	d05b      	beq.n	80013c8 <HAL_RCC_OscConfig+0xf8>
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001314:	d05e      	beq.n	80013d4 <HAL_RCC_OscConfig+0x104>
 8001316:	4b8d      	ldr	r3, [pc, #564]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001326:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001328:	6863      	ldr	r3, [r4, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d05c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff fbd5 	bl	8000adc <HAL_GetTick>
 8001332:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001334:	4b85      	ldr	r3, [pc, #532]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800133c:	d114      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133e:	f7ff fbcd 	bl	8000adc <HAL_GetTick>
 8001342:	1b40      	subs	r0, r0, r5
 8001344:	2864      	cmp	r0, #100	@ 0x64
 8001346:	d9f5      	bls.n	8001334 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8001348:	2003      	movs	r0, #3
 800134a:	e1cc      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800134c:	4b7f      	ldr	r3, [pc, #508]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001354:	d0d2      	beq.n	80012fc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001356:	4b7d      	ldr	r3, [pc, #500]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800135e:	d003      	beq.n	8001368 <HAL_RCC_OscConfig+0x98>
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 81ba 	beq.w	80016dc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	f013 0f02 	tst.w	r3, #2
 800136e:	d060      	beq.n	8001432 <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001370:	4b76      	ldr	r3, [pc, #472]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f013 0f0c 	tst.w	r3, #12
 8001378:	d04a      	beq.n	8001410 <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800137a:	4b74      	ldr	r3, [pc, #464]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001382:	2b08      	cmp	r3, #8
 8001384:	d03f      	beq.n	8001406 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001386:	4b71      	ldr	r3, [pc, #452]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d069      	beq.n	8001466 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001392:	68e3      	ldr	r3, [r4, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d075      	beq.n	8001484 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b6d      	ldr	r3, [pc, #436]	@ (8001550 <HAL_RCC_OscConfig+0x280>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fb9d 	bl	8000adc <HAL_GetTick>
 80013a2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	4b69      	ldr	r3, [pc, #420]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f013 0f02 	tst.w	r3, #2
 80013ac:	d161      	bne.n	8001472 <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fb95 	bl	8000adc <HAL_GetTick>
 80013b2:	1b40      	subs	r0, r0, r5
 80013b4:	2802      	cmp	r0, #2
 80013b6:	d9f5      	bls.n	80013a4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80013b8:	2003      	movs	r0, #3
 80013ba:	e194      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013bc:	4b63      	ldr	r3, [pc, #396]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80013c4:	d0a0      	beq.n	8001308 <HAL_RCC_OscConfig+0x38>
 80013c6:	e7c6      	b.n	8001356 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	4a60      	ldr	r2, [pc, #384]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e7a9      	b.n	8001328 <HAL_RCC_OscConfig+0x58>
 80013d4:	4b5d      	ldr	r3, [pc, #372]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e79f      	b.n	8001328 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb78 	bl	8000adc <HAL_GetTick>
 80013ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b57      	ldr	r3, [pc, #348]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80013f6:	d0b7      	beq.n	8001368 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fb70 	bl	8000adc <HAL_GetTick>
 80013fc:	1b40      	subs	r0, r0, r5
 80013fe:	2864      	cmp	r0, #100	@ 0x64
 8001400:	d9f5      	bls.n	80013ee <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001402:	2003      	movs	r0, #3
 8001404:	e16f      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001406:	4b51      	ldr	r3, [pc, #324]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800140e:	d1ba      	bne.n	8001386 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001410:	4b4e      	ldr	r3, [pc, #312]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f013 0f02 	tst.w	r3, #2
 8001418:	d003      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
 800141a:	68e3      	ldr	r3, [r4, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	f040 815f 	bne.w	80016e0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4a4a      	ldr	r2, [pc, #296]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001424:	6813      	ldr	r3, [r2, #0]
 8001426:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800142a:	6921      	ldr	r1, [r4, #16]
 800142c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001430:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	f013 0f08 	tst.w	r3, #8
 8001438:	d049      	beq.n	80014ce <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800143a:	6963      	ldr	r3, [r4, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d033      	beq.n	80014a8 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001440:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <HAL_RCC_OscConfig+0x280>)
 8001442:	2201      	movs	r2, #1
 8001444:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fb48 	bl	8000adc <HAL_GetTick>
 800144c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001452:	f013 0f02 	tst.w	r3, #2
 8001456:	d13a      	bne.n	80014ce <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fb40 	bl	8000adc <HAL_GetTick>
 800145c:	1b40      	subs	r0, r0, r5
 800145e:	2802      	cmp	r0, #2
 8001460:	d9f5      	bls.n	800144e <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8001462:	2003      	movs	r0, #3
 8001464:	e13f      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	4b39      	ldr	r3, [pc, #228]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800146e:	d190      	bne.n	8001392 <HAL_RCC_OscConfig+0xc2>
 8001470:	e7ce      	b.n	8001410 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4a36      	ldr	r2, [pc, #216]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001474:	6813      	ldr	r3, [r2, #0]
 8001476:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800147a:	6921      	ldr	r1, [r4, #16]
 800147c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e7d6      	b.n	8001432 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001484:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <HAL_RCC_OscConfig+0x280>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800148a:	f7ff fb27 	bl	8000adc <HAL_GetTick>
 800148e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001490:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f013 0f02 	tst.w	r3, #2
 8001498:	d0cb      	beq.n	8001432 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fb1f 	bl	8000adc <HAL_GetTick>
 800149e:	1b40      	subs	r0, r0, r5
 80014a0:	2802      	cmp	r0, #2
 80014a2:	d9f5      	bls.n	8001490 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 80014a4:	2003      	movs	r0, #3
 80014a6:	e11e      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <HAL_RCC_OscConfig+0x280>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fb14 	bl	8000adc <HAL_GetTick>
 80014b4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b6:	4b25      	ldr	r3, [pc, #148]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ba:	f013 0f02 	tst.w	r3, #2
 80014be:	d006      	beq.n	80014ce <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fb0c 	bl	8000adc <HAL_GetTick>
 80014c4:	1b40      	subs	r0, r0, r5
 80014c6:	2802      	cmp	r0, #2
 80014c8:	d9f5      	bls.n	80014b6 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 80014ca:	2003      	movs	r0, #3
 80014cc:	e10b      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	f013 0f04 	tst.w	r3, #4
 80014d4:	d076      	beq.n	80015c4 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80014de:	d133      	bne.n	8001548 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 80014e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014e8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014f8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_RCC_OscConfig+0x284>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001502:	d029      	beq.n	8001558 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	68a3      	ldr	r3, [r4, #8]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d03a      	beq.n	8001580 <HAL_RCC_OscConfig+0x2b0>
 800150a:	2b05      	cmp	r3, #5
 800150c:	d03e      	beq.n	800158c <HAL_RCC_OscConfig+0x2bc>
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 8001510:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	671a      	str	r2, [r3, #112]	@ 0x70
 8001518:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800151a:	f022 0204 	bic.w	r2, r2, #4
 800151e:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001520:	68a3      	ldr	r3, [r4, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d03c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fad9 	bl	8000adc <HAL_GetTick>
 800152a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <HAL_RCC_OscConfig+0x27c>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001530:	f013 0f02 	tst.w	r3, #2
 8001534:	d145      	bne.n	80015c2 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fad1 	bl	8000adc <HAL_GetTick>
 800153a:	1b80      	subs	r0, r0, r6
 800153c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001540:	4298      	cmp	r0, r3
 8001542:	d9f3      	bls.n	800152c <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8001544:	2003      	movs	r0, #3
 8001546:	e0ce      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8001548:	2500      	movs	r5, #0
 800154a:	e7d6      	b.n	80014fa <HAL_RCC_OscConfig+0x22a>
 800154c:	40023800 	.word	0x40023800
 8001550:	42470000 	.word	0x42470000
 8001554:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001558:	4a6b      	ldr	r2, [pc, #428]	@ (8001708 <HAL_RCC_OscConfig+0x438>)
 800155a:	6813      	ldr	r3, [r2, #0]
 800155c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001560:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001562:	f7ff fabb 	bl	8000adc <HAL_GetTick>
 8001566:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	4b67      	ldr	r3, [pc, #412]	@ (8001708 <HAL_RCC_OscConfig+0x438>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001570:	d1c8      	bne.n	8001504 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff fab3 	bl	8000adc <HAL_GetTick>
 8001576:	1b80      	subs	r0, r0, r6
 8001578:	2802      	cmp	r0, #2
 800157a:	d9f5      	bls.n	8001568 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 800157c:	2003      	movs	r0, #3
 800157e:	e0b2      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	4a62      	ldr	r2, [pc, #392]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 8001582:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	@ 0x70
 800158a:	e7c9      	b.n	8001520 <HAL_RCC_OscConfig+0x250>
 800158c:	4b5f      	ldr	r3, [pc, #380]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 800158e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001590:	f042 0204 	orr.w	r2, r2, #4
 8001594:	671a      	str	r2, [r3, #112]	@ 0x70
 8001596:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	671a      	str	r2, [r3, #112]	@ 0x70
 800159e:	e7bf      	b.n	8001520 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fa9c 	bl	8000adc <HAL_GetTick>
 80015a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a6:	4b59      	ldr	r3, [pc, #356]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	f013 0f02 	tst.w	r3, #2
 80015ae:	d008      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fa94 	bl	8000adc <HAL_GetTick>
 80015b4:	1b80      	subs	r0, r0, r6
 80015b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015ba:	4298      	cmp	r0, r3
 80015bc:	d9f3      	bls.n	80015a6 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80015be:	2003      	movs	r0, #3
 80015c0:	e091      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015c2:	b9ed      	cbnz	r5, 8001600 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c4:	69a3      	ldr	r3, [r4, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 808c 	beq.w	80016e4 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015cc:	4a4f      	ldr	r2, [pc, #316]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 80015ce:	6892      	ldr	r2, [r2, #8]
 80015d0:	f002 020c 	and.w	r2, r2, #12
 80015d4:	2a08      	cmp	r2, #8
 80015d6:	d054      	beq.n	8001682 <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d017      	beq.n	800160c <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001710 <HAL_RCC_OscConfig+0x440>)
 80015de:	2200      	movs	r2, #0
 80015e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa7b 	bl	8000adc <HAL_GetTick>
 80015e6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	4b48      	ldr	r3, [pc, #288]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80015f0:	d045      	beq.n	800167e <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fa73 	bl	8000adc <HAL_GetTick>
 80015f6:	1b00      	subs	r0, r0, r4
 80015f8:	2802      	cmp	r0, #2
 80015fa:	d9f5      	bls.n	80015e8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80015fc:	2003      	movs	r0, #3
 80015fe:	e072      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4a42      	ldr	r2, [pc, #264]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 8001602:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	e7db      	b.n	80015c4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b40      	ldr	r3, [pc, #256]	@ (8001710 <HAL_RCC_OscConfig+0x440>)
 800160e:	2200      	movs	r2, #0
 8001610:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001612:	f7ff fa63 	bl	8000adc <HAL_GetTick>
 8001616:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001618:	4b3c      	ldr	r3, [pc, #240]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001620:	d006      	beq.n	8001630 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff fa5b 	bl	8000adc <HAL_GetTick>
 8001626:	1b40      	subs	r0, r0, r5
 8001628:	2802      	cmp	r0, #2
 800162a:	d9f5      	bls.n	8001618 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 800162c:	2003      	movs	r0, #3
 800162e:	e05a      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001630:	69e3      	ldr	r3, [r4, #28]
 8001632:	6a22      	ldr	r2, [r4, #32]
 8001634:	4313      	orrs	r3, r2
 8001636:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001638:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800163c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800163e:	0852      	lsrs	r2, r2, #1
 8001640:	3a01      	subs	r2, #1
 8001642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001646:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001648:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800164c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800164e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001652:	4a2e      	ldr	r2, [pc, #184]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 8001654:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001656:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <HAL_RCC_OscConfig+0x440>)
 8001658:	2201      	movs	r2, #1
 800165a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800165c:	f7ff fa3e 	bl	8000adc <HAL_GetTick>
 8001660:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fa36 	bl	8000adc <HAL_GetTick>
 8001670:	1b00      	subs	r0, r0, r4
 8001672:	2802      	cmp	r0, #2
 8001674:	d9f5      	bls.n	8001662 <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8001676:	2003      	movs	r0, #3
 8001678:	e035      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800167a:	2000      	movs	r0, #0
 800167c:	e033      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
 800167e:	2000      	movs	r0, #0
 8001680:	e031      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001682:	2b01      	cmp	r3, #1
 8001684:	d031      	beq.n	80016ea <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8001686:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_RCC_OscConfig+0x43c>)
 8001688:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800168e:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001690:	4291      	cmp	r1, r2
 8001692:	d12c      	bne.n	80016ee <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001694:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001698:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	428a      	cmp	r2, r1
 800169c:	d129      	bne.n	80016f2 <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80016a4:	401a      	ands	r2, r3
 80016a6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80016aa:	d124      	bne.n	80016f6 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ac:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80016b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80016b2:	0852      	lsrs	r2, r2, #1
 80016b4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80016ba:	d11e      	bne.n	80016fa <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016bc:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016c0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80016c6:	d11a      	bne.n	80016fe <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016c8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80016cc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ce:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80016d2:	d116      	bne.n	8001702 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80016d4:	2000      	movs	r0, #0
 80016d6:	e006      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80016d8:	2001      	movs	r0, #1
}
 80016da:	4770      	bx	lr
        return HAL_ERROR;
 80016dc:	2001      	movs	r0, #1
 80016de:	e002      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80016e4:	2000      	movs	r0, #0
}
 80016e6:	b002      	add	sp, #8
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	e7fb      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80016ee:	2001      	movs	r0, #1
 80016f0:	e7f9      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
 80016f2:	2001      	movs	r0, #1
 80016f4:	e7f7      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
 80016f6:	2001      	movs	r0, #1
 80016f8:	e7f5      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
 80016fa:	2001      	movs	r0, #1
 80016fc:	e7f3      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
 80016fe:	2001      	movs	r0, #1
 8001700:	e7f1      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
 8001702:	2001      	movs	r0, #1
 8001704:	e7ef      	b.n	80016e6 <HAL_RCC_OscConfig+0x416>
 8001706:	bf00      	nop
 8001708:	40007000 	.word	0x40007000
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000

08001714 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001714:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001716:	f102 030c 	add.w	r3, r2, #12
 800171a:	e853 3f00 	ldrex	r3, [r3]
 800171e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001722:	320c      	adds	r2, #12
 8001724:	e842 3100 	strex	r1, r3, [r2]
 8001728:	2900      	cmp	r1, #0
 800172a:	d1f3      	bne.n	8001714 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800172c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800172e:	f102 0314 	add.w	r3, r2, #20
 8001732:	e853 3f00 	ldrex	r3, [r3]
 8001736:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800173a:	3214      	adds	r2, #20
 800173c:	e842 3100 	strex	r1, r3, [r2]
 8001740:	2900      	cmp	r1, #0
 8001742:	d1f3      	bne.n	800172c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001744:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001746:	2b01      	cmp	r3, #1
 8001748:	d005      	beq.n	8001756 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800174a:	2320      	movs	r3, #32
 800174c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001750:	2300      	movs	r3, #0
 8001752:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001754:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001756:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001758:	f102 030c 	add.w	r3, r2, #12
 800175c:	e853 3f00 	ldrex	r3, [r3]
 8001760:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001764:	320c      	adds	r2, #12
 8001766:	e842 3100 	strex	r1, r3, [r2]
 800176a:	2900      	cmp	r1, #0
 800176c:	d1f3      	bne.n	8001756 <UART_EndRxTransfer+0x42>
 800176e:	e7ec      	b.n	800174a <UART_EndRxTransfer+0x36>

08001770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001770:	b510      	push	{r4, lr}
 8001772:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001774:	6802      	ldr	r2, [r0, #0]
 8001776:	6913      	ldr	r3, [r2, #16]
 8001778:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800177c:	68c1      	ldr	r1, [r0, #12]
 800177e:	430b      	orrs	r3, r1
 8001780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001782:	6883      	ldr	r3, [r0, #8]
 8001784:	6902      	ldr	r2, [r0, #16]
 8001786:	431a      	orrs	r2, r3
 8001788:	6943      	ldr	r3, [r0, #20]
 800178a:	431a      	orrs	r2, r3
 800178c:	69c3      	ldr	r3, [r0, #28]
 800178e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001790:	6801      	ldr	r1, [r0, #0]
 8001792:	68cb      	ldr	r3, [r1, #12]
 8001794:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001798:	f023 030c 	bic.w	r3, r3, #12
 800179c:	4313      	orrs	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017a0:	6802      	ldr	r2, [r0, #0]
 80017a2:	6953      	ldr	r3, [r2, #20]
 80017a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017a8:	6981      	ldr	r1, [r0, #24]
 80017aa:	430b      	orrs	r3, r1
 80017ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017ae:	6803      	ldr	r3, [r0, #0]
 80017b0:	4a31      	ldr	r2, [pc, #196]	@ (8001878 <UART_SetConfig+0x108>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d006      	beq.n	80017c4 <UART_SetConfig+0x54>
 80017b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d002      	beq.n	80017c4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80017be:	f7ff fcd3 	bl	8001168 <HAL_RCC_GetPCLK1Freq>
 80017c2:	e001      	b.n	80017c8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80017c4:	f7ff fce0 	bl	8001188 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017c8:	69e3      	ldr	r3, [r4, #28]
 80017ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017ce:	d029      	beq.n	8001824 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017d0:	2100      	movs	r1, #0
 80017d2:	1803      	adds	r3, r0, r0
 80017d4:	4149      	adcs	r1, r1
 80017d6:	181b      	adds	r3, r3, r0
 80017d8:	f141 0100 	adc.w	r1, r1, #0
 80017dc:	00c9      	lsls	r1, r1, #3
 80017de:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	1818      	adds	r0, r3, r0
 80017e6:	6863      	ldr	r3, [r4, #4]
 80017e8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80017ec:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80017f0:	f141 0100 	adc.w	r1, r1, #0
 80017f4:	f7fe fd44 	bl	8000280 <__aeabi_uldivmod>
 80017f8:	4a20      	ldr	r2, [pc, #128]	@ (800187c <UART_SetConfig+0x10c>)
 80017fa:	fba2 3100 	umull	r3, r1, r2, r0
 80017fe:	0949      	lsrs	r1, r1, #5
 8001800:	2364      	movs	r3, #100	@ 0x64
 8001802:	fb03 0311 	mls	r3, r3, r1, r0
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	3332      	adds	r3, #50	@ 0x32
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001814:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	6821      	ldr	r1, [r4, #0]
 800181e:	4413      	add	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }
}
 8001822:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001824:	2300      	movs	r3, #0
 8001826:	1802      	adds	r2, r0, r0
 8001828:	eb43 0103 	adc.w	r1, r3, r3
 800182c:	1812      	adds	r2, r2, r0
 800182e:	f141 0100 	adc.w	r1, r1, #0
 8001832:	00c9      	lsls	r1, r1, #3
 8001834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001838:	00d2      	lsls	r2, r2, #3
 800183a:	1810      	adds	r0, r2, r0
 800183c:	f141 0100 	adc.w	r1, r1, #0
 8001840:	6862      	ldr	r2, [r4, #4]
 8001842:	1892      	adds	r2, r2, r2
 8001844:	415b      	adcs	r3, r3
 8001846:	f7fe fd1b 	bl	8000280 <__aeabi_uldivmod>
 800184a:	4a0c      	ldr	r2, [pc, #48]	@ (800187c <UART_SetConfig+0x10c>)
 800184c:	fba2 3100 	umull	r3, r1, r2, r0
 8001850:	0949      	lsrs	r1, r1, #5
 8001852:	2364      	movs	r3, #100	@ 0x64
 8001854:	fb03 0311 	mls	r3, r3, r1, r0
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	3332      	adds	r3, #50	@ 0x32
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	005a      	lsls	r2, r3, #1
 8001864:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001868:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	6821      	ldr	r1, [r4, #0]
 8001872:	4413      	add	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
 8001876:	e7d4      	b.n	8001822 <UART_SetConfig+0xb2>
 8001878:	40011000 	.word	0x40011000
 800187c:	51eb851f 	.word	0x51eb851f

08001880 <UART_WaitOnFlagUntilTimeout>:
{
 8001880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001884:	b083      	sub	sp, #12
 8001886:	4605      	mov	r5, r0
 8001888:	460e      	mov	r6, r1
 800188a:	4617      	mov	r7, r2
 800188c:	4699      	mov	r9, r3
 800188e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	681c      	ldr	r4, [r3, #0]
 8001896:	ea36 0404 	bics.w	r4, r6, r4
 800189a:	bf0c      	ite	eq
 800189c:	2401      	moveq	r4, #1
 800189e:	2400      	movne	r4, #0
 80018a0:	42bc      	cmp	r4, r7
 80018a2:	d128      	bne.n	80018f6 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80018a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80018a8:	d0f3      	beq.n	8001892 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018aa:	f7ff f917 	bl	8000adc <HAL_GetTick>
 80018ae:	eba0 0009 	sub.w	r0, r0, r9
 80018b2:	4540      	cmp	r0, r8
 80018b4:	d823      	bhi.n	80018fe <UART_WaitOnFlagUntilTimeout+0x7e>
 80018b6:	f1b8 0f00 	cmp.w	r8, #0
 80018ba:	d022      	beq.n	8001902 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80018bc:	682b      	ldr	r3, [r5, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	f012 0f04 	tst.w	r2, #4
 80018c4:	d0e5      	beq.n	8001892 <UART_WaitOnFlagUntilTimeout+0x12>
 80018c6:	2e80      	cmp	r6, #128	@ 0x80
 80018c8:	d0e3      	beq.n	8001892 <UART_WaitOnFlagUntilTimeout+0x12>
 80018ca:	2e40      	cmp	r6, #64	@ 0x40
 80018cc:	d0e1      	beq.n	8001892 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	f012 0f08 	tst.w	r2, #8
 80018d4:	d0dd      	beq.n	8001892 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80018d6:	2400      	movs	r4, #0
 80018d8:	9401      	str	r4, [sp, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80018e4:	4628      	mov	r0, r5
 80018e6:	f7ff ff15 	bl	8001714 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80018ea:	2308      	movs	r3, #8
 80018ec:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80018ee:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80018f2:	2001      	movs	r0, #1
 80018f4:	e000      	b.n	80018f8 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80018f6:	2000      	movs	r0, #0
}
 80018f8:	b003      	add	sp, #12
 80018fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
 8001900:	e7fa      	b.n	80018f8 <UART_WaitOnFlagUntilTimeout+0x78>
 8001902:	2003      	movs	r0, #3
 8001904:	e7f8      	b.n	80018f8 <UART_WaitOnFlagUntilTimeout+0x78>

08001906 <HAL_UART_MspInit>:
}
 8001906:	4770      	bx	lr

08001908 <HAL_UART_Init>:
  if (huart == NULL)
 8001908:	b360      	cbz	r0, 8001964 <HAL_UART_Init+0x5c>
{
 800190a:	b510      	push	{r4, lr}
 800190c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800190e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001912:	b313      	cbz	r3, 800195a <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001914:	2324      	movs	r3, #36	@ 0x24
 8001916:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800191a:	6822      	ldr	r2, [r4, #0]
 800191c:	68d3      	ldr	r3, [r2, #12]
 800191e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001922:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001924:	4620      	mov	r0, r4
 8001926:	f7ff ff23 	bl	8001770 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800192a:	6822      	ldr	r2, [r4, #0]
 800192c:	6913      	ldr	r3, [r2, #16]
 800192e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001932:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	6953      	ldr	r3, [r2, #20]
 8001938:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800193c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800193e:	6822      	ldr	r2, [r4, #0]
 8001940:	68d3      	ldr	r3, [r2, #12]
 8001942:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001946:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001948:	2000      	movs	r0, #0
 800194a:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800194c:	2320      	movs	r3, #32
 800194e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001952:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001956:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001958:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800195a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800195e:	f7ff ffd2 	bl	8001906 <HAL_UART_MspInit>
 8001962:	e7d7      	b.n	8001914 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001964:	2001      	movs	r0, #1
}
 8001966:	4770      	bx	lr

08001968 <HAL_UART_Transmit>:
{
 8001968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001970:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001974:	2b20      	cmp	r3, #32
 8001976:	d156      	bne.n	8001a26 <HAL_UART_Transmit+0xbe>
 8001978:	4604      	mov	r4, r0
 800197a:	460d      	mov	r5, r1
 800197c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800197e:	2900      	cmp	r1, #0
 8001980:	d055      	beq.n	8001a2e <HAL_UART_Transmit+0xc6>
 8001982:	b90a      	cbnz	r2, 8001988 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8001984:	2001      	movs	r0, #1
 8001986:	e04f      	b.n	8001a28 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800198c:	2321      	movs	r3, #33	@ 0x21
 800198e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001992:	f7ff f8a3 	bl	8000adc <HAL_GetTick>
 8001996:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001998:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800199c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019a0:	68a3      	ldr	r3, [r4, #8]
 80019a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019a6:	d002      	beq.n	80019ae <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 80019a8:	f04f 0800 	mov.w	r8, #0
 80019ac:	e014      	b.n	80019d8 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ae:	6923      	ldr	r3, [r4, #16]
 80019b0:	b32b      	cbz	r3, 80019fe <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 80019b2:	f04f 0800 	mov.w	r8, #0
 80019b6:	e00f      	b.n	80019d8 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 80019b8:	2320      	movs	r3, #32
 80019ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80019be:	2003      	movs	r0, #3
 80019c0:	e032      	b.n	8001a28 <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019c2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019cc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80019ce:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80019d0:	b292      	uxth	r2, r2
 80019d2:	3a01      	subs	r2, #1
 80019d4:	b292      	uxth	r2, r2
 80019d6:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80019d8:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b193      	cbz	r3, 8001a04 <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019de:	9600      	str	r6, [sp, #0]
 80019e0:	463b      	mov	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7ff ff4a 	bl	8001880 <UART_WaitOnFlagUntilTimeout>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d1e3      	bne.n	80019b8 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 80019f0:	2d00      	cmp	r5, #0
 80019f2:	d0e6      	beq.n	80019c2 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019f4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019fc:	e7e7      	b.n	80019ce <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 80019fe:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001a00:	2500      	movs	r5, #0
 8001a02:	e7e9      	b.n	80019d8 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a04:	9600      	str	r6, [sp, #0]
 8001a06:	463b      	mov	r3, r7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2140      	movs	r1, #64	@ 0x40
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff ff37 	bl	8001880 <UART_WaitOnFlagUntilTimeout>
 8001a12:	b918      	cbnz	r0, 8001a1c <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8001a14:	2320      	movs	r3, #32
 8001a16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001a1a:	e005      	b.n	8001a28 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001a22:	2003      	movs	r0, #3
 8001a24:	e000      	b.n	8001a28 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8001a26:	2002      	movs	r0, #2
}
 8001a28:	b002      	add	sp, #8
 8001a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001a2e:	2001      	movs	r0, #1
 8001a30:	e7fa      	b.n	8001a28 <HAL_UART_Transmit+0xc0>

08001a32 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a32:	e7fe      	b.n	8001a32 <NMI_Handler>

08001a34 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <HardFault_Handler>

08001a36 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <MemManage_Handler>

08001a38 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <BusFault_Handler>

08001a3a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <UsageFault_Handler>

08001a3c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3c:	4770      	bx	lr

08001a3e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3e:	4770      	bx	lr

08001a40 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a40:	4770      	bx	lr

08001a42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a42:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f7ff f83e 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bd08      	pop	{r3, pc}
	...

08001a4c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001a4e:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA1_Stream5_IRQHandler+0xc>)
 8001a50:	f7ff f8c6 	bl	8000be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a54:	bd08      	pop	{r3, pc}
 8001a56:	bf00      	nop
 8001a58:	200000d8 	.word	0x200000d8

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a60:	4a0c      	ldr	r2, [pc, #48]	@ (8001a94 <_sbrk+0x38>)
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a64:	480d      	ldr	r0, [pc, #52]	@ (8001a9c <_sbrk+0x40>)
 8001a66:	6800      	ldr	r0, [r0, #0]
 8001a68:	b140      	cbz	r0, 8001a7c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <_sbrk+0x40>)
 8001a6c:	6800      	ldr	r0, [r0, #0]
 8001a6e:	4403      	add	r3, r0
 8001a70:	1a52      	subs	r2, r2, r1
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d806      	bhi.n	8001a84 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a76:	4a09      	ldr	r2, [pc, #36]	@ (8001a9c <_sbrk+0x40>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001a7a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a7c:	4807      	ldr	r0, [pc, #28]	@ (8001a9c <_sbrk+0x40>)
 8001a7e:	4c08      	ldr	r4, [pc, #32]	@ (8001aa0 <_sbrk+0x44>)
 8001a80:	6004      	str	r4, [r0, #0]
 8001a82:	e7f2      	b.n	8001a6a <_sbrk+0xe>
    errno = ENOMEM;
 8001a84:	f000 f86c 	bl	8001b60 <__errno>
 8001a88:	230c      	movs	r3, #12
 8001a8a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	e7f3      	b.n	8001a7a <_sbrk+0x1e>
 8001a92:	bf00      	nop
 8001a94:	20020000 	.word	0x20020000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	2000013c 	.word	0x2000013c
 8001aa0:	20000288 	.word	0x20000288

08001aa4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4a03      	ldr	r2, [pc, #12]	@ (8001ab4 <SystemInit+0x10>)
 8001aa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001aaa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001abc:	f7ff fff2 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	@ (8001af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f000 f841 	bl	8001b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aea:	f7fe ff3f 	bl	800096c <main>
  bx  lr    
 8001aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001afc:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 8001b00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b04:	20000288 	.word	0x20000288

08001b08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <CAN1_RX0_IRQHandler>
	...

08001b0c <siprintf>:
 8001b0c:	b40e      	push	{r1, r2, r3}
 8001b0e:	b510      	push	{r4, lr}
 8001b10:	b09d      	sub	sp, #116	@ 0x74
 8001b12:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001b14:	9002      	str	r0, [sp, #8]
 8001b16:	9006      	str	r0, [sp, #24]
 8001b18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001b1c:	480a      	ldr	r0, [pc, #40]	@ (8001b48 <siprintf+0x3c>)
 8001b1e:	9107      	str	r1, [sp, #28]
 8001b20:	9104      	str	r1, [sp, #16]
 8001b22:	490a      	ldr	r1, [pc, #40]	@ (8001b4c <siprintf+0x40>)
 8001b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b28:	9105      	str	r1, [sp, #20]
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	a902      	add	r1, sp, #8
 8001b2e:	6800      	ldr	r0, [r0, #0]
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001b34:	f000 f998 	bl	8001e68 <_svfiprintf_r>
 8001b38:	9b02      	ldr	r3, [sp, #8]
 8001b3a:	701c      	strb	r4, [r3, #0]
 8001b3c:	b01d      	add	sp, #116	@ 0x74
 8001b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b42:	b003      	add	sp, #12
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	ffff0208 	.word	0xffff0208

08001b50 <memset>:
 8001b50:	4402      	add	r2, r0
 8001b52:	4603      	mov	r3, r0
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d100      	bne.n	8001b5a <memset+0xa>
 8001b58:	4770      	bx	lr
 8001b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b5e:	e7f9      	b.n	8001b54 <memset+0x4>

08001b60 <__errno>:
 8001b60:	4b01      	ldr	r3, [pc, #4]	@ (8001b68 <__errno+0x8>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000000c 	.word	0x2000000c

08001b6c <__libc_init_array>:
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <__libc_init_array+0x38>)
 8001b70:	4d0d      	ldr	r5, [pc, #52]	@ (8001ba8 <__libc_init_array+0x3c>)
 8001b72:	1b5b      	subs	r3, r3, r5
 8001b74:	109c      	asrs	r4, r3, #2
 8001b76:	2600      	movs	r6, #0
 8001b78:	42a6      	cmp	r6, r4
 8001b7a:	d109      	bne.n	8001b90 <__libc_init_array+0x24>
 8001b7c:	f000 fde8 	bl	8002750 <_init>
 8001b80:	4d0a      	ldr	r5, [pc, #40]	@ (8001bac <__libc_init_array+0x40>)
 8001b82:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <__libc_init_array+0x44>)
 8001b84:	1b5b      	subs	r3, r3, r5
 8001b86:	109c      	asrs	r4, r3, #2
 8001b88:	2600      	movs	r6, #0
 8001b8a:	42a6      	cmp	r6, r4
 8001b8c:	d105      	bne.n	8001b9a <__libc_init_array+0x2e>
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b94:	4798      	blx	r3
 8001b96:	3601      	adds	r6, #1
 8001b98:	e7ee      	b.n	8001b78 <__libc_init_array+0xc>
 8001b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b9e:	4798      	blx	r3
 8001ba0:	3601      	adds	r6, #1
 8001ba2:	e7f2      	b.n	8001b8a <__libc_init_array+0x1e>
 8001ba4:	080027f4 	.word	0x080027f4
 8001ba8:	080027f4 	.word	0x080027f4
 8001bac:	080027f4 	.word	0x080027f4
 8001bb0:	080027f8 	.word	0x080027f8

08001bb4 <__retarget_lock_acquire_recursive>:
 8001bb4:	4770      	bx	lr

08001bb6 <__retarget_lock_release_recursive>:
 8001bb6:	4770      	bx	lr

08001bb8 <_free_r>:
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4605      	mov	r5, r0
 8001bbc:	2900      	cmp	r1, #0
 8001bbe:	d041      	beq.n	8001c44 <_free_r+0x8c>
 8001bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bc4:	1f0c      	subs	r4, r1, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bfb8      	it	lt
 8001bca:	18e4      	addlt	r4, r4, r3
 8001bcc:	f000 f8e0 	bl	8001d90 <__malloc_lock>
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c48 <_free_r+0x90>)
 8001bd2:	6813      	ldr	r3, [r2, #0]
 8001bd4:	b933      	cbnz	r3, 8001be4 <_free_r+0x2c>
 8001bd6:	6063      	str	r3, [r4, #4]
 8001bd8:	6014      	str	r4, [r2, #0]
 8001bda:	4628      	mov	r0, r5
 8001bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001be0:	f000 b8dc 	b.w	8001d9c <__malloc_unlock>
 8001be4:	42a3      	cmp	r3, r4
 8001be6:	d908      	bls.n	8001bfa <_free_r+0x42>
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	1821      	adds	r1, r4, r0
 8001bec:	428b      	cmp	r3, r1
 8001bee:	bf01      	itttt	eq
 8001bf0:	6819      	ldreq	r1, [r3, #0]
 8001bf2:	685b      	ldreq	r3, [r3, #4]
 8001bf4:	1809      	addeq	r1, r1, r0
 8001bf6:	6021      	streq	r1, [r4, #0]
 8001bf8:	e7ed      	b.n	8001bd6 <_free_r+0x1e>
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	b10b      	cbz	r3, 8001c04 <_free_r+0x4c>
 8001c00:	42a3      	cmp	r3, r4
 8001c02:	d9fa      	bls.n	8001bfa <_free_r+0x42>
 8001c04:	6811      	ldr	r1, [r2, #0]
 8001c06:	1850      	adds	r0, r2, r1
 8001c08:	42a0      	cmp	r0, r4
 8001c0a:	d10b      	bne.n	8001c24 <_free_r+0x6c>
 8001c0c:	6820      	ldr	r0, [r4, #0]
 8001c0e:	4401      	add	r1, r0
 8001c10:	1850      	adds	r0, r2, r1
 8001c12:	4283      	cmp	r3, r0
 8001c14:	6011      	str	r1, [r2, #0]
 8001c16:	d1e0      	bne.n	8001bda <_free_r+0x22>
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	6053      	str	r3, [r2, #4]
 8001c1e:	4408      	add	r0, r1
 8001c20:	6010      	str	r0, [r2, #0]
 8001c22:	e7da      	b.n	8001bda <_free_r+0x22>
 8001c24:	d902      	bls.n	8001c2c <_free_r+0x74>
 8001c26:	230c      	movs	r3, #12
 8001c28:	602b      	str	r3, [r5, #0]
 8001c2a:	e7d6      	b.n	8001bda <_free_r+0x22>
 8001c2c:	6820      	ldr	r0, [r4, #0]
 8001c2e:	1821      	adds	r1, r4, r0
 8001c30:	428b      	cmp	r3, r1
 8001c32:	bf04      	itt	eq
 8001c34:	6819      	ldreq	r1, [r3, #0]
 8001c36:	685b      	ldreq	r3, [r3, #4]
 8001c38:	6063      	str	r3, [r4, #4]
 8001c3a:	bf04      	itt	eq
 8001c3c:	1809      	addeq	r1, r1, r0
 8001c3e:	6021      	streq	r1, [r4, #0]
 8001c40:	6054      	str	r4, [r2, #4]
 8001c42:	e7ca      	b.n	8001bda <_free_r+0x22>
 8001c44:	bd38      	pop	{r3, r4, r5, pc}
 8001c46:	bf00      	nop
 8001c48:	20000284 	.word	0x20000284

08001c4c <sbrk_aligned>:
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	4e0f      	ldr	r6, [pc, #60]	@ (8001c8c <sbrk_aligned+0x40>)
 8001c50:	460c      	mov	r4, r1
 8001c52:	6831      	ldr	r1, [r6, #0]
 8001c54:	4605      	mov	r5, r0
 8001c56:	b911      	cbnz	r1, 8001c5e <sbrk_aligned+0x12>
 8001c58:	f000 fbaa 	bl	80023b0 <_sbrk_r>
 8001c5c:	6030      	str	r0, [r6, #0]
 8001c5e:	4621      	mov	r1, r4
 8001c60:	4628      	mov	r0, r5
 8001c62:	f000 fba5 	bl	80023b0 <_sbrk_r>
 8001c66:	1c43      	adds	r3, r0, #1
 8001c68:	d103      	bne.n	8001c72 <sbrk_aligned+0x26>
 8001c6a:	f04f 34ff 	mov.w	r4, #4294967295
 8001c6e:	4620      	mov	r0, r4
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
 8001c72:	1cc4      	adds	r4, r0, #3
 8001c74:	f024 0403 	bic.w	r4, r4, #3
 8001c78:	42a0      	cmp	r0, r4
 8001c7a:	d0f8      	beq.n	8001c6e <sbrk_aligned+0x22>
 8001c7c:	1a21      	subs	r1, r4, r0
 8001c7e:	4628      	mov	r0, r5
 8001c80:	f000 fb96 	bl	80023b0 <_sbrk_r>
 8001c84:	3001      	adds	r0, #1
 8001c86:	d1f2      	bne.n	8001c6e <sbrk_aligned+0x22>
 8001c88:	e7ef      	b.n	8001c6a <sbrk_aligned+0x1e>
 8001c8a:	bf00      	nop
 8001c8c:	20000280 	.word	0x20000280

08001c90 <_malloc_r>:
 8001c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c94:	1ccd      	adds	r5, r1, #3
 8001c96:	f025 0503 	bic.w	r5, r5, #3
 8001c9a:	3508      	adds	r5, #8
 8001c9c:	2d0c      	cmp	r5, #12
 8001c9e:	bf38      	it	cc
 8001ca0:	250c      	movcc	r5, #12
 8001ca2:	2d00      	cmp	r5, #0
 8001ca4:	4606      	mov	r6, r0
 8001ca6:	db01      	blt.n	8001cac <_malloc_r+0x1c>
 8001ca8:	42a9      	cmp	r1, r5
 8001caa:	d904      	bls.n	8001cb6 <_malloc_r+0x26>
 8001cac:	230c      	movs	r3, #12
 8001cae:	6033      	str	r3, [r6, #0]
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d8c <_malloc_r+0xfc>
 8001cba:	f000 f869 	bl	8001d90 <__malloc_lock>
 8001cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8001cc2:	461c      	mov	r4, r3
 8001cc4:	bb44      	cbnz	r4, 8001d18 <_malloc_r+0x88>
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	4630      	mov	r0, r6
 8001cca:	f7ff ffbf 	bl	8001c4c <sbrk_aligned>
 8001cce:	1c43      	adds	r3, r0, #1
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	d158      	bne.n	8001d86 <_malloc_r+0xf6>
 8001cd4:	f8d8 4000 	ldr.w	r4, [r8]
 8001cd8:	4627      	mov	r7, r4
 8001cda:	2f00      	cmp	r7, #0
 8001cdc:	d143      	bne.n	8001d66 <_malloc_r+0xd6>
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	d04b      	beq.n	8001d7a <_malloc_r+0xea>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	4639      	mov	r1, r7
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	eb04 0903 	add.w	r9, r4, r3
 8001cec:	f000 fb60 	bl	80023b0 <_sbrk_r>
 8001cf0:	4581      	cmp	r9, r0
 8001cf2:	d142      	bne.n	8001d7a <_malloc_r+0xea>
 8001cf4:	6821      	ldr	r1, [r4, #0]
 8001cf6:	1a6d      	subs	r5, r5, r1
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	f7ff ffa6 	bl	8001c4c <sbrk_aligned>
 8001d00:	3001      	adds	r0, #1
 8001d02:	d03a      	beq.n	8001d7a <_malloc_r+0xea>
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	442b      	add	r3, r5
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	bb62      	cbnz	r2, 8001d6c <_malloc_r+0xdc>
 8001d12:	f8c8 7000 	str.w	r7, [r8]
 8001d16:	e00f      	b.n	8001d38 <_malloc_r+0xa8>
 8001d18:	6822      	ldr	r2, [r4, #0]
 8001d1a:	1b52      	subs	r2, r2, r5
 8001d1c:	d420      	bmi.n	8001d60 <_malloc_r+0xd0>
 8001d1e:	2a0b      	cmp	r2, #11
 8001d20:	d917      	bls.n	8001d52 <_malloc_r+0xc2>
 8001d22:	1961      	adds	r1, r4, r5
 8001d24:	42a3      	cmp	r3, r4
 8001d26:	6025      	str	r5, [r4, #0]
 8001d28:	bf18      	it	ne
 8001d2a:	6059      	strne	r1, [r3, #4]
 8001d2c:	6863      	ldr	r3, [r4, #4]
 8001d2e:	bf08      	it	eq
 8001d30:	f8c8 1000 	streq.w	r1, [r8]
 8001d34:	5162      	str	r2, [r4, r5]
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f000 f82f 	bl	8001d9c <__malloc_unlock>
 8001d3e:	f104 000b 	add.w	r0, r4, #11
 8001d42:	1d23      	adds	r3, r4, #4
 8001d44:	f020 0007 	bic.w	r0, r0, #7
 8001d48:	1ac2      	subs	r2, r0, r3
 8001d4a:	bf1c      	itt	ne
 8001d4c:	1a1b      	subne	r3, r3, r0
 8001d4e:	50a3      	strne	r3, [r4, r2]
 8001d50:	e7af      	b.n	8001cb2 <_malloc_r+0x22>
 8001d52:	6862      	ldr	r2, [r4, #4]
 8001d54:	42a3      	cmp	r3, r4
 8001d56:	bf0c      	ite	eq
 8001d58:	f8c8 2000 	streq.w	r2, [r8]
 8001d5c:	605a      	strne	r2, [r3, #4]
 8001d5e:	e7eb      	b.n	8001d38 <_malloc_r+0xa8>
 8001d60:	4623      	mov	r3, r4
 8001d62:	6864      	ldr	r4, [r4, #4]
 8001d64:	e7ae      	b.n	8001cc4 <_malloc_r+0x34>
 8001d66:	463c      	mov	r4, r7
 8001d68:	687f      	ldr	r7, [r7, #4]
 8001d6a:	e7b6      	b.n	8001cda <_malloc_r+0x4a>
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	42a3      	cmp	r3, r4
 8001d72:	d1fb      	bne.n	8001d6c <_malloc_r+0xdc>
 8001d74:	2300      	movs	r3, #0
 8001d76:	6053      	str	r3, [r2, #4]
 8001d78:	e7de      	b.n	8001d38 <_malloc_r+0xa8>
 8001d7a:	230c      	movs	r3, #12
 8001d7c:	6033      	str	r3, [r6, #0]
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f000 f80c 	bl	8001d9c <__malloc_unlock>
 8001d84:	e794      	b.n	8001cb0 <_malloc_r+0x20>
 8001d86:	6005      	str	r5, [r0, #0]
 8001d88:	e7d6      	b.n	8001d38 <_malloc_r+0xa8>
 8001d8a:	bf00      	nop
 8001d8c:	20000284 	.word	0x20000284

08001d90 <__malloc_lock>:
 8001d90:	4801      	ldr	r0, [pc, #4]	@ (8001d98 <__malloc_lock+0x8>)
 8001d92:	f7ff bf0f 	b.w	8001bb4 <__retarget_lock_acquire_recursive>
 8001d96:	bf00      	nop
 8001d98:	2000027c 	.word	0x2000027c

08001d9c <__malloc_unlock>:
 8001d9c:	4801      	ldr	r0, [pc, #4]	@ (8001da4 <__malloc_unlock+0x8>)
 8001d9e:	f7ff bf0a 	b.w	8001bb6 <__retarget_lock_release_recursive>
 8001da2:	bf00      	nop
 8001da4:	2000027c 	.word	0x2000027c

08001da8 <__ssputs_r>:
 8001da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dac:	688e      	ldr	r6, [r1, #8]
 8001dae:	461f      	mov	r7, r3
 8001db0:	42be      	cmp	r6, r7
 8001db2:	4682      	mov	sl, r0
 8001db4:	460c      	mov	r4, r1
 8001db6:	4690      	mov	r8, r2
 8001db8:	4633      	mov	r3, r6
 8001dba:	d853      	bhi.n	8001e64 <__ssputs_r+0xbc>
 8001dbc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8001dc0:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8001dc4:	d02b      	beq.n	8001e1e <__ssputs_r+0x76>
 8001dc6:	6965      	ldr	r5, [r4, #20]
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	6909      	ldr	r1, [r1, #16]
 8001dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001dd0:	eba3 0901 	sub.w	r9, r3, r1
 8001dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001dd8:	1c7b      	adds	r3, r7, #1
 8001dda:	106d      	asrs	r5, r5, #1
 8001ddc:	444b      	add	r3, r9
 8001dde:	42ab      	cmp	r3, r5
 8001de0:	462a      	mov	r2, r5
 8001de2:	bf84      	itt	hi
 8001de4:	461d      	movhi	r5, r3
 8001de6:	462a      	movhi	r2, r5
 8001de8:	0543      	lsls	r3, r0, #21
 8001dea:	d527      	bpl.n	8001e3c <__ssputs_r+0x94>
 8001dec:	4611      	mov	r1, r2
 8001dee:	4650      	mov	r0, sl
 8001df0:	f7ff ff4e 	bl	8001c90 <_malloc_r>
 8001df4:	4606      	mov	r6, r0
 8001df6:	b358      	cbz	r0, 8001e50 <__ssputs_r+0xa8>
 8001df8:	6921      	ldr	r1, [r4, #16]
 8001dfa:	464a      	mov	r2, r9
 8001dfc:	f000 fae8 	bl	80023d0 <memcpy>
 8001e00:	89a3      	ldrh	r3, [r4, #12]
 8001e02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0a:	81a3      	strh	r3, [r4, #12]
 8001e0c:	6126      	str	r6, [r4, #16]
 8001e0e:	6165      	str	r5, [r4, #20]
 8001e10:	444e      	add	r6, r9
 8001e12:	eba5 0509 	sub.w	r5, r5, r9
 8001e16:	6026      	str	r6, [r4, #0]
 8001e18:	60a5      	str	r5, [r4, #8]
 8001e1a:	463e      	mov	r6, r7
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	461f      	mov	r7, r3
 8001e20:	6820      	ldr	r0, [r4, #0]
 8001e22:	463a      	mov	r2, r7
 8001e24:	4641      	mov	r1, r8
 8001e26:	f000 faa9 	bl	800237c <memmove>
 8001e2a:	68a3      	ldr	r3, [r4, #8]
 8001e2c:	1b9b      	subs	r3, r3, r6
 8001e2e:	60a3      	str	r3, [r4, #8]
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	443b      	add	r3, r7
 8001e34:	6023      	str	r3, [r4, #0]
 8001e36:	2000      	movs	r0, #0
 8001e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3c:	4650      	mov	r0, sl
 8001e3e:	f000 fad5 	bl	80023ec <_realloc_r>
 8001e42:	4606      	mov	r6, r0
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d1e1      	bne.n	8001e0c <__ssputs_r+0x64>
 8001e48:	6921      	ldr	r1, [r4, #16]
 8001e4a:	4650      	mov	r0, sl
 8001e4c:	f7ff feb4 	bl	8001bb8 <_free_r>
 8001e50:	230c      	movs	r3, #12
 8001e52:	f8ca 3000 	str.w	r3, [sl]
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e5c:	81a3      	strh	r3, [r4, #12]
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e62:	e7e9      	b.n	8001e38 <__ssputs_r+0x90>
 8001e64:	463e      	mov	r6, r7
 8001e66:	e7db      	b.n	8001e20 <__ssputs_r+0x78>

08001e68 <_svfiprintf_r>:
 8001e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e6c:	4698      	mov	r8, r3
 8001e6e:	898b      	ldrh	r3, [r1, #12]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	b09d      	sub	sp, #116	@ 0x74
 8001e74:	4607      	mov	r7, r0
 8001e76:	460d      	mov	r5, r1
 8001e78:	4614      	mov	r4, r2
 8001e7a:	d510      	bpl.n	8001e9e <_svfiprintf_r+0x36>
 8001e7c:	690b      	ldr	r3, [r1, #16]
 8001e7e:	b973      	cbnz	r3, 8001e9e <_svfiprintf_r+0x36>
 8001e80:	2140      	movs	r1, #64	@ 0x40
 8001e82:	f7ff ff05 	bl	8001c90 <_malloc_r>
 8001e86:	6028      	str	r0, [r5, #0]
 8001e88:	6128      	str	r0, [r5, #16]
 8001e8a:	b930      	cbnz	r0, 8001e9a <_svfiprintf_r+0x32>
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	b01d      	add	sp, #116	@ 0x74
 8001e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e9a:	2340      	movs	r3, #64	@ 0x40
 8001e9c:	616b      	str	r3, [r5, #20]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ea8:	f8cd 800c 	str.w	r8, [sp, #12]
 8001eac:	2330      	movs	r3, #48	@ 0x30
 8001eae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800204c <_svfiprintf_r+0x1e4>
 8001eb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001eb6:	f04f 0901 	mov.w	r9, #1
 8001eba:	4623      	mov	r3, r4
 8001ebc:	469a      	mov	sl, r3
 8001ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ec2:	b10a      	cbz	r2, 8001ec8 <_svfiprintf_r+0x60>
 8001ec4:	2a25      	cmp	r2, #37	@ 0x25
 8001ec6:	d1f9      	bne.n	8001ebc <_svfiprintf_r+0x54>
 8001ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8001ecc:	d00b      	beq.n	8001ee6 <_svfiprintf_r+0x7e>
 8001ece:	465b      	mov	r3, fp
 8001ed0:	4622      	mov	r2, r4
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	4638      	mov	r0, r7
 8001ed6:	f7ff ff67 	bl	8001da8 <__ssputs_r>
 8001eda:	3001      	adds	r0, #1
 8001edc:	f000 80a7 	beq.w	800202e <_svfiprintf_r+0x1c6>
 8001ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001ee2:	445a      	add	r2, fp
 8001ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 809f 	beq.w	800202e <_svfiprintf_r+0x1c6>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001efa:	f10a 0a01 	add.w	sl, sl, #1
 8001efe:	9304      	str	r3, [sp, #16]
 8001f00:	9307      	str	r3, [sp, #28]
 8001f02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f06:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f08:	4654      	mov	r4, sl
 8001f0a:	2205      	movs	r2, #5
 8001f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f10:	484e      	ldr	r0, [pc, #312]	@ (800204c <_svfiprintf_r+0x1e4>)
 8001f12:	f7fe f965 	bl	80001e0 <memchr>
 8001f16:	9a04      	ldr	r2, [sp, #16]
 8001f18:	b9d8      	cbnz	r0, 8001f52 <_svfiprintf_r+0xea>
 8001f1a:	06d0      	lsls	r0, r2, #27
 8001f1c:	bf44      	itt	mi
 8001f1e:	2320      	movmi	r3, #32
 8001f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f24:	0711      	lsls	r1, r2, #28
 8001f26:	bf44      	itt	mi
 8001f28:	232b      	movmi	r3, #43	@ 0x2b
 8001f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8001f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f34:	d015      	beq.n	8001f62 <_svfiprintf_r+0xfa>
 8001f36:	9a07      	ldr	r2, [sp, #28]
 8001f38:	4654      	mov	r4, sl
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f04f 0c0a 	mov.w	ip, #10
 8001f40:	4621      	mov	r1, r4
 8001f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f46:	3b30      	subs	r3, #48	@ 0x30
 8001f48:	2b09      	cmp	r3, #9
 8001f4a:	d94b      	bls.n	8001fe4 <_svfiprintf_r+0x17c>
 8001f4c:	b1b0      	cbz	r0, 8001f7c <_svfiprintf_r+0x114>
 8001f4e:	9207      	str	r2, [sp, #28]
 8001f50:	e014      	b.n	8001f7c <_svfiprintf_r+0x114>
 8001f52:	eba0 0308 	sub.w	r3, r0, r8
 8001f56:	fa09 f303 	lsl.w	r3, r9, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	9304      	str	r3, [sp, #16]
 8001f5e:	46a2      	mov	sl, r4
 8001f60:	e7d2      	b.n	8001f08 <_svfiprintf_r+0xa0>
 8001f62:	9b03      	ldr	r3, [sp, #12]
 8001f64:	1d19      	adds	r1, r3, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	9103      	str	r1, [sp, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bfbb      	ittet	lt
 8001f6e:	425b      	neglt	r3, r3
 8001f70:	f042 0202 	orrlt.w	r2, r2, #2
 8001f74:	9307      	strge	r3, [sp, #28]
 8001f76:	9307      	strlt	r3, [sp, #28]
 8001f78:	bfb8      	it	lt
 8001f7a:	9204      	strlt	r2, [sp, #16]
 8001f7c:	7823      	ldrb	r3, [r4, #0]
 8001f7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f80:	d10a      	bne.n	8001f98 <_svfiprintf_r+0x130>
 8001f82:	7863      	ldrb	r3, [r4, #1]
 8001f84:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f86:	d132      	bne.n	8001fee <_svfiprintf_r+0x186>
 8001f88:	9b03      	ldr	r3, [sp, #12]
 8001f8a:	1d1a      	adds	r2, r3, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	9203      	str	r2, [sp, #12]
 8001f90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f94:	3402      	adds	r4, #2
 8001f96:	9305      	str	r3, [sp, #20]
 8001f98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800205c <_svfiprintf_r+0x1f4>
 8001f9c:	7821      	ldrb	r1, [r4, #0]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	4650      	mov	r0, sl
 8001fa2:	f7fe f91d 	bl	80001e0 <memchr>
 8001fa6:	b138      	cbz	r0, 8001fb8 <_svfiprintf_r+0x150>
 8001fa8:	9b04      	ldr	r3, [sp, #16]
 8001faa:	eba0 000a 	sub.w	r0, r0, sl
 8001fae:	2240      	movs	r2, #64	@ 0x40
 8001fb0:	4082      	lsls	r2, r0
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	3401      	adds	r4, #1
 8001fb6:	9304      	str	r3, [sp, #16]
 8001fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fbc:	4824      	ldr	r0, [pc, #144]	@ (8002050 <_svfiprintf_r+0x1e8>)
 8001fbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001fc2:	2206      	movs	r2, #6
 8001fc4:	f7fe f90c 	bl	80001e0 <memchr>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d036      	beq.n	800203a <_svfiprintf_r+0x1d2>
 8001fcc:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <_svfiprintf_r+0x1ec>)
 8001fce:	bb1b      	cbnz	r3, 8002018 <_svfiprintf_r+0x1b0>
 8001fd0:	9b03      	ldr	r3, [sp, #12]
 8001fd2:	3307      	adds	r3, #7
 8001fd4:	f023 0307 	bic.w	r3, r3, #7
 8001fd8:	3308      	adds	r3, #8
 8001fda:	9303      	str	r3, [sp, #12]
 8001fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fde:	4433      	add	r3, r6
 8001fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001fe2:	e76a      	b.n	8001eba <_svfiprintf_r+0x52>
 8001fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fe8:	460c      	mov	r4, r1
 8001fea:	2001      	movs	r0, #1
 8001fec:	e7a8      	b.n	8001f40 <_svfiprintf_r+0xd8>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	3401      	adds	r4, #1
 8001ff2:	9305      	str	r3, [sp, #20]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f04f 0c0a 	mov.w	ip, #10
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002000:	3a30      	subs	r2, #48	@ 0x30
 8002002:	2a09      	cmp	r2, #9
 8002004:	d903      	bls.n	800200e <_svfiprintf_r+0x1a6>
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0c6      	beq.n	8001f98 <_svfiprintf_r+0x130>
 800200a:	9105      	str	r1, [sp, #20]
 800200c:	e7c4      	b.n	8001f98 <_svfiprintf_r+0x130>
 800200e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002012:	4604      	mov	r4, r0
 8002014:	2301      	movs	r3, #1
 8002016:	e7f0      	b.n	8001ffa <_svfiprintf_r+0x192>
 8002018:	ab03      	add	r3, sp, #12
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	462a      	mov	r2, r5
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <_svfiprintf_r+0x1f0>)
 8002020:	a904      	add	r1, sp, #16
 8002022:	4638      	mov	r0, r7
 8002024:	f3af 8000 	nop.w
 8002028:	1c42      	adds	r2, r0, #1
 800202a:	4606      	mov	r6, r0
 800202c:	d1d6      	bne.n	8001fdc <_svfiprintf_r+0x174>
 800202e:	89ab      	ldrh	r3, [r5, #12]
 8002030:	065b      	lsls	r3, r3, #25
 8002032:	f53f af2d 	bmi.w	8001e90 <_svfiprintf_r+0x28>
 8002036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002038:	e72c      	b.n	8001e94 <_svfiprintf_r+0x2c>
 800203a:	ab03      	add	r3, sp, #12
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	462a      	mov	r2, r5
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <_svfiprintf_r+0x1f0>)
 8002042:	a904      	add	r1, sp, #16
 8002044:	4638      	mov	r0, r7
 8002046:	f000 f879 	bl	800213c <_printf_i>
 800204a:	e7ed      	b.n	8002028 <_svfiprintf_r+0x1c0>
 800204c:	080027b8 	.word	0x080027b8
 8002050:	080027c2 	.word	0x080027c2
 8002054:	00000000 	.word	0x00000000
 8002058:	08001da9 	.word	0x08001da9
 800205c:	080027be 	.word	0x080027be

08002060 <_printf_common>:
 8002060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002064:	4616      	mov	r6, r2
 8002066:	4698      	mov	r8, r3
 8002068:	688a      	ldr	r2, [r1, #8]
 800206a:	690b      	ldr	r3, [r1, #16]
 800206c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002070:	4293      	cmp	r3, r2
 8002072:	bfb8      	it	lt
 8002074:	4613      	movlt	r3, r2
 8002076:	6033      	str	r3, [r6, #0]
 8002078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800207c:	4607      	mov	r7, r0
 800207e:	460c      	mov	r4, r1
 8002080:	b10a      	cbz	r2, 8002086 <_printf_common+0x26>
 8002082:	3301      	adds	r3, #1
 8002084:	6033      	str	r3, [r6, #0]
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	0699      	lsls	r1, r3, #26
 800208a:	bf42      	ittt	mi
 800208c:	6833      	ldrmi	r3, [r6, #0]
 800208e:	3302      	addmi	r3, #2
 8002090:	6033      	strmi	r3, [r6, #0]
 8002092:	6825      	ldr	r5, [r4, #0]
 8002094:	f015 0506 	ands.w	r5, r5, #6
 8002098:	d106      	bne.n	80020a8 <_printf_common+0x48>
 800209a:	f104 0a19 	add.w	sl, r4, #25
 800209e:	68e3      	ldr	r3, [r4, #12]
 80020a0:	6832      	ldr	r2, [r6, #0]
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	42ab      	cmp	r3, r5
 80020a6:	dc26      	bgt.n	80020f6 <_printf_common+0x96>
 80020a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80020ac:	6822      	ldr	r2, [r4, #0]
 80020ae:	3b00      	subs	r3, #0
 80020b0:	bf18      	it	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	0692      	lsls	r2, r2, #26
 80020b6:	d42b      	bmi.n	8002110 <_printf_common+0xb0>
 80020b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80020bc:	4641      	mov	r1, r8
 80020be:	4638      	mov	r0, r7
 80020c0:	47c8      	blx	r9
 80020c2:	3001      	adds	r0, #1
 80020c4:	d01e      	beq.n	8002104 <_printf_common+0xa4>
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	6922      	ldr	r2, [r4, #16]
 80020ca:	f003 0306 	and.w	r3, r3, #6
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf02      	ittt	eq
 80020d2:	68e5      	ldreq	r5, [r4, #12]
 80020d4:	6833      	ldreq	r3, [r6, #0]
 80020d6:	1aed      	subeq	r5, r5, r3
 80020d8:	68a3      	ldr	r3, [r4, #8]
 80020da:	bf0c      	ite	eq
 80020dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020e0:	2500      	movne	r5, #0
 80020e2:	4293      	cmp	r3, r2
 80020e4:	bfc4      	itt	gt
 80020e6:	1a9b      	subgt	r3, r3, r2
 80020e8:	18ed      	addgt	r5, r5, r3
 80020ea:	2600      	movs	r6, #0
 80020ec:	341a      	adds	r4, #26
 80020ee:	42b5      	cmp	r5, r6
 80020f0:	d11a      	bne.n	8002128 <_printf_common+0xc8>
 80020f2:	2000      	movs	r0, #0
 80020f4:	e008      	b.n	8002108 <_printf_common+0xa8>
 80020f6:	2301      	movs	r3, #1
 80020f8:	4652      	mov	r2, sl
 80020fa:	4641      	mov	r1, r8
 80020fc:	4638      	mov	r0, r7
 80020fe:	47c8      	blx	r9
 8002100:	3001      	adds	r0, #1
 8002102:	d103      	bne.n	800210c <_printf_common+0xac>
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800210c:	3501      	adds	r5, #1
 800210e:	e7c6      	b.n	800209e <_printf_common+0x3e>
 8002110:	18e1      	adds	r1, r4, r3
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	2030      	movs	r0, #48	@ 0x30
 8002116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800211a:	4422      	add	r2, r4
 800211c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002124:	3302      	adds	r3, #2
 8002126:	e7c7      	b.n	80020b8 <_printf_common+0x58>
 8002128:	2301      	movs	r3, #1
 800212a:	4622      	mov	r2, r4
 800212c:	4641      	mov	r1, r8
 800212e:	4638      	mov	r0, r7
 8002130:	47c8      	blx	r9
 8002132:	3001      	adds	r0, #1
 8002134:	d0e6      	beq.n	8002104 <_printf_common+0xa4>
 8002136:	3601      	adds	r6, #1
 8002138:	e7d9      	b.n	80020ee <_printf_common+0x8e>
	...

0800213c <_printf_i>:
 800213c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002140:	7e0f      	ldrb	r7, [r1, #24]
 8002142:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002144:	2f78      	cmp	r7, #120	@ 0x78
 8002146:	4691      	mov	r9, r2
 8002148:	4680      	mov	r8, r0
 800214a:	460c      	mov	r4, r1
 800214c:	469a      	mov	sl, r3
 800214e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002152:	d807      	bhi.n	8002164 <_printf_i+0x28>
 8002154:	2f62      	cmp	r7, #98	@ 0x62
 8002156:	d80a      	bhi.n	800216e <_printf_i+0x32>
 8002158:	2f00      	cmp	r7, #0
 800215a:	f000 80d2 	beq.w	8002302 <_printf_i+0x1c6>
 800215e:	2f58      	cmp	r7, #88	@ 0x58
 8002160:	f000 80b7 	beq.w	80022d2 <_printf_i+0x196>
 8002164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800216c:	e03a      	b.n	80021e4 <_printf_i+0xa8>
 800216e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002172:	2b15      	cmp	r3, #21
 8002174:	d8f6      	bhi.n	8002164 <_printf_i+0x28>
 8002176:	a101      	add	r1, pc, #4	@ (adr r1, 800217c <_printf_i+0x40>)
 8002178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800217c:	080021d5 	.word	0x080021d5
 8002180:	080021e9 	.word	0x080021e9
 8002184:	08002165 	.word	0x08002165
 8002188:	08002165 	.word	0x08002165
 800218c:	08002165 	.word	0x08002165
 8002190:	08002165 	.word	0x08002165
 8002194:	080021e9 	.word	0x080021e9
 8002198:	08002165 	.word	0x08002165
 800219c:	08002165 	.word	0x08002165
 80021a0:	08002165 	.word	0x08002165
 80021a4:	08002165 	.word	0x08002165
 80021a8:	080022e9 	.word	0x080022e9
 80021ac:	08002213 	.word	0x08002213
 80021b0:	0800229f 	.word	0x0800229f
 80021b4:	08002165 	.word	0x08002165
 80021b8:	08002165 	.word	0x08002165
 80021bc:	0800230b 	.word	0x0800230b
 80021c0:	08002165 	.word	0x08002165
 80021c4:	08002213 	.word	0x08002213
 80021c8:	08002165 	.word	0x08002165
 80021cc:	08002165 	.word	0x08002165
 80021d0:	080022a7 	.word	0x080022a7
 80021d4:	6833      	ldr	r3, [r6, #0]
 80021d6:	1d1a      	adds	r2, r3, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6032      	str	r2, [r6, #0]
 80021dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021e4:	2301      	movs	r3, #1
 80021e6:	e09d      	b.n	8002324 <_printf_i+0x1e8>
 80021e8:	6833      	ldr	r3, [r6, #0]
 80021ea:	6820      	ldr	r0, [r4, #0]
 80021ec:	1d19      	adds	r1, r3, #4
 80021ee:	6031      	str	r1, [r6, #0]
 80021f0:	0606      	lsls	r6, r0, #24
 80021f2:	d501      	bpl.n	80021f8 <_printf_i+0xbc>
 80021f4:	681d      	ldr	r5, [r3, #0]
 80021f6:	e003      	b.n	8002200 <_printf_i+0xc4>
 80021f8:	0645      	lsls	r5, r0, #25
 80021fa:	d5fb      	bpl.n	80021f4 <_printf_i+0xb8>
 80021fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002200:	2d00      	cmp	r5, #0
 8002202:	da03      	bge.n	800220c <_printf_i+0xd0>
 8002204:	232d      	movs	r3, #45	@ 0x2d
 8002206:	426d      	negs	r5, r5
 8002208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800220c:	4859      	ldr	r0, [pc, #356]	@ (8002374 <_printf_i+0x238>)
 800220e:	230a      	movs	r3, #10
 8002210:	e010      	b.n	8002234 <_printf_i+0xf8>
 8002212:	6821      	ldr	r1, [r4, #0]
 8002214:	6833      	ldr	r3, [r6, #0]
 8002216:	0608      	lsls	r0, r1, #24
 8002218:	f853 5b04 	ldr.w	r5, [r3], #4
 800221c:	d402      	bmi.n	8002224 <_printf_i+0xe8>
 800221e:	0649      	lsls	r1, r1, #25
 8002220:	bf48      	it	mi
 8002222:	b2ad      	uxthmi	r5, r5
 8002224:	2f6f      	cmp	r7, #111	@ 0x6f
 8002226:	4853      	ldr	r0, [pc, #332]	@ (8002374 <_printf_i+0x238>)
 8002228:	6033      	str	r3, [r6, #0]
 800222a:	d159      	bne.n	80022e0 <_printf_i+0x1a4>
 800222c:	2308      	movs	r3, #8
 800222e:	2100      	movs	r1, #0
 8002230:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002234:	6866      	ldr	r6, [r4, #4]
 8002236:	60a6      	str	r6, [r4, #8]
 8002238:	2e00      	cmp	r6, #0
 800223a:	db05      	blt.n	8002248 <_printf_i+0x10c>
 800223c:	6821      	ldr	r1, [r4, #0]
 800223e:	432e      	orrs	r6, r5
 8002240:	f021 0104 	bic.w	r1, r1, #4
 8002244:	6021      	str	r1, [r4, #0]
 8002246:	d04d      	beq.n	80022e4 <_printf_i+0x1a8>
 8002248:	4616      	mov	r6, r2
 800224a:	fbb5 f1f3 	udiv	r1, r5, r3
 800224e:	fb03 5711 	mls	r7, r3, r1, r5
 8002252:	5dc7      	ldrb	r7, [r0, r7]
 8002254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002258:	462f      	mov	r7, r5
 800225a:	42bb      	cmp	r3, r7
 800225c:	460d      	mov	r5, r1
 800225e:	d9f4      	bls.n	800224a <_printf_i+0x10e>
 8002260:	2b08      	cmp	r3, #8
 8002262:	d10b      	bne.n	800227c <_printf_i+0x140>
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	07df      	lsls	r7, r3, #31
 8002268:	d508      	bpl.n	800227c <_printf_i+0x140>
 800226a:	6923      	ldr	r3, [r4, #16]
 800226c:	6861      	ldr	r1, [r4, #4]
 800226e:	4299      	cmp	r1, r3
 8002270:	bfde      	ittt	le
 8002272:	2330      	movle	r3, #48	@ 0x30
 8002274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002278:	f106 36ff 	addle.w	r6, r6, #4294967295
 800227c:	1b92      	subs	r2, r2, r6
 800227e:	6122      	str	r2, [r4, #16]
 8002280:	f8cd a000 	str.w	sl, [sp]
 8002284:	464b      	mov	r3, r9
 8002286:	aa03      	add	r2, sp, #12
 8002288:	4621      	mov	r1, r4
 800228a:	4640      	mov	r0, r8
 800228c:	f7ff fee8 	bl	8002060 <_printf_common>
 8002290:	3001      	adds	r0, #1
 8002292:	d14c      	bne.n	800232e <_printf_i+0x1f2>
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	b004      	add	sp, #16
 800229a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	4834      	ldr	r0, [pc, #208]	@ (8002378 <_printf_i+0x23c>)
 80022a8:	2778      	movs	r7, #120	@ 0x78
 80022aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	6831      	ldr	r1, [r6, #0]
 80022b2:	061f      	lsls	r7, r3, #24
 80022b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80022b8:	d402      	bmi.n	80022c0 <_printf_i+0x184>
 80022ba:	065f      	lsls	r7, r3, #25
 80022bc:	bf48      	it	mi
 80022be:	b2ad      	uxthmi	r5, r5
 80022c0:	6031      	str	r1, [r6, #0]
 80022c2:	07d9      	lsls	r1, r3, #31
 80022c4:	bf44      	itt	mi
 80022c6:	f043 0320 	orrmi.w	r3, r3, #32
 80022ca:	6023      	strmi	r3, [r4, #0]
 80022cc:	b11d      	cbz	r5, 80022d6 <_printf_i+0x19a>
 80022ce:	2310      	movs	r3, #16
 80022d0:	e7ad      	b.n	800222e <_printf_i+0xf2>
 80022d2:	4828      	ldr	r0, [pc, #160]	@ (8002374 <_printf_i+0x238>)
 80022d4:	e7e9      	b.n	80022aa <_printf_i+0x16e>
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	f023 0320 	bic.w	r3, r3, #32
 80022dc:	6023      	str	r3, [r4, #0]
 80022de:	e7f6      	b.n	80022ce <_printf_i+0x192>
 80022e0:	230a      	movs	r3, #10
 80022e2:	e7a4      	b.n	800222e <_printf_i+0xf2>
 80022e4:	4616      	mov	r6, r2
 80022e6:	e7bb      	b.n	8002260 <_printf_i+0x124>
 80022e8:	6833      	ldr	r3, [r6, #0]
 80022ea:	6825      	ldr	r5, [r4, #0]
 80022ec:	6961      	ldr	r1, [r4, #20]
 80022ee:	1d18      	adds	r0, r3, #4
 80022f0:	6030      	str	r0, [r6, #0]
 80022f2:	062e      	lsls	r6, r5, #24
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	d501      	bpl.n	80022fc <_printf_i+0x1c0>
 80022f8:	6019      	str	r1, [r3, #0]
 80022fa:	e002      	b.n	8002302 <_printf_i+0x1c6>
 80022fc:	0668      	lsls	r0, r5, #25
 80022fe:	d5fb      	bpl.n	80022f8 <_printf_i+0x1bc>
 8002300:	8019      	strh	r1, [r3, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	6123      	str	r3, [r4, #16]
 8002306:	4616      	mov	r6, r2
 8002308:	e7ba      	b.n	8002280 <_printf_i+0x144>
 800230a:	6833      	ldr	r3, [r6, #0]
 800230c:	1d1a      	adds	r2, r3, #4
 800230e:	6032      	str	r2, [r6, #0]
 8002310:	681e      	ldr	r6, [r3, #0]
 8002312:	6862      	ldr	r2, [r4, #4]
 8002314:	2100      	movs	r1, #0
 8002316:	4630      	mov	r0, r6
 8002318:	f7fd ff62 	bl	80001e0 <memchr>
 800231c:	b108      	cbz	r0, 8002322 <_printf_i+0x1e6>
 800231e:	1b80      	subs	r0, r0, r6
 8002320:	6060      	str	r0, [r4, #4]
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	6123      	str	r3, [r4, #16]
 8002326:	2300      	movs	r3, #0
 8002328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800232c:	e7a8      	b.n	8002280 <_printf_i+0x144>
 800232e:	6923      	ldr	r3, [r4, #16]
 8002330:	4632      	mov	r2, r6
 8002332:	4649      	mov	r1, r9
 8002334:	4640      	mov	r0, r8
 8002336:	47d0      	blx	sl
 8002338:	3001      	adds	r0, #1
 800233a:	d0ab      	beq.n	8002294 <_printf_i+0x158>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	079b      	lsls	r3, r3, #30
 8002340:	d413      	bmi.n	800236a <_printf_i+0x22e>
 8002342:	68e0      	ldr	r0, [r4, #12]
 8002344:	9b03      	ldr	r3, [sp, #12]
 8002346:	4298      	cmp	r0, r3
 8002348:	bfb8      	it	lt
 800234a:	4618      	movlt	r0, r3
 800234c:	e7a4      	b.n	8002298 <_printf_i+0x15c>
 800234e:	2301      	movs	r3, #1
 8002350:	4632      	mov	r2, r6
 8002352:	4649      	mov	r1, r9
 8002354:	4640      	mov	r0, r8
 8002356:	47d0      	blx	sl
 8002358:	3001      	adds	r0, #1
 800235a:	d09b      	beq.n	8002294 <_printf_i+0x158>
 800235c:	3501      	adds	r5, #1
 800235e:	68e3      	ldr	r3, [r4, #12]
 8002360:	9903      	ldr	r1, [sp, #12]
 8002362:	1a5b      	subs	r3, r3, r1
 8002364:	42ab      	cmp	r3, r5
 8002366:	dcf2      	bgt.n	800234e <_printf_i+0x212>
 8002368:	e7eb      	b.n	8002342 <_printf_i+0x206>
 800236a:	2500      	movs	r5, #0
 800236c:	f104 0619 	add.w	r6, r4, #25
 8002370:	e7f5      	b.n	800235e <_printf_i+0x222>
 8002372:	bf00      	nop
 8002374:	080027c9 	.word	0x080027c9
 8002378:	080027da 	.word	0x080027da

0800237c <memmove>:
 800237c:	4288      	cmp	r0, r1
 800237e:	b510      	push	{r4, lr}
 8002380:	eb01 0402 	add.w	r4, r1, r2
 8002384:	d902      	bls.n	800238c <memmove+0x10>
 8002386:	4284      	cmp	r4, r0
 8002388:	4623      	mov	r3, r4
 800238a:	d807      	bhi.n	800239c <memmove+0x20>
 800238c:	1e43      	subs	r3, r0, #1
 800238e:	42a1      	cmp	r1, r4
 8002390:	d007      	beq.n	80023a2 <memmove+0x26>
 8002392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800239a:	e7f8      	b.n	800238e <memmove+0x12>
 800239c:	4402      	add	r2, r0
 800239e:	4282      	cmp	r2, r0
 80023a0:	d100      	bne.n	80023a4 <memmove+0x28>
 80023a2:	bd10      	pop	{r4, pc}
 80023a4:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80023a8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80023ac:	e7f7      	b.n	800239e <memmove+0x22>
	...

080023b0 <_sbrk_r>:
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4d06      	ldr	r5, [pc, #24]	@ (80023cc <_sbrk_r+0x1c>)
 80023b4:	2300      	movs	r3, #0
 80023b6:	4604      	mov	r4, r0
 80023b8:	4608      	mov	r0, r1
 80023ba:	602b      	str	r3, [r5, #0]
 80023bc:	f7ff fb4e 	bl	8001a5c <_sbrk>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_sbrk_r+0x1a>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_sbrk_r+0x1a>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	20000278 	.word	0x20000278

080023d0 <memcpy>:
 80023d0:	440a      	add	r2, r1
 80023d2:	4291      	cmp	r1, r2
 80023d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80023d8:	d100      	bne.n	80023dc <memcpy+0xc>
 80023da:	4770      	bx	lr
 80023dc:	b510      	push	{r4, lr}
 80023de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023e6:	4291      	cmp	r1, r2
 80023e8:	d1f9      	bne.n	80023de <memcpy+0xe>
 80023ea:	bd10      	pop	{r4, pc}

080023ec <_realloc_r>:
 80023ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f0:	4607      	mov	r7, r0
 80023f2:	4614      	mov	r4, r2
 80023f4:	460d      	mov	r5, r1
 80023f6:	b921      	cbnz	r1, 8002402 <_realloc_r+0x16>
 80023f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023fc:	4611      	mov	r1, r2
 80023fe:	f7ff bc47 	b.w	8001c90 <_malloc_r>
 8002402:	b92a      	cbnz	r2, 8002410 <_realloc_r+0x24>
 8002404:	f7ff fbd8 	bl	8001bb8 <_free_r>
 8002408:	4625      	mov	r5, r4
 800240a:	4628      	mov	r0, r5
 800240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002410:	f000 f81a 	bl	8002448 <_malloc_usable_size_r>
 8002414:	4284      	cmp	r4, r0
 8002416:	4606      	mov	r6, r0
 8002418:	d802      	bhi.n	8002420 <_realloc_r+0x34>
 800241a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800241e:	d8f4      	bhi.n	800240a <_realloc_r+0x1e>
 8002420:	4621      	mov	r1, r4
 8002422:	4638      	mov	r0, r7
 8002424:	f7ff fc34 	bl	8001c90 <_malloc_r>
 8002428:	4680      	mov	r8, r0
 800242a:	b908      	cbnz	r0, 8002430 <_realloc_r+0x44>
 800242c:	4645      	mov	r5, r8
 800242e:	e7ec      	b.n	800240a <_realloc_r+0x1e>
 8002430:	42b4      	cmp	r4, r6
 8002432:	4622      	mov	r2, r4
 8002434:	4629      	mov	r1, r5
 8002436:	bf28      	it	cs
 8002438:	4632      	movcs	r2, r6
 800243a:	f7ff ffc9 	bl	80023d0 <memcpy>
 800243e:	4629      	mov	r1, r5
 8002440:	4638      	mov	r0, r7
 8002442:	f7ff fbb9 	bl	8001bb8 <_free_r>
 8002446:	e7f1      	b.n	800242c <_realloc_r+0x40>

08002448 <_malloc_usable_size_r>:
 8002448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800244c:	1f18      	subs	r0, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	bfbc      	itt	lt
 8002452:	580b      	ldrlt	r3, [r1, r0]
 8002454:	18c0      	addlt	r0, r0, r3
 8002456:	4770      	bx	lr

08002458 <__udivmoddi4>:
 8002458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800245c:	9d08      	ldr	r5, [sp, #32]
 800245e:	460f      	mov	r7, r1
 8002460:	4604      	mov	r4, r0
 8002462:	468c      	mov	ip, r1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d148      	bne.n	80024fa <__udivmoddi4+0xa2>
 8002468:	428a      	cmp	r2, r1
 800246a:	4616      	mov	r6, r2
 800246c:	d961      	bls.n	8002532 <__udivmoddi4+0xda>
 800246e:	fab2 f382 	clz	r3, r2
 8002472:	b14b      	cbz	r3, 8002488 <__udivmoddi4+0x30>
 8002474:	f1c3 0220 	rsb	r2, r3, #32
 8002478:	fa01 fc03 	lsl.w	ip, r1, r3
 800247c:	fa20 f202 	lsr.w	r2, r0, r2
 8002480:	409e      	lsls	r6, r3
 8002482:	ea42 0c0c 	orr.w	ip, r2, ip
 8002486:	409c      	lsls	r4, r3
 8002488:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800248c:	b2b7      	uxth	r7, r6
 800248e:	fbbc f1fe 	udiv	r1, ip, lr
 8002492:	0c22      	lsrs	r2, r4, #16
 8002494:	fb0e cc11 	mls	ip, lr, r1, ip
 8002498:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800249c:	fb01 f007 	mul.w	r0, r1, r7
 80024a0:	4290      	cmp	r0, r2
 80024a2:	d909      	bls.n	80024b8 <__udivmoddi4+0x60>
 80024a4:	18b2      	adds	r2, r6, r2
 80024a6:	f101 3cff 	add.w	ip, r1, #4294967295
 80024aa:	f080 80ee 	bcs.w	800268a <__udivmoddi4+0x232>
 80024ae:	4290      	cmp	r0, r2
 80024b0:	f240 80eb 	bls.w	800268a <__udivmoddi4+0x232>
 80024b4:	3902      	subs	r1, #2
 80024b6:	4432      	add	r2, r6
 80024b8:	1a12      	subs	r2, r2, r0
 80024ba:	b2a4      	uxth	r4, r4
 80024bc:	fbb2 f0fe 	udiv	r0, r2, lr
 80024c0:	fb0e 2210 	mls	r2, lr, r0, r2
 80024c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80024c8:	fb00 f707 	mul.w	r7, r0, r7
 80024cc:	42a7      	cmp	r7, r4
 80024ce:	d909      	bls.n	80024e4 <__udivmoddi4+0x8c>
 80024d0:	1934      	adds	r4, r6, r4
 80024d2:	f100 32ff 	add.w	r2, r0, #4294967295
 80024d6:	f080 80da 	bcs.w	800268e <__udivmoddi4+0x236>
 80024da:	42a7      	cmp	r7, r4
 80024dc:	f240 80d7 	bls.w	800268e <__udivmoddi4+0x236>
 80024e0:	4434      	add	r4, r6
 80024e2:	3802      	subs	r0, #2
 80024e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80024e8:	1be4      	subs	r4, r4, r7
 80024ea:	2100      	movs	r1, #0
 80024ec:	b11d      	cbz	r5, 80024f6 <__udivmoddi4+0x9e>
 80024ee:	40dc      	lsrs	r4, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	e9c5 4300 	strd	r4, r3, [r5]
 80024f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024fa:	428b      	cmp	r3, r1
 80024fc:	d906      	bls.n	800250c <__udivmoddi4+0xb4>
 80024fe:	b10d      	cbz	r5, 8002504 <__udivmoddi4+0xac>
 8002500:	e9c5 0100 	strd	r0, r1, [r5]
 8002504:	2100      	movs	r1, #0
 8002506:	4608      	mov	r0, r1
 8002508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800250c:	fab3 f183 	clz	r1, r3
 8002510:	2900      	cmp	r1, #0
 8002512:	d148      	bne.n	80025a6 <__udivmoddi4+0x14e>
 8002514:	42bb      	cmp	r3, r7
 8002516:	d302      	bcc.n	800251e <__udivmoddi4+0xc6>
 8002518:	4282      	cmp	r2, r0
 800251a:	f200 8107 	bhi.w	800272c <__udivmoddi4+0x2d4>
 800251e:	1a84      	subs	r4, r0, r2
 8002520:	eb67 0203 	sbc.w	r2, r7, r3
 8002524:	2001      	movs	r0, #1
 8002526:	4694      	mov	ip, r2
 8002528:	2d00      	cmp	r5, #0
 800252a:	d0e4      	beq.n	80024f6 <__udivmoddi4+0x9e>
 800252c:	e9c5 4c00 	strd	r4, ip, [r5]
 8002530:	e7e1      	b.n	80024f6 <__udivmoddi4+0x9e>
 8002532:	2a00      	cmp	r2, #0
 8002534:	f000 8092 	beq.w	800265c <__udivmoddi4+0x204>
 8002538:	fab2 f382 	clz	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 80a8 	bne.w	8002692 <__udivmoddi4+0x23a>
 8002542:	1a8a      	subs	r2, r1, r2
 8002544:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002548:	fa1f fc86 	uxth.w	ip, r6
 800254c:	2101      	movs	r1, #1
 800254e:	0c20      	lsrs	r0, r4, #16
 8002550:	fbb2 f7fe 	udiv	r7, r2, lr
 8002554:	fb0e 2217 	mls	r2, lr, r7, r2
 8002558:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800255c:	fb0c f007 	mul.w	r0, ip, r7
 8002560:	4290      	cmp	r0, r2
 8002562:	d907      	bls.n	8002574 <__udivmoddi4+0x11c>
 8002564:	18b2      	adds	r2, r6, r2
 8002566:	f107 38ff 	add.w	r8, r7, #4294967295
 800256a:	d202      	bcs.n	8002572 <__udivmoddi4+0x11a>
 800256c:	4290      	cmp	r0, r2
 800256e:	f200 80e2 	bhi.w	8002736 <__udivmoddi4+0x2de>
 8002572:	4647      	mov	r7, r8
 8002574:	1a12      	subs	r2, r2, r0
 8002576:	b2a4      	uxth	r4, r4
 8002578:	fbb2 f0fe 	udiv	r0, r2, lr
 800257c:	fb0e 2210 	mls	r2, lr, r0, r2
 8002580:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002584:	fb0c fc00 	mul.w	ip, ip, r0
 8002588:	45a4      	cmp	ip, r4
 800258a:	d907      	bls.n	800259c <__udivmoddi4+0x144>
 800258c:	1934      	adds	r4, r6, r4
 800258e:	f100 32ff 	add.w	r2, r0, #4294967295
 8002592:	d202      	bcs.n	800259a <__udivmoddi4+0x142>
 8002594:	45a4      	cmp	ip, r4
 8002596:	f200 80cb 	bhi.w	8002730 <__udivmoddi4+0x2d8>
 800259a:	4610      	mov	r0, r2
 800259c:	eba4 040c 	sub.w	r4, r4, ip
 80025a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80025a4:	e7a2      	b.n	80024ec <__udivmoddi4+0x94>
 80025a6:	f1c1 0620 	rsb	r6, r1, #32
 80025aa:	408b      	lsls	r3, r1
 80025ac:	fa22 fc06 	lsr.w	ip, r2, r6
 80025b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80025b4:	fa07 f401 	lsl.w	r4, r7, r1
 80025b8:	fa20 f306 	lsr.w	r3, r0, r6
 80025bc:	40f7      	lsrs	r7, r6
 80025be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80025c2:	4323      	orrs	r3, r4
 80025c4:	fa00 f801 	lsl.w	r8, r0, r1
 80025c8:	fa1f fe8c 	uxth.w	lr, ip
 80025cc:	fbb7 f0f9 	udiv	r0, r7, r9
 80025d0:	0c1c      	lsrs	r4, r3, #16
 80025d2:	fb09 7710 	mls	r7, r9, r0, r7
 80025d6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80025da:	fb00 f70e 	mul.w	r7, r0, lr
 80025de:	42a7      	cmp	r7, r4
 80025e0:	fa02 f201 	lsl.w	r2, r2, r1
 80025e4:	d90a      	bls.n	80025fc <__udivmoddi4+0x1a4>
 80025e6:	eb1c 0404 	adds.w	r4, ip, r4
 80025ea:	f100 3aff 	add.w	sl, r0, #4294967295
 80025ee:	f080 809b 	bcs.w	8002728 <__udivmoddi4+0x2d0>
 80025f2:	42a7      	cmp	r7, r4
 80025f4:	f240 8098 	bls.w	8002728 <__udivmoddi4+0x2d0>
 80025f8:	3802      	subs	r0, #2
 80025fa:	4464      	add	r4, ip
 80025fc:	1be4      	subs	r4, r4, r7
 80025fe:	b29f      	uxth	r7, r3
 8002600:	fbb4 f3f9 	udiv	r3, r4, r9
 8002604:	fb09 4413 	mls	r4, r9, r3, r4
 8002608:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800260c:	fb03 fe0e 	mul.w	lr, r3, lr
 8002610:	45a6      	cmp	lr, r4
 8002612:	d909      	bls.n	8002628 <__udivmoddi4+0x1d0>
 8002614:	eb1c 0404 	adds.w	r4, ip, r4
 8002618:	f103 37ff 	add.w	r7, r3, #4294967295
 800261c:	f080 8082 	bcs.w	8002724 <__udivmoddi4+0x2cc>
 8002620:	45a6      	cmp	lr, r4
 8002622:	d97f      	bls.n	8002724 <__udivmoddi4+0x2cc>
 8002624:	3b02      	subs	r3, #2
 8002626:	4464      	add	r4, ip
 8002628:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800262c:	eba4 040e 	sub.w	r4, r4, lr
 8002630:	fba0 e702 	umull	lr, r7, r0, r2
 8002634:	42bc      	cmp	r4, r7
 8002636:	4673      	mov	r3, lr
 8002638:	46b9      	mov	r9, r7
 800263a:	d363      	bcc.n	8002704 <__udivmoddi4+0x2ac>
 800263c:	d060      	beq.n	8002700 <__udivmoddi4+0x2a8>
 800263e:	b15d      	cbz	r5, 8002658 <__udivmoddi4+0x200>
 8002640:	ebb8 0203 	subs.w	r2, r8, r3
 8002644:	eb64 0409 	sbc.w	r4, r4, r9
 8002648:	fa04 f606 	lsl.w	r6, r4, r6
 800264c:	fa22 f301 	lsr.w	r3, r2, r1
 8002650:	431e      	orrs	r6, r3
 8002652:	40cc      	lsrs	r4, r1
 8002654:	e9c5 6400 	strd	r6, r4, [r5]
 8002658:	2100      	movs	r1, #0
 800265a:	e74c      	b.n	80024f6 <__udivmoddi4+0x9e>
 800265c:	0862      	lsrs	r2, r4, #1
 800265e:	0848      	lsrs	r0, r1, #1
 8002660:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8002664:	0c0b      	lsrs	r3, r1, #16
 8002666:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800266a:	b28a      	uxth	r2, r1
 800266c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002670:	fbb3 f1f6 	udiv	r1, r3, r6
 8002674:	07e4      	lsls	r4, r4, #31
 8002676:	46b4      	mov	ip, r6
 8002678:	4637      	mov	r7, r6
 800267a:	46b6      	mov	lr, r6
 800267c:	231f      	movs	r3, #31
 800267e:	fbb0 f0f6 	udiv	r0, r0, r6
 8002682:	1bd2      	subs	r2, r2, r7
 8002684:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002688:	e761      	b.n	800254e <__udivmoddi4+0xf6>
 800268a:	4661      	mov	r1, ip
 800268c:	e714      	b.n	80024b8 <__udivmoddi4+0x60>
 800268e:	4610      	mov	r0, r2
 8002690:	e728      	b.n	80024e4 <__udivmoddi4+0x8c>
 8002692:	f1c3 0120 	rsb	r1, r3, #32
 8002696:	fa20 f201 	lsr.w	r2, r0, r1
 800269a:	409e      	lsls	r6, r3
 800269c:	fa27 f101 	lsr.w	r1, r7, r1
 80026a0:	409f      	lsls	r7, r3
 80026a2:	433a      	orrs	r2, r7
 80026a4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80026a8:	fa1f fc86 	uxth.w	ip, r6
 80026ac:	fbb1 f7fe 	udiv	r7, r1, lr
 80026b0:	fb0e 1017 	mls	r0, lr, r7, r1
 80026b4:	0c11      	lsrs	r1, r2, #16
 80026b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80026ba:	fb07 f80c 	mul.w	r8, r7, ip
 80026be:	4588      	cmp	r8, r1
 80026c0:	fa04 f403 	lsl.w	r4, r4, r3
 80026c4:	d93a      	bls.n	800273c <__udivmoddi4+0x2e4>
 80026c6:	1871      	adds	r1, r6, r1
 80026c8:	f107 30ff 	add.w	r0, r7, #4294967295
 80026cc:	d201      	bcs.n	80026d2 <__udivmoddi4+0x27a>
 80026ce:	4588      	cmp	r8, r1
 80026d0:	d81f      	bhi.n	8002712 <__udivmoddi4+0x2ba>
 80026d2:	eba1 0108 	sub.w	r1, r1, r8
 80026d6:	fbb1 f8fe 	udiv	r8, r1, lr
 80026da:	fb08 f70c 	mul.w	r7, r8, ip
 80026de:	fb0e 1118 	mls	r1, lr, r8, r1
 80026e2:	b292      	uxth	r2, r2
 80026e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026e8:	42ba      	cmp	r2, r7
 80026ea:	d22f      	bcs.n	800274c <__udivmoddi4+0x2f4>
 80026ec:	18b2      	adds	r2, r6, r2
 80026ee:	f108 31ff 	add.w	r1, r8, #4294967295
 80026f2:	d2c6      	bcs.n	8002682 <__udivmoddi4+0x22a>
 80026f4:	42ba      	cmp	r2, r7
 80026f6:	d2c4      	bcs.n	8002682 <__udivmoddi4+0x22a>
 80026f8:	f1a8 0102 	sub.w	r1, r8, #2
 80026fc:	4432      	add	r2, r6
 80026fe:	e7c0      	b.n	8002682 <__udivmoddi4+0x22a>
 8002700:	45f0      	cmp	r8, lr
 8002702:	d29c      	bcs.n	800263e <__udivmoddi4+0x1e6>
 8002704:	ebbe 0302 	subs.w	r3, lr, r2
 8002708:	eb67 070c 	sbc.w	r7, r7, ip
 800270c:	3801      	subs	r0, #1
 800270e:	46b9      	mov	r9, r7
 8002710:	e795      	b.n	800263e <__udivmoddi4+0x1e6>
 8002712:	eba6 0808 	sub.w	r8, r6, r8
 8002716:	4441      	add	r1, r8
 8002718:	1eb8      	subs	r0, r7, #2
 800271a:	fbb1 f8fe 	udiv	r8, r1, lr
 800271e:	fb08 f70c 	mul.w	r7, r8, ip
 8002722:	e7dc      	b.n	80026de <__udivmoddi4+0x286>
 8002724:	463b      	mov	r3, r7
 8002726:	e77f      	b.n	8002628 <__udivmoddi4+0x1d0>
 8002728:	4650      	mov	r0, sl
 800272a:	e767      	b.n	80025fc <__udivmoddi4+0x1a4>
 800272c:	4608      	mov	r0, r1
 800272e:	e6fb      	b.n	8002528 <__udivmoddi4+0xd0>
 8002730:	4434      	add	r4, r6
 8002732:	3802      	subs	r0, #2
 8002734:	e732      	b.n	800259c <__udivmoddi4+0x144>
 8002736:	3f02      	subs	r7, #2
 8002738:	4432      	add	r2, r6
 800273a:	e71b      	b.n	8002574 <__udivmoddi4+0x11c>
 800273c:	eba1 0108 	sub.w	r1, r1, r8
 8002740:	4638      	mov	r0, r7
 8002742:	fbb1 f8fe 	udiv	r8, r1, lr
 8002746:	fb08 f70c 	mul.w	r7, r8, ip
 800274a:	e7c8      	b.n	80026de <__udivmoddi4+0x286>
 800274c:	4641      	mov	r1, r8
 800274e:	e798      	b.n	8002682 <__udivmoddi4+0x22a>

08002750 <_init>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	bf00      	nop
 8002754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002756:	bc08      	pop	{r3}
 8002758:	469e      	mov	lr, r3
 800275a:	4770      	bx	lr

0800275c <_fini>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	bf00      	nop
 8002760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002762:	bc08      	pop	{r3}
 8002764:	469e      	mov	lr, r3
 8002766:	4770      	bx	lr
