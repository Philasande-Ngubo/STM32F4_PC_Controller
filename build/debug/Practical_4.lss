
build/debug/Practical_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080015b8  080015b8  000025b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c8  080015c8  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015c8  080015c8  000025c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015d0  080015d0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015d0  080015d0  000025d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015d4  080015d4  000025d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080015d8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080015e4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080015e4  0000308c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007321  00000000  00000000  00003075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019f2  00000000  00000000  0000a396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00002c88  00000000  00000000  0000bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005b0  00000000  00000000  0000ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000490  00000000  00000000  0000efc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000061a5  00000000  00000000  0000f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002b01  00000000  00000000  000155f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c40  00000000  00000000  000180f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000178  00000000  00000000  00018d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b80c 	b.w	80001f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f001 f860 	bl	80012a8 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_idiv0>:
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080015a0 	.word	0x080015a0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080015a0 	.word	0x080015a0

08000238 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 8000238:	b082      	sub	sp, #8
	  volatile unsigned int counter;
	  microseconds *= 3;
 800023a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	  for(counter = 0; counter<microseconds; counter++)
 800023e:	2300      	movs	r3, #0
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	e004      	b.n	800024e <delay+0x16>
	  {
	    __asm("nop");
 8000244:	bf00      	nop
	    __asm("nop");
 8000246:	bf00      	nop
	  for(counter = 0; counter<microseconds; counter++)
 8000248:	9b01      	ldr	r3, [sp, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	9301      	str	r3, [sp, #4]
 800024e:	9b01      	ldr	r3, [sp, #4]
 8000250:	4283      	cmp	r3, r0
 8000252:	d3f7      	bcc.n	8000244 <delay+0xc>
	  }
}
 8000254:	b002      	add	sp, #8
 8000256:	4770      	bx	lr

08000258 <pulse_strobe>:
{
 8000258:	b510      	push	{r4, lr}
    delay(20);				// Delay
 800025a:	2014      	movs	r0, #20
 800025c:	f7ff ffec 	bl	8000238 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 8000260:	4c09      	ldr	r4, [pc, #36]	@ (8000288 <pulse_strobe+0x30>)
 8000262:	69a3      	ldr	r3, [r4, #24]
 8000264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000268:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 800026a:	2014      	movs	r0, #20
 800026c:	f7ff ffe4 	bl	8000238 <delay>
    GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 8000270:	69a3      	ldr	r3, [r4, #24]
 8000272:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000276:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 8000278:	2014      	movs	r0, #20
 800027a:	f7ff ffdd 	bl	8000238 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 800027e:	69a3      	ldr	r3, [r4, #24]
 8000280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000284:	61a3      	str	r3, [r4, #24]
}
 8000286:	bd10      	pop	{r4, pc}
 8000288:	40020800 	.word	0x40020800

0800028c <lcd_command>:
{
 800028c:	b510      	push	{r4, lr}
 800028e:	4604      	mov	r4, r0
    GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as commands);
 8000290:	4a3f      	ldr	r2, [pc, #252]	@ (8000390 <lcd_command+0x104>)
 8000292:	6993      	ldr	r3, [r2, #24]
 8000294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000298:	6193      	str	r3, [r2, #24]
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 800029a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800029e:	d145      	bne.n	800032c <lcd_command+0xa0>
    	GPIOA->BSRR |= LCD_D7_RESET;
 80002a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000394 <lcd_command+0x108>)
 80002a2:	6993      	ldr	r3, [r2, #24]
 80002a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80002a8:	6193      	str	r3, [r2, #24]
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 80002aa:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80002ae:	d044      	beq.n	800033a <lcd_command+0xae>
        GPIOA->BSRR |= LCD_D6_SET;
 80002b0:	4a38      	ldr	r2, [pc, #224]	@ (8000394 <lcd_command+0x108>)
 80002b2:	6993      	ldr	r3, [r2, #24]
 80002b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002b8:	6193      	str	r3, [r2, #24]
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 80002ba:	f014 0f20 	tst.w	r4, #32
 80002be:	d042      	beq.n	8000346 <lcd_command+0xba>
    	GPIOB->BSRR |= LCD_D5_SET;	
 80002c0:	4a35      	ldr	r2, [pc, #212]	@ (8000398 <lcd_command+0x10c>)
 80002c2:	6993      	ldr	r3, [r2, #24]
 80002c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002c8:	6193      	str	r3, [r2, #24]
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 80002ca:	f014 0f10 	tst.w	r4, #16
 80002ce:	d040      	beq.n	8000352 <lcd_command+0xc6>
    	GPIOB->BSRR |= LCD_D4_SET;
 80002d0:	4a31      	ldr	r2, [pc, #196]	@ (8000398 <lcd_command+0x10c>)
 80002d2:	6993      	ldr	r3, [r2, #24]
 80002d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002d8:	6193      	str	r3, [r2, #24]
    pulse_strobe ();			// Send data
 80002da:	f7ff ffbd 	bl	8000258 <pulse_strobe>
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80002de:	f014 0f08 	tst.w	r4, #8
 80002e2:	d03c      	beq.n	800035e <lcd_command+0xd2>
    	GPIOA->BSRR |= LCD_D7_SET;
 80002e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000394 <lcd_command+0x108>)
 80002e6:	6993      	ldr	r3, [r2, #24]
 80002e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002ec:	6193      	str	r3, [r2, #24]
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 80002ee:	f014 0f04 	tst.w	r4, #4
 80002f2:	d03a      	beq.n	800036a <lcd_command+0xde>
        GPIOA->BSRR |= LCD_D6_SET;
 80002f4:	4a27      	ldr	r2, [pc, #156]	@ (8000394 <lcd_command+0x108>)
 80002f6:	6993      	ldr	r3, [r2, #24]
 80002f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002fc:	6193      	str	r3, [r2, #24]
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 80002fe:	f014 0f02 	tst.w	r4, #2
 8000302:	d038      	beq.n	8000376 <lcd_command+0xea>
    	GPIOB->BSRR |= LCD_D5_SET;         
 8000304:	4a24      	ldr	r2, [pc, #144]	@ (8000398 <lcd_command+0x10c>)
 8000306:	6993      	ldr	r3, [r2, #24]
 8000308:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800030c:	6193      	str	r3, [r2, #24]
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 800030e:	f014 0f01 	tst.w	r4, #1
 8000312:	d036      	beq.n	8000382 <lcd_command+0xf6>
    	GPIOB->BSRR |= LCD_D4_SET;
 8000314:	4a20      	ldr	r2, [pc, #128]	@ (8000398 <lcd_command+0x10c>)
 8000316:	6993      	ldr	r3, [r2, #24]
 8000318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800031c:	6193      	str	r3, [r2, #24]
    pulse_strobe();			// Send data
 800031e:	f7ff ff9b 	bl	8000258 <pulse_strobe>
    delay(3000);
 8000322:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000326:	f7ff ff87 	bl	8000238 <delay>
}
 800032a:	bd10      	pop	{r4, pc}
    	GPIOA->BSRR |= LCD_D7_SET;
 800032c:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8000330:	6993      	ldr	r3, [r2, #24]
 8000332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	e7b7      	b.n	80002aa <lcd_command+0x1e>
        GPIOA->BSRR |= LCD_D6_RESET;
 800033a:	4a16      	ldr	r2, [pc, #88]	@ (8000394 <lcd_command+0x108>)
 800033c:	6993      	ldr	r3, [r2, #24]
 800033e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	e7b9      	b.n	80002ba <lcd_command+0x2e>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000346:	4a14      	ldr	r2, [pc, #80]	@ (8000398 <lcd_command+0x10c>)
 8000348:	6993      	ldr	r3, [r2, #24]
 800034a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	e7bb      	b.n	80002ca <lcd_command+0x3e>
    	GPIOB->BSRR |= LCD_D4_RESET;
 8000352:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <lcd_command+0x10c>)
 8000354:	6993      	ldr	r3, [r2, #24]
 8000356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	e7bd      	b.n	80002da <lcd_command+0x4e>
    	GPIOA->BSRR |= LCD_D7_RESET;
 800035e:	4a0d      	ldr	r2, [pc, #52]	@ (8000394 <lcd_command+0x108>)
 8000360:	6993      	ldr	r3, [r2, #24]
 8000362:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	e7c1      	b.n	80002ee <lcd_command+0x62>
        GPIOA->BSRR |= LCD_D6_RESET;
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <lcd_command+0x108>)
 800036c:	6993      	ldr	r3, [r2, #24]
 800036e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	e7c3      	b.n	80002fe <lcd_command+0x72>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000376:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <lcd_command+0x10c>)
 8000378:	6993      	ldr	r3, [r2, #24]
 800037a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	e7c5      	b.n	800030e <lcd_command+0x82>
    	GPIOB->BSRR |= LCD_D4_RESET;
 8000382:	4a05      	ldr	r2, [pc, #20]	@ (8000398 <lcd_command+0x10c>)
 8000384:	6993      	ldr	r3, [r2, #24]
 8000386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	e7c7      	b.n	800031e <lcd_command+0x92>
 800038e:	bf00      	nop
 8000390:	40020800 	.word	0x40020800
 8000394:	40020000 	.word	0x40020000
 8000398:	40020400 	.word	0x40020400

0800039c <init_LCD>:
{
 800039c:	b508      	push	{r3, lr}
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800039e:	4b19      	ldr	r3, [pc, #100]	@ (8000404 <init_LCD+0x68>)
 80003a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003a2:	f042 0201 	orr.w	r2, r2, #1
 80003a6:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003aa:	f042 0202 	orr.w	r2, r2, #2
 80003ae:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80003b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003b2:	f042 0204 	orr.w	r2, r2, #4
 80003b6:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 80003b8:	4a13      	ldr	r2, [pc, #76]	@ (8000408 <init_LCD+0x6c>)
 80003ba:	6813      	ldr	r3, [r2, #0]
 80003bc:	f043 4382 	orr.w	r3, r3, #1090519040	@ 0x41000000
 80003c0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 80003c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80003c6:	6813      	ldr	r3, [r2, #0]
 80003c8:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80003cc:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 80003ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80003d2:	6813      	ldr	r3, [r2, #0]
 80003d4:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 80003d8:	6013      	str	r3, [r2, #0]
    delay(30000);			// Allow the LCD some power up time (~30ms)
 80003da:	f247 5030 	movw	r0, #30000	@ 0x7530
 80003de:	f7ff ff2b 	bl	8000238 <delay>
    lcd_command(POWER_UP);		// Power up initialization for the lcd
 80003e2:	2033      	movs	r0, #51	@ 0x33
 80003e4:	f7ff ff52 	bl	800028c <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 80003e8:	2032      	movs	r0, #50	@ 0x32
 80003ea:	f7ff ff4f 	bl	800028c <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 80003ee:	200c      	movs	r0, #12
 80003f0:	f7ff ff4c 	bl	800028c <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 80003f4:	2028      	movs	r0, #40	@ 0x28
 80003f6:	f7ff ff49 	bl	800028c <lcd_command>
    lcd_command(CLEAR);			// Clear display
 80003fa:	2001      	movs	r0, #1
 80003fc:	f7ff ff46 	bl	800028c <lcd_command>
}
 8000400:	bd08      	pop	{r3, pc}
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000410:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	ad03      	add	r5, sp, #12
 8000414:	2400      	movs	r4, #0
 8000416:	9403      	str	r4, [sp, #12]
 8000418:	9404      	str	r4, [sp, #16]
 800041a:	9405      	str	r4, [sp, #20]
 800041c:	9406      	str	r4, [sp, #24]
 800041e:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000420:	9400      	str	r4, [sp, #0]
 8000422:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_GPIO_Init+0xb4>)
 8000424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000426:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800042a:	631a      	str	r2, [r3, #48]	@ 0x30
 800042c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800042e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	9401      	str	r4, [sp, #4]
 8000438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800043a:	f042 0201 	orr.w	r2, r2, #1
 800043e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000442:	f002 0201 	and.w	r2, r2, #1
 8000446:	9201      	str	r2, [sp, #4]
 8000448:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	9402      	str	r4, [sp, #8]
 800044c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800044e:	f042 0202 	orr.w	r2, r2, #2
 8000452:	631a      	str	r2, [r3, #48]	@ 0x30
 8000454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	9302      	str	r3, [sp, #8]
 800045c:	9b02      	ldr	r3, [sp, #8]

  // -------------------------------
  // LCD pins configuration
  // -------------------------------
  // Configure PC14 (RS) and PC15 (E) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 800045e:	f44f 4b40 	mov.w	fp, #49152	@ 0xc000
 8000462:	f8cd b00c 	str.w	fp, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80004c8 <MX_GPIO_Init+0xbc>
 800046e:	4629      	mov	r1, r5
 8000470:	4650      	mov	r0, sl
 8000472:	f000 fa2d 	bl	80008d0 <HAL_GPIO_Init>

  // Configure PB8 (D4) and PB9 (D5) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000476:	f44f 7940 	mov.w	r9, #768	@ 0x300
 800047a:	f8cd 900c 	str.w	r9, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047e:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 80004cc <MX_GPIO_Init+0xc0>
 8000482:	4629      	mov	r1, r5
 8000484:	4640      	mov	r0, r8
 8000486:	f000 fa23 	bl	80008d0 <HAL_GPIO_Init>

  // Configure PA12 (D6) and PA15 (D7) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_15;
 800048a:	f44f 4710 	mov.w	r7, #36864	@ 0x9000
 800048e:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	4e0c      	ldr	r6, [pc, #48]	@ (80004c4 <MX_GPIO_Init+0xb8>)
 8000492:	4629      	mov	r1, r5
 8000494:	4630      	mov	r0, r6
 8000496:	f000 fa1b 	bl	80008d0 <HAL_GPIO_Init>

  // Set all LCD pins LOW initially
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800049a:	4622      	mov	r2, r4
 800049c:	4659      	mov	r1, fp
 800049e:	4650      	mov	r0, sl
 80004a0:	f000 fb06 	bl	8000ab0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80004a4:	4622      	mov	r2, r4
 80004a6:	4649      	mov	r1, r9
 80004a8:	4640      	mov	r0, r8
 80004aa:	f000 fb01 	bl	8000ab0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12 | GPIO_PIN_15, GPIO_PIN_RESET);
 80004ae:	4622      	mov	r2, r4
 80004b0:	4639      	mov	r1, r7
 80004b2:	4630      	mov	r0, r6
 80004b4:	f000 fafc 	bl	8000ab0 <HAL_GPIO_WritePin>
}
 80004b8:	b009      	add	sp, #36	@ 0x24
 80004ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020000 	.word	0x40020000
 80004c8:	40020800 	.word	0x40020800
 80004cc:	40020400 	.word	0x40020400

080004d0 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <Error_Handler+0x2>

080004d4 <SystemClock_Config>:
{
 80004d4:	b510      	push	{r4, lr}
 80004d6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d8:	ac07      	add	r4, sp, #28
 80004da:	2234      	movs	r2, #52	@ 0x34
 80004dc:	2100      	movs	r1, #0
 80004de:	4620      	mov	r0, r4
 80004e0:	f000 feb5 	bl	800124e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	2300      	movs	r3, #0
 80004e6:	9302      	str	r3, [sp, #8]
 80004e8:	9303      	str	r3, [sp, #12]
 80004ea:	9304      	str	r3, [sp, #16]
 80004ec:	9305      	str	r3, [sp, #20]
 80004ee:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	4a19      	ldr	r2, [pc, #100]	@ (8000558 <SystemClock_Config+0x84>)
 80004f4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80004f6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80004fa:	6411      	str	r1, [r2, #64]	@ 0x40
 80004fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80004fe:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	4914      	ldr	r1, [pc, #80]	@ (800055c <SystemClock_Config+0x88>)
 800050a:	680a      	ldr	r2, [r1, #0]
 800050c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000510:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000514:	600a      	str	r2, [r1, #0]
 8000516:	680a      	ldr	r2, [r1, #0]
 8000518:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800051c:	9201      	str	r2, [sp, #4]
 800051e:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000520:	2202      	movs	r2, #2
 8000522:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	2201      	movs	r2, #1
 8000526:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	2210      	movs	r2, #16
 800052a:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052c:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	4620      	mov	r0, r4
 8000530:	f000 fc24 	bl	8000d7c <HAL_RCC_OscConfig>
 8000534:	b960      	cbnz	r0, 8000550 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053a:	2100      	movs	r1, #0
 800053c:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000540:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	9106      	str	r1, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000544:	a802      	add	r0, sp, #8
 8000546:	f000 fad5 	bl	8000af4 <HAL_RCC_ClockConfig>
 800054a:	b918      	cbnz	r0, 8000554 <SystemClock_Config+0x80>
}
 800054c:	b014      	add	sp, #80	@ 0x50
 800054e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000550:	f7ff ffbe 	bl	80004d0 <Error_Handler>
    Error_Handler();
 8000554:	f7ff ffbc 	bl	80004d0 <Error_Handler>
 8000558:	40023800 	.word	0x40023800
 800055c:	40007000 	.word	0x40007000

08000560 <main>:
{
 8000560:	b508      	push	{r3, lr}
  HAL_Init();
 8000562:	f000 f831 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 8000566:	f7ff ffb5 	bl	80004d4 <SystemClock_Config>
  MX_GPIO_Init();
 800056a:	f7ff ff4f 	bl	800040c <MX_GPIO_Init>
  init_LCD();
 800056e:	f7ff ff15 	bl	800039c <init_LCD>
  lcd_command(CLEAR);
 8000572:	2001      	movs	r0, #1
 8000574:	f7ff fe8a 	bl	800028c <lcd_command>
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x18>
	...

0800057c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800057c:	b510      	push	{r4, lr}
 800057e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000580:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <HAL_InitTick+0x40>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000588:	fbb3 f3f2 	udiv	r3, r3, r2
 800058c:	4a0c      	ldr	r2, [pc, #48]	@ (80005c0 <HAL_InitTick+0x44>)
 800058e:	6810      	ldr	r0, [r2, #0]
 8000590:	fbb0 f0f3 	udiv	r0, r0, r3
 8000594:	f000 f89a 	bl	80006cc <HAL_SYSTICK_Config>
 8000598:	b968      	cbnz	r0, 80005b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	2c0f      	cmp	r4, #15
 800059c:	d901      	bls.n	80005a2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800059e:	2001      	movs	r0, #1
 80005a0:	e00a      	b.n	80005b8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a2:	2200      	movs	r2, #0
 80005a4:	4621      	mov	r1, r4
 80005a6:	f04f 30ff 	mov.w	r0, #4294967295
 80005aa:	f000 f87f 	bl	80006ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ae:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <HAL_InitTick+0x48>)
 80005b0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2000      	movs	r0, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80005b6:	2001      	movs	r0, #1
}
 80005b8:	bd10      	pop	{r4, pc}
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000008 	.word	0x20000008
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f84f 	bl	8000688 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f7ff ffc6 	bl	800057c <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f000 fa64 	bl	8000abc <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	@ (800060c <HAL_IncTick+0x10>)
 80005fe:	6811      	ldr	r1, [r2, #0]
 8000600:	4b03      	ldr	r3, [pc, #12]	@ (8000610 <HAL_IncTick+0x14>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000088 	.word	0x20000088
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	@ (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000088 	.word	0x20000088

08000620 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000620:	2800      	cmp	r0, #0
 8000622:	db08      	blt.n	8000636 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	0109      	lsls	r1, r1, #4
 8000626:	b2c9      	uxtb	r1, r1
 8000628:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800062c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000630:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000634:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	f000 000f 	and.w	r0, r0, #15
 800063a:	0109      	lsls	r1, r1, #4
 800063c:	b2c9      	uxtb	r1, r1
 800063e:	4b01      	ldr	r3, [pc, #4]	@ (8000644 <__NVIC_SetPriority+0x24>)
 8000640:	5419      	strb	r1, [r3, r0]
  }
}
 8000642:	4770      	bx	lr
 8000644:	e000ed14 	.word	0xe000ed14

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800064a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064e:	f1c0 0c07 	rsb	ip, r0, #7
 8000652:	f1bc 0f04 	cmp.w	ip, #4
 8000656:	bf28      	it	cs
 8000658:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065c:	1d03      	adds	r3, r0, #4
 800065e:	2b06      	cmp	r3, #6
 8000660:	d90f      	bls.n	8000682 <NVIC_EncodePriority+0x3a>
 8000662:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	f04f 3eff 	mov.w	lr, #4294967295
 8000668:	fa0e f00c 	lsl.w	r0, lr, ip
 800066c:	ea21 0100 	bic.w	r1, r1, r0
 8000670:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000672:	fa0e fe03 	lsl.w	lr, lr, r3
 8000676:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800067a:	ea41 0002 	orr.w	r0, r1, r2
 800067e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	2300      	movs	r3, #0
 8000684:	e7ee      	b.n	8000664 <NVIC_EncodePriority+0x1c>
	...

08000688 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800068a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000690:	041b      	lsls	r3, r3, #16
 8000692:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	0200      	lsls	r0, r0, #8
 8000696:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80006a4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ac:	b510      	push	{r4, lr}
 80006ae:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <HAL_NVIC_SetPriority+0x1c>)
 80006b2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006b4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80006b8:	f7ff ffc6 	bl	8000648 <NVIC_EncodePriority>
 80006bc:	4601      	mov	r1, r0
 80006be:	4620      	mov	r0, r4
 80006c0:	f7ff ffae 	bl	8000620 <__NVIC_SetPriority>
}
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	3801      	subs	r0, #1
 80006ce:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006d2:	d20b      	bcs.n	80006ec <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80006d8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	4a05      	ldr	r2, [pc, #20]	@ (80006f0 <HAL_SYSTICK_Config+0x24>)
 80006dc:	21f0      	movs	r1, #240	@ 0xf0
 80006de:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e2:	2000      	movs	r0, #0
 80006e4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	2207      	movs	r2, #7
 80006e8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ea:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80006fa:	2300      	movs	r3, #0
 80006fc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80006fe:	4b72      	ldr	r3, [pc, #456]	@ (80008c8 <HAL_DMA_IRQHandler+0x1d4>)
 8000700:	681d      	ldr	r5, [r3, #0]
 8000702:	4b72      	ldr	r3, [pc, #456]	@ (80008cc <HAL_DMA_IRQHandler+0x1d8>)
 8000704:	fba3 3505 	umull	r3, r5, r3, r5
 8000708:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800070a:	6d87      	ldr	r7, [r0, #88]	@ 0x58

  tmpisr = regs->ISR;
 800070c:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800070e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000710:	2308      	movs	r3, #8
 8000712:	4093      	lsls	r3, r2
 8000714:	4233      	tst	r3, r6
 8000716:	d010      	beq.n	800073a <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000718:	6803      	ldr	r3, [r0, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	f012 0f04 	tst.w	r2, #4
 8000720:	d00b      	beq.n	800073a <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	f022 0204 	bic.w	r2, r2, #4
 8000728:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800072a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800072c:	2308      	movs	r3, #8
 800072e:	4093      	lsls	r3, r2
 8000730:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000732:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6543      	str	r3, [r0, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800073a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800073c:	2301      	movs	r3, #1
 800073e:	4093      	lsls	r3, r2
 8000740:	4233      	tst	r3, r6
 8000742:	d009      	beq.n	8000758 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000744:	6822      	ldr	r2, [r4, #0]
 8000746:	6952      	ldr	r2, [r2, #20]
 8000748:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800074c:	d004      	beq.n	8000758 <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800074e:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000750:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000752:	f043 0302 	orr.w	r3, r3, #2
 8000756:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000758:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800075a:	2304      	movs	r3, #4
 800075c:	4093      	lsls	r3, r2
 800075e:	4233      	tst	r3, r6
 8000760:	d009      	beq.n	8000776 <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000762:	6822      	ldr	r2, [r4, #0]
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	f012 0f02 	tst.w	r2, #2
 800076a:	d004      	beq.n	8000776 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800076c:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800076e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000776:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000778:	2310      	movs	r3, #16
 800077a:	4093      	lsls	r3, r2
 800077c:	4233      	tst	r3, r6
 800077e:	d024      	beq.n	80007ca <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000780:	6822      	ldr	r2, [r4, #0]
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	f012 0f08 	tst.w	r2, #8
 8000788:	d01f      	beq.n	80007ca <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800078a:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000794:	d00d      	beq.n	80007b2 <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800079c:	d104      	bne.n	80007a8 <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800079e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80007a0:	b19b      	cbz	r3, 80007ca <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80007a2:	4620      	mov	r0, r4
 80007a4:	4798      	blx	r3
 80007a6:	e010      	b.n	80007ca <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80007a8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80007aa:	b173      	cbz	r3, 80007ca <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80007ac:	4620      	mov	r0, r4
 80007ae:	4798      	blx	r3
 80007b0:	e00b      	b.n	80007ca <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80007b8:	d103      	bne.n	80007c2 <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	f022 0208 	bic.w	r2, r2, #8
 80007c0:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80007c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80007c4:	b10b      	cbz	r3, 80007ca <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80007c6:	4620      	mov	r0, r4
 80007c8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80007ca:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80007cc:	2320      	movs	r3, #32
 80007ce:	4093      	lsls	r3, r2
 80007d0:	4233      	tst	r3, r6
 80007d2:	d054      	beq.n	800087e <HAL_DMA_IRQHandler+0x18a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80007d4:	6822      	ldr	r2, [r4, #0]
 80007d6:	6812      	ldr	r2, [r2, #0]
 80007d8:	f012 0f10 	tst.w	r2, #16
 80007dc:	d04f      	beq.n	800087e <HAL_DMA_IRQHandler+0x18a>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80007de:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80007e0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80007e4:	2b05      	cmp	r3, #5
 80007e6:	d00e      	beq.n	8000806 <HAL_DMA_IRQHandler+0x112>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80007f0:	d033      	beq.n	800085a <HAL_DMA_IRQHandler+0x166>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80007f8:	d12a      	bne.n	8000850 <HAL_DMA_IRQHandler+0x15c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80007fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d03e      	beq.n	800087e <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000800:	4620      	mov	r0, r4
 8000802:	4798      	blx	r3
 8000804:	e03b      	b.n	800087e <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000806:	6822      	ldr	r2, [r4, #0]
 8000808:	6813      	ldr	r3, [r2, #0]
 800080a:	f023 0316 	bic.w	r3, r3, #22
 800080e:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000810:	6822      	ldr	r2, [r4, #0]
 8000812:	6953      	ldr	r3, [r2, #20]
 8000814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000818:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800081a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800081c:	b1a3      	cbz	r3, 8000848 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800081e:	6822      	ldr	r2, [r4, #0]
 8000820:	6813      	ldr	r3, [r2, #0]
 8000822:	f023 0308 	bic.w	r3, r3, #8
 8000826:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000828:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800082a:	233f      	movs	r3, #63	@ 0x3f
 800082c:	4093      	lsls	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000830:	2301      	movs	r3, #1
 8000832:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000836:	2300      	movs	r3, #0
 8000838:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800083c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800083e:	2b00      	cmp	r3, #0
 8000840:	d03f      	beq.n	80008c2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8000842:	4620      	mov	r0, r4
 8000844:	4798      	blx	r3
        return;
 8000846:	e03c      	b.n	80008c2 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000848:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1e7      	bne.n	800081e <HAL_DMA_IRQHandler+0x12a>
 800084e:	e7eb      	b.n	8000828 <HAL_DMA_IRQHandler+0x134>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000850:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000852:	b1a3      	cbz	r3, 800087e <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000854:	4620      	mov	r0, r4
 8000856:	4798      	blx	r3
 8000858:	e011      	b.n	800087e <HAL_DMA_IRQHandler+0x18a>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000860:	d109      	bne.n	8000876 <HAL_DMA_IRQHandler+0x182>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	f022 0210 	bic.w	r2, r2, #16
 8000868:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800086a:	2301      	movs	r3, #1
 800086c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000870:	2300      	movs	r3, #0
 8000872:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000876:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000878:	b10b      	cbz	r3, 800087e <HAL_DMA_IRQHandler+0x18a>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800087a:	4620      	mov	r0, r4
 800087c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800087e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000880:	b1fb      	cbz	r3, 80008c2 <HAL_DMA_IRQHandler+0x1ce>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000882:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000884:	f013 0f01 	tst.w	r3, #1
 8000888:	d017      	beq.n	80008ba <HAL_DMA_IRQHandler+0x1c6>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800088a:	2305      	movs	r3, #5
 800088c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000890:	6822      	ldr	r2, [r4, #0]
 8000892:	6813      	ldr	r3, [r2, #0]
 8000894:	f023 0301 	bic.w	r3, r3, #1
 8000898:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 800089a:	9b01      	ldr	r3, [sp, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	42ab      	cmp	r3, r5
 80008a2:	d804      	bhi.n	80008ae <HAL_DMA_IRQHandler+0x1ba>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f013 0f01 	tst.w	r3, #1
 80008ac:	d1f5      	bne.n	800089a <HAL_DMA_IRQHandler+0x1a6>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80008b4:	2300      	movs	r3, #0
 80008b6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80008ba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80008bc:	b10b      	cbz	r3, 80008c2 <HAL_DMA_IRQHandler+0x1ce>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80008be:	4620      	mov	r0, r4
 80008c0:	4798      	blx	r3
    }
  }
}
 80008c2:	b003      	add	sp, #12
 80008c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008
 80008cc:	1b4e81b5 	.word	0x1b4e81b5

080008d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	f200 80e3 	bhi.w	8000a9e <HAL_GPIO_Init+0x1ce>
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	e065      	b.n	80009aa <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008de:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008e0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80008e4:	2403      	movs	r4, #3
 80008e6:	fa04 f40e 	lsl.w	r4, r4, lr
 80008ea:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ee:	68cc      	ldr	r4, [r1, #12]
 80008f0:	fa04 f40e 	lsl.w	r4, r4, lr
 80008f4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80008f6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008fa:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008fe:	684a      	ldr	r2, [r1, #4]
 8000900:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000904:	409a      	lsls	r2, r3
 8000906:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000908:	6042      	str	r2, [r0, #4]
 800090a:	e05c      	b.n	80009c6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800090c:	08dc      	lsrs	r4, r3, #3
 800090e:	3408      	adds	r4, #8
 8000910:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000914:	f003 0507 	and.w	r5, r3, #7
 8000918:	00ad      	lsls	r5, r5, #2
 800091a:	f04f 0e0f 	mov.w	lr, #15
 800091e:	fa0e fe05 	lsl.w	lr, lr, r5
 8000922:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000926:	690a      	ldr	r2, [r1, #16]
 8000928:	40aa      	lsls	r2, r5
 800092a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800092e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000932:	e05c      	b.n	80009ee <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000934:	2206      	movs	r2, #6
 8000936:	e000      	b.n	800093a <HAL_GPIO_Init+0x6a>
 8000938:	2200      	movs	r2, #0
 800093a:	fa02 f20e 	lsl.w	r2, r2, lr
 800093e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000940:	3402      	adds	r4, #2
 8000942:	4d57      	ldr	r5, [pc, #348]	@ (8000aa0 <HAL_GPIO_Init+0x1d0>)
 8000944:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000948:	4a56      	ldr	r2, [pc, #344]	@ (8000aa4 <HAL_GPIO_Init+0x1d4>)
 800094a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800094c:	ea6f 020c 	mvn.w	r2, ip
 8000950:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000954:	684e      	ldr	r6, [r1, #4]
 8000956:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800095a:	d001      	beq.n	8000960 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800095c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000960:	4c50      	ldr	r4, [pc, #320]	@ (8000aa4 <HAL_GPIO_Init+0x1d4>)
 8000962:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000964:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000966:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800096a:	684e      	ldr	r6, [r1, #4]
 800096c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000970:	d001      	beq.n	8000976 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000972:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000976:	4c4b      	ldr	r4, [pc, #300]	@ (8000aa4 <HAL_GPIO_Init+0x1d4>)
 8000978:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800097a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800097c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000980:	684e      	ldr	r6, [r1, #4]
 8000982:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000986:	d001      	beq.n	800098c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000988:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800098c:	4c45      	ldr	r4, [pc, #276]	@ (8000aa4 <HAL_GPIO_Init+0x1d4>)
 800098e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000990:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000992:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000994:	684d      	ldr	r5, [r1, #4]
 8000996:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800099a:	d001      	beq.n	80009a0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800099c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80009a0:	4c40      	ldr	r4, [pc, #256]	@ (8000aa4 <HAL_GPIO_Init+0x1d4>)
 80009a2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009a4:	3301      	adds	r3, #1
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	d877      	bhi.n	8000a9a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 80009aa:	2201      	movs	r2, #1
 80009ac:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ae:	680c      	ldr	r4, [r1, #0]
 80009b0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80009b4:	ea32 0404 	bics.w	r4, r2, r4
 80009b8:	d1f4      	bne.n	80009a4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009ba:	684c      	ldr	r4, [r1, #4]
 80009bc:	f004 0403 	and.w	r4, r4, #3
 80009c0:	3c01      	subs	r4, #1
 80009c2:	2c01      	cmp	r4, #1
 80009c4:	d98b      	bls.n	80008de <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009c6:	684a      	ldr	r2, [r1, #4]
 80009c8:	f002 0203 	and.w	r2, r2, #3
 80009cc:	2a03      	cmp	r2, #3
 80009ce:	d009      	beq.n	80009e4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80009d0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009d2:	005d      	lsls	r5, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	40aa      	lsls	r2, r5
 80009d8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009dc:	688a      	ldr	r2, [r1, #8]
 80009de:	40aa      	lsls	r2, r5
 80009e0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80009e2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e4:	684a      	ldr	r2, [r1, #4]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	2a02      	cmp	r2, #2
 80009ec:	d08e      	beq.n	800090c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80009ee:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009f0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	fa02 f20e 	lsl.w	r2, r2, lr
 80009fa:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009fe:	684a      	ldr	r2, [r1, #4]
 8000a00:	f002 0203 	and.w	r2, r2, #3
 8000a04:	fa02 f20e 	lsl.w	r2, r2, lr
 8000a08:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000a0a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a0c:	684a      	ldr	r2, [r1, #4]
 8000a0e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000a12:	d0c7      	beq.n	80009a4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a14:	2200      	movs	r2, #0
 8000a16:	9201      	str	r2, [sp, #4]
 8000a18:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <HAL_GPIO_Init+0x1d8>)
 8000a1a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000a1c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000a20:	6454      	str	r4, [r2, #68]	@ 0x44
 8000a22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000a24:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000a28:	9201      	str	r2, [sp, #4]
 8000a2a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a2c:	089c      	lsrs	r4, r3, #2
 8000a2e:	1ca5      	adds	r5, r4, #2
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <HAL_GPIO_Init+0x1d0>)
 8000a32:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a36:	f003 0e03 	and.w	lr, r3, #3
 8000a3a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a3e:	220f      	movs	r2, #15
 8000a40:	fa02 f20e 	lsl.w	r2, r2, lr
 8000a44:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a48:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <HAL_GPIO_Init+0x1dc>)
 8000a4a:	4290      	cmp	r0, r2
 8000a4c:	f43f af74 	beq.w	8000938 <HAL_GPIO_Init+0x68>
 8000a50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a54:	4290      	cmp	r0, r2
 8000a56:	d016      	beq.n	8000a86 <HAL_GPIO_Init+0x1b6>
 8000a58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a5c:	4290      	cmp	r0, r2
 8000a5e:	d014      	beq.n	8000a8a <HAL_GPIO_Init+0x1ba>
 8000a60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a64:	4290      	cmp	r0, r2
 8000a66:	d012      	beq.n	8000a8e <HAL_GPIO_Init+0x1be>
 8000a68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d010      	beq.n	8000a92 <HAL_GPIO_Init+0x1c2>
 8000a70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a74:	4290      	cmp	r0, r2
 8000a76:	d00e      	beq.n	8000a96 <HAL_GPIO_Init+0x1c6>
 8000a78:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f43f af59 	beq.w	8000934 <HAL_GPIO_Init+0x64>
 8000a82:	2207      	movs	r2, #7
 8000a84:	e759      	b.n	800093a <HAL_GPIO_Init+0x6a>
 8000a86:	2201      	movs	r2, #1
 8000a88:	e757      	b.n	800093a <HAL_GPIO_Init+0x6a>
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	e755      	b.n	800093a <HAL_GPIO_Init+0x6a>
 8000a8e:	2203      	movs	r2, #3
 8000a90:	e753      	b.n	800093a <HAL_GPIO_Init+0x6a>
 8000a92:	2204      	movs	r2, #4
 8000a94:	e751      	b.n	800093a <HAL_GPIO_Init+0x6a>
 8000a96:	2205      	movs	r2, #5
 8000a98:	e74f      	b.n	800093a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd70      	pop	{r4, r5, r6, pc}
 8000a9e:	4770      	bx	lr
 8000aa0:	40013800 	.word	0x40013800
 8000aa4:	40013c00 	.word	0x40013c00
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab0:	b10a      	cbz	r2, 8000ab6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ab2:	6181      	str	r1, [r0, #24]
 8000ab4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ab6:	0409      	lsls	r1, r1, #16
 8000ab8:	6181      	str	r1, [r0, #24]
  }
}
 8000aba:	4770      	bx	lr

08000abc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2100      	movs	r1, #0
 8000ac0:	9100      	str	r1, [sp, #0]
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <HAL_MspInit+0x34>)
 8000ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ac6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000aca:	645a      	str	r2, [r3, #68]	@ 0x44
 8000acc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ace:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ad2:	9200      	str	r2, [sp, #0]
 8000ad4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	9101      	str	r1, [sp, #4]
 8000ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ada:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ade:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	b002      	add	sp, #8
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000af4:	2800      	cmp	r0, #0
 8000af6:	f000 809b 	beq.w	8000c30 <HAL_RCC_ClockConfig+0x13c>
{
 8000afa:	b570      	push	{r4, r5, r6, lr}
 8000afc:	460d      	mov	r5, r1
 8000afe:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b00:	4b4f      	ldr	r3, [pc, #316]	@ (8000c40 <HAL_RCC_ClockConfig+0x14c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 030f 	and.w	r3, r3, #15
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d208      	bcs.n	8000b1e <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b0c:	b2cb      	uxtb	r3, r1
 8000b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8000c40 <HAL_RCC_ClockConfig+0x14c>)
 8000b10:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b12:	6813      	ldr	r3, [r2, #0]
 8000b14:	f003 030f 	and.w	r3, r3, #15
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f040 808b 	bne.w	8000c34 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	f013 0f02 	tst.w	r3, #2
 8000b24:	d017      	beq.n	8000b56 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b26:	f013 0f04 	tst.w	r3, #4
 8000b2a:	d004      	beq.n	8000b36 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b2c:	4a45      	ldr	r2, [pc, #276]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000b2e:	6893      	ldr	r3, [r2, #8]
 8000b30:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000b34:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	f013 0f08 	tst.w	r3, #8
 8000b3c:	d004      	beq.n	8000b48 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b3e:	4a41      	ldr	r2, [pc, #260]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000b40:	6893      	ldr	r3, [r2, #8]
 8000b42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b48:	4a3e      	ldr	r2, [pc, #248]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000b4a:	6893      	ldr	r3, [r2, #8]
 8000b4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000b50:	68a1      	ldr	r1, [r4, #8]
 8000b52:	430b      	orrs	r3, r1
 8000b54:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	f013 0f01 	tst.w	r3, #1
 8000b5c:	d032      	beq.n	8000bc4 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b5e:	6863      	ldr	r3, [r4, #4]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d021      	beq.n	8000ba8 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000b64:	1e9a      	subs	r2, r3, #2
 8000b66:	2a01      	cmp	r2, #1
 8000b68:	d925      	bls.n	8000bb6 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b6a:	4a36      	ldr	r2, [pc, #216]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	f012 0f02 	tst.w	r2, #2
 8000b72:	d061      	beq.n	8000c38 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b74:	4933      	ldr	r1, [pc, #204]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000b76:	688a      	ldr	r2, [r1, #8]
 8000b78:	f022 0203 	bic.w	r2, r2, #3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b80:	f7ff fd48 	bl	8000614 <HAL_GetTick>
 8000b84:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b86:	4b2f      	ldr	r3, [pc, #188]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
 8000b8e:	6862      	ldr	r2, [r4, #4]
 8000b90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b94:	d016      	beq.n	8000bc4 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b96:	f7ff fd3d 	bl	8000614 <HAL_GetTick>
 8000b9a:	1b80      	subs	r0, r0, r6
 8000b9c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	d9f0      	bls.n	8000b86 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	e042      	b.n	8000c2e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba8:	4a26      	ldr	r2, [pc, #152]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000bb0:	d1e0      	bne.n	8000b74 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	e03b      	b.n	8000c2e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000bbe:	d1d9      	bne.n	8000b74 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	e034      	b.n	8000c2e <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <HAL_RCC_ClockConfig+0x14c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 030f 	and.w	r3, r3, #15
 8000bcc:	42ab      	cmp	r3, r5
 8000bce:	d907      	bls.n	8000be0 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bd0:	b2ea      	uxtb	r2, r5
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <HAL_RCC_ClockConfig+0x14c>)
 8000bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	42ab      	cmp	r3, r5
 8000bde:	d12d      	bne.n	8000c3c <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	f013 0f04 	tst.w	r3, #4
 8000be6:	d006      	beq.n	8000bf6 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000be8:	4a16      	ldr	r2, [pc, #88]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000bea:	6893      	ldr	r3, [r2, #8]
 8000bec:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000bf0:	68e1      	ldr	r1, [r4, #12]
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	f013 0f08 	tst.w	r3, #8
 8000bfc:	d007      	beq.n	8000c0e <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bfe:	4a11      	ldr	r2, [pc, #68]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000c00:	6893      	ldr	r3, [r2, #8]
 8000c02:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000c06:	6921      	ldr	r1, [r4, #16]
 8000c08:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c0c:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c0e:	f000 f821 	bl	8000c54 <HAL_RCC_GetSysClockFreq>
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <HAL_RCC_ClockConfig+0x150>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <HAL_RCC_ClockConfig+0x154>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	40d8      	lsrs	r0, r3
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_RCC_ClockConfig+0x158>)
 8000c22:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8000c24:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <HAL_RCC_ClockConfig+0x15c>)
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	f7ff fca8 	bl	800057c <HAL_InitTick>

  return HAL_OK;
 8000c2c:	2000      	movs	r0, #0
}
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000c30:	2001      	movs	r0, #1
}
 8000c32:	4770      	bx	lr
      return HAL_ERROR;
 8000c34:	2001      	movs	r0, #1
 8000c36:	e7fa      	b.n	8000c2e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8000c38:	2001      	movs	r0, #1
 8000c3a:	e7f8      	b.n	8000c2e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	e7f6      	b.n	8000c2e <HAL_RCC_ClockConfig+0x13a>
 8000c40:	40023c00 	.word	0x40023c00
 8000c44:	40023800 	.word	0x40023800
 8000c48:	080015b8 	.word	0x080015b8
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000004 	.word	0x20000004

08000c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c54:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c56:	4b46      	ldr	r3, [pc, #280]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f003 030c 	and.w	r3, r3, #12
 8000c5e:	2b08      	cmp	r3, #8
 8000c60:	d005      	beq.n	8000c6e <HAL_RCC_GetSysClockFreq+0x1a>
 8000c62:	2b0c      	cmp	r3, #12
 8000c64:	d043      	beq.n	8000cee <HAL_RCC_GetSysClockFreq+0x9a>
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d17f      	bne.n	8000d6a <HAL_RCC_GetSysClockFreq+0x116>
      sysclockfreq = HSI_VALUE;
      break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000c6a:	4842      	ldr	r0, [pc, #264]	@ (8000d74 <HAL_RCC_GetSysClockFreq+0x120>)
 8000c6c:	e019      	b.n	8000ca2 <HAL_RCC_GetSysClockFreq+0x4e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c6e:	4b40      	ldr	r3, [pc, #256]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000c7c:	d012      	beq.n	8000ca4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000c80:	6859      	ldr	r1, [r3, #4]
 8000c82:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c86:	483b      	ldr	r0, [pc, #236]	@ (8000d74 <HAL_RCC_GetSysClockFreq+0x120>)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	fba1 0100 	umull	r0, r1, r1, r0
 8000c8e:	f7ff fa99 	bl	80001c4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000c92:	4b37      	ldr	r3, [pc, #220]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000c9e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ca2:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ca4:	4b32      	ldr	r3, [pc, #200]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000ca6:	6858      	ldr	r0, [r3, #4]
 8000ca8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000cac:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000cb0:	ebbc 0c00 	subs.w	ip, ip, r0
 8000cb4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000cb8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000cbc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000cc0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000cc4:	ebb1 010c 	subs.w	r1, r1, ip
 8000cc8:	eb63 030e 	sbc.w	r3, r3, lr
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000cd2:	00c9      	lsls	r1, r1, #3
 8000cd4:	eb11 0c00 	adds.w	ip, r1, r0
 8000cd8:	f143 0300 	adc.w	r3, r3, #0
 8000cdc:	0299      	lsls	r1, r3, #10
 8000cde:	2300      	movs	r3, #0
 8000ce0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000ce4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000ce8:	f7ff fa6c 	bl	80001c4 <__aeabi_uldivmod>
 8000cec:	e7d1      	b.n	8000c92 <HAL_RCC_GetSysClockFreq+0x3e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cee:	4b20      	ldr	r3, [pc, #128]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000cfc:	d010      	beq.n	8000d20 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000d00:	6859      	ldr	r1, [r3, #4]
 8000d02:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d06:	481b      	ldr	r0, [pc, #108]	@ (8000d74 <HAL_RCC_GetSysClockFreq+0x120>)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	fba1 0100 	umull	r0, r1, r1, r0
 8000d0e:	f7ff fa59 	bl	80001c4 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8000d1a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000d1e:	e7c0      	b.n	8000ca2 <HAL_RCC_GetSysClockFreq+0x4e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000d22:	6858      	ldr	r0, [r3, #4]
 8000d24:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000d28:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000d2c:	ebbc 0c00 	subs.w	ip, ip, r0
 8000d30:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000d34:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000d38:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000d3c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000d40:	ebb1 010c 	subs.w	r1, r1, ip
 8000d44:	eb63 030e 	sbc.w	r3, r3, lr
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000d4e:	00c9      	lsls	r1, r1, #3
 8000d50:	eb11 0c00 	adds.w	ip, r1, r0
 8000d54:	f143 0300 	adc.w	r3, r3, #0
 8000d58:	0299      	lsls	r1, r3, #10
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000d60:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000d64:	f7ff fa2e 	bl	80001c4 <__aeabi_uldivmod>
 8000d68:	e7d3      	b.n	8000d12 <HAL_RCC_GetSysClockFreq+0xbe>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d6a:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <HAL_RCC_GetSysClockFreq+0x124>)
  return sysclockfreq;
 8000d6c:	e799      	b.n	8000ca2 <HAL_RCC_GetSysClockFreq+0x4e>
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	017d7840 	.word	0x017d7840
 8000d78:	00f42400 	.word	0x00f42400

08000d7c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	f000 8201 	beq.w	8001184 <HAL_RCC_OscConfig+0x408>
{
 8000d82:	b570      	push	{r4, r5, r6, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d88:	6803      	ldr	r3, [r0, #0]
 8000d8a:	f013 0f01 	tst.w	r3, #1
 8000d8e:	d041      	beq.n	8000e14 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000d90:	4b99      	ldr	r3, [pc, #612]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d032      	beq.n	8000e02 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000d9c:	4b96      	ldr	r3, [pc, #600]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 030c 	and.w	r3, r3, #12
        || \
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d027      	beq.n	8000df8 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000da8:	4b93      	ldr	r3, [pc, #588]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000db0:	2b0c      	cmp	r3, #12
 8000db2:	d059      	beq.n	8000e68 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dba:	d05b      	beq.n	8000e74 <HAL_RCC_OscConfig+0xf8>
 8000dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dc0:	d05e      	beq.n	8000e80 <HAL_RCC_OscConfig+0x104>
 8000dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dd4:	6863      	ldr	r3, [r4, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d05c      	beq.n	8000e94 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dda:	f7ff fc1b 	bl	8000614 <HAL_GetTick>
 8000dde:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de0:	4b85      	ldr	r3, [pc, #532]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000de8:	d114      	bne.n	8000e14 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dea:	f7ff fc13 	bl	8000614 <HAL_GetTick>
 8000dee:	1b40      	subs	r0, r0, r5
 8000df0:	2864      	cmp	r0, #100	@ 0x64
 8000df2:	d9f5      	bls.n	8000de0 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8000df4:	2003      	movs	r0, #3
 8000df6:	e1cc      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000df8:	4b7f      	ldr	r3, [pc, #508]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000e00:	d0d2      	beq.n	8000da8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b7d      	ldr	r3, [pc, #500]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e0a:	d003      	beq.n	8000e14 <HAL_RCC_OscConfig+0x98>
 8000e0c:	6863      	ldr	r3, [r4, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 81ba 	beq.w	8001188 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	f013 0f02 	tst.w	r3, #2
 8000e1a:	d060      	beq.n	8000ede <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000e1c:	4b76      	ldr	r3, [pc, #472]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f013 0f0c 	tst.w	r3, #12
 8000e24:	d04a      	beq.n	8000ebc <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000e26:	4b74      	ldr	r3, [pc, #464]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
        || \
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d03f      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e32:	4b71      	ldr	r3, [pc, #452]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000e3a:	2b0c      	cmp	r3, #12
 8000e3c:	d069      	beq.n	8000f12 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e3e:	68e3      	ldr	r3, [r4, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d075      	beq.n	8000f30 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e44:	4b6d      	ldr	r3, [pc, #436]	@ (8000ffc <HAL_RCC_OscConfig+0x280>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fbe3 	bl	8000614 <HAL_GetTick>
 8000e4e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e50:	4b69      	ldr	r3, [pc, #420]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f013 0f02 	tst.w	r3, #2
 8000e58:	d161      	bne.n	8000f1e <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fbdb 	bl	8000614 <HAL_GetTick>
 8000e5e:	1b40      	subs	r0, r0, r5
 8000e60:	2802      	cmp	r0, #2
 8000e62:	d9f5      	bls.n	8000e50 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8000e64:	2003      	movs	r0, #3
 8000e66:	e194      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e68:	4b63      	ldr	r3, [pc, #396]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000e70:	d0a0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x38>
 8000e72:	e7c6      	b.n	8000e02 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e74:	4a60      	ldr	r2, [pc, #384]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	6813      	ldr	r3, [r2, #0]
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e7a9      	b.n	8000dd4 <HAL_RCC_OscConfig+0x58>
 8000e80:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e79f      	b.n	8000dd4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8000e94:	f7ff fbbe 	bl	8000614 <HAL_GetTick>
 8000e98:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9a:	4b57      	ldr	r3, [pc, #348]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ea2:	d0b7      	beq.n	8000e14 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fbb6 	bl	8000614 <HAL_GetTick>
 8000ea8:	1b40      	subs	r0, r0, r5
 8000eaa:	2864      	cmp	r0, #100	@ 0x64
 8000eac:	d9f5      	bls.n	8000e9a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000eae:	2003      	movs	r0, #3
 8000eb0:	e16f      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000eb2:	4b51      	ldr	r3, [pc, #324]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000eba:	d1ba      	bne.n	8000e32 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f013 0f02 	tst.w	r3, #2
 8000ec4:	d003      	beq.n	8000ece <HAL_RCC_OscConfig+0x152>
 8000ec6:	68e3      	ldr	r3, [r4, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	f040 815f 	bne.w	800118c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ece:	4a4a      	ldr	r2, [pc, #296]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000ed0:	6813      	ldr	r3, [r2, #0]
 8000ed2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000ed6:	6921      	ldr	r1, [r4, #16]
 8000ed8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000edc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	f013 0f08 	tst.w	r3, #8
 8000ee4:	d049      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ee6:	6963      	ldr	r3, [r4, #20]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d033      	beq.n	8000f54 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eec:	4b43      	ldr	r3, [pc, #268]	@ (8000ffc <HAL_RCC_OscConfig+0x280>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fb8e 	bl	8000614 <HAL_GetTick>
 8000ef8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000efe:	f013 0f02 	tst.w	r3, #2
 8000f02:	d13a      	bne.n	8000f7a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f04:	f7ff fb86 	bl	8000614 <HAL_GetTick>
 8000f08:	1b40      	subs	r0, r0, r5
 8000f0a:	2802      	cmp	r0, #2
 8000f0c:	d9f5      	bls.n	8000efa <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8000f0e:	2003      	movs	r0, #3
 8000f10:	e13f      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f12:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000f1a:	d190      	bne.n	8000e3e <HAL_RCC_OscConfig+0xc2>
 8000f1c:	e7ce      	b.n	8000ebc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	4a36      	ldr	r2, [pc, #216]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000f20:	6813      	ldr	r3, [r2, #0]
 8000f22:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000f26:	6921      	ldr	r1, [r4, #16]
 8000f28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e7d6      	b.n	8000ede <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000f30:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <HAL_RCC_OscConfig+0x280>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f36:	f7ff fb6d 	bl	8000614 <HAL_GetTick>
 8000f3a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f013 0f02 	tst.w	r3, #2
 8000f44:	d0cb      	beq.n	8000ede <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f46:	f7ff fb65 	bl	8000614 <HAL_GetTick>
 8000f4a:	1b40      	subs	r0, r0, r5
 8000f4c:	2802      	cmp	r0, #2
 8000f4e:	d9f5      	bls.n	8000f3c <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8000f50:	2003      	movs	r0, #3
 8000f52:	e11e      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f54:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <HAL_RCC_OscConfig+0x280>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f5c:	f7ff fb5a 	bl	8000614 <HAL_GetTick>
 8000f60:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f62:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f66:	f013 0f02 	tst.w	r3, #2
 8000f6a:	d006      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fb52 	bl	8000614 <HAL_GetTick>
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9f5      	bls.n	8000f62 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8000f76:	2003      	movs	r0, #3
 8000f78:	e10b      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	f013 0f04 	tst.w	r3, #4
 8000f80:	d076      	beq.n	8001070 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000f8a:	d133      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f94:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fa4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_RCC_OscConfig+0x284>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000fae:	d029      	beq.n	8001004 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb0:	68a3      	ldr	r3, [r4, #8]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d03a      	beq.n	800102c <HAL_RCC_OscConfig+0x2b0>
 8000fb6:	2b05      	cmp	r3, #5
 8000fb8:	d03e      	beq.n	8001038 <HAL_RCC_OscConfig+0x2bc>
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000fbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fc4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000fc6:	f022 0204 	bic.w	r2, r2, #4
 8000fca:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fcc:	68a3      	ldr	r3, [r4, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d03c      	beq.n	800104c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fb1f 	bl	8000614 <HAL_GetTick>
 8000fd6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <HAL_RCC_OscConfig+0x27c>)
 8000fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fdc:	f013 0f02 	tst.w	r3, #2
 8000fe0:	d145      	bne.n	800106e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fb17 	bl	8000614 <HAL_GetTick>
 8000fe6:	1b80      	subs	r0, r0, r6
 8000fe8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fec:	4298      	cmp	r0, r3
 8000fee:	d9f3      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	e0ce      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8000ff4:	2500      	movs	r5, #0
 8000ff6:	e7d6      	b.n	8000fa6 <HAL_RCC_OscConfig+0x22a>
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	42470000 	.word	0x42470000
 8001000:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001004:	4a6b      	ldr	r2, [pc, #428]	@ (80011b4 <HAL_RCC_OscConfig+0x438>)
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800100e:	f7ff fb01 	bl	8000614 <HAL_GetTick>
 8001012:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	4b67      	ldr	r3, [pc, #412]	@ (80011b4 <HAL_RCC_OscConfig+0x438>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800101c:	d1c8      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101e:	f7ff faf9 	bl	8000614 <HAL_GetTick>
 8001022:	1b80      	subs	r0, r0, r6
 8001024:	2802      	cmp	r0, #2
 8001026:	d9f5      	bls.n	8001014 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8001028:	2003      	movs	r0, #3
 800102a:	e0b2      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	4a62      	ldr	r2, [pc, #392]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 800102e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6713      	str	r3, [r2, #112]	@ 0x70
 8001036:	e7c9      	b.n	8000fcc <HAL_RCC_OscConfig+0x250>
 8001038:	4b5f      	ldr	r3, [pc, #380]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 800103a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800103c:	f042 0204 	orr.w	r2, r2, #4
 8001040:	671a      	str	r2, [r3, #112]	@ 0x70
 8001042:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001044:	f042 0201 	orr.w	r2, r2, #1
 8001048:	671a      	str	r2, [r3, #112]	@ 0x70
 800104a:	e7bf      	b.n	8000fcc <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104c:	f7ff fae2 	bl	8000614 <HAL_GetTick>
 8001050:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001052:	4b59      	ldr	r3, [pc, #356]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 8001054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001056:	f013 0f02 	tst.w	r3, #2
 800105a:	d008      	beq.n	800106e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f7ff fada 	bl	8000614 <HAL_GetTick>
 8001060:	1b80      	subs	r0, r0, r6
 8001062:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001066:	4298      	cmp	r0, r3
 8001068:	d9f3      	bls.n	8001052 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800106a:	2003      	movs	r0, #3
 800106c:	e091      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800106e:	b9ed      	cbnz	r5, 80010ac <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001070:	69a3      	ldr	r3, [r4, #24]
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 808c 	beq.w	8001190 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001078:	4a4f      	ldr	r2, [pc, #316]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 800107a:	6892      	ldr	r2, [r2, #8]
 800107c:	f002 020c 	and.w	r2, r2, #12
 8001080:	2a08      	cmp	r2, #8
 8001082:	d054      	beq.n	800112e <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001084:	2b02      	cmp	r3, #2
 8001086:	d017      	beq.n	80010b8 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001088:	4b4c      	ldr	r3, [pc, #304]	@ (80011bc <HAL_RCC_OscConfig+0x440>)
 800108a:	2200      	movs	r2, #0
 800108c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108e:	f7ff fac1 	bl	8000614 <HAL_GetTick>
 8001092:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001094:	4b48      	ldr	r3, [pc, #288]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800109c:	d045      	beq.n	800112a <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fab9 	bl	8000614 <HAL_GetTick>
 80010a2:	1b00      	subs	r0, r0, r4
 80010a4:	2802      	cmp	r0, #2
 80010a6:	d9f5      	bls.n	8001094 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80010a8:	2003      	movs	r0, #3
 80010aa:	e072      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ac:	4a42      	ldr	r2, [pc, #264]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 80010ae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80010b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b6:	e7db      	b.n	8001070 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80010b8:	4b40      	ldr	r3, [pc, #256]	@ (80011bc <HAL_RCC_OscConfig+0x440>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80010be:	f7ff faa9 	bl	8000614 <HAL_GetTick>
 80010c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c4:	4b3c      	ldr	r3, [pc, #240]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80010cc:	d006      	beq.n	80010dc <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff faa1 	bl	8000614 <HAL_GetTick>
 80010d2:	1b40      	subs	r0, r0, r5
 80010d4:	2802      	cmp	r0, #2
 80010d6:	d9f5      	bls.n	80010c4 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 80010d8:	2003      	movs	r0, #3
 80010da:	e05a      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010dc:	69e3      	ldr	r3, [r4, #28]
 80010de:	6a22      	ldr	r2, [r4, #32]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80010e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80010ea:	0852      	lsrs	r2, r2, #1
 80010ec:	3a01      	subs	r2, #1
 80010ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80010f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010f8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80010fa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80010fe:	4a2e      	ldr	r2, [pc, #184]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 8001100:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001102:	4b2e      	ldr	r3, [pc, #184]	@ (80011bc <HAL_RCC_OscConfig+0x440>)
 8001104:	2201      	movs	r2, #1
 8001106:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001108:	f7ff fa84 	bl	8000614 <HAL_GetTick>
 800110c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fa7c 	bl	8000614 <HAL_GetTick>
 800111c:	1b00      	subs	r0, r0, r4
 800111e:	2802      	cmp	r0, #2
 8001120:	d9f5      	bls.n	800110e <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8001122:	2003      	movs	r0, #3
 8001124:	e035      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001126:	2000      	movs	r0, #0
 8001128:	e033      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
 800112a:	2000      	movs	r0, #0
 800112c:	e031      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800112e:	2b01      	cmp	r3, #1
 8001130:	d031      	beq.n	8001196 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_RCC_OscConfig+0x43c>)
 8001134:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800113a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800113c:	4291      	cmp	r1, r2
 800113e:	d12c      	bne.n	800119a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001140:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001144:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001146:	428a      	cmp	r2, r1
 8001148:	d129      	bne.n	800119e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800114a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800114c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001150:	401a      	ands	r2, r3
 8001152:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001156:	d124      	bne.n	80011a2 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001158:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800115c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800115e:	0852      	lsrs	r2, r2, #1
 8001160:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001162:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001166:	d11e      	bne.n	80011a6 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001168:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800116c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800116e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001172:	d11a      	bne.n	80011aa <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001174:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8001178:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800117a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800117e:	d116      	bne.n	80011ae <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8001180:	2000      	movs	r0, #0
 8001182:	e006      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001184:	2001      	movs	r0, #1
}
 8001186:	4770      	bx	lr
        return HAL_ERROR;
 8001188:	2001      	movs	r0, #1
 800118a:	e002      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800118c:	2001      	movs	r0, #1
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001190:	2000      	movs	r0, #0
}
 8001192:	b002      	add	sp, #8
 8001194:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
 8001198:	e7fb      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800119a:	2001      	movs	r0, #1
 800119c:	e7f9      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
 800119e:	2001      	movs	r0, #1
 80011a0:	e7f7      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
 80011a2:	2001      	movs	r0, #1
 80011a4:	e7f5      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
 80011a6:	2001      	movs	r0, #1
 80011a8:	e7f3      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
 80011aa:	2001      	movs	r0, #1
 80011ac:	e7f1      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
 80011ae:	2001      	movs	r0, #1
 80011b0:	e7ef      	b.n	8001192 <HAL_RCC_OscConfig+0x416>
 80011b2:	bf00      	nop
 80011b4:	40007000 	.word	0x40007000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	42470000 	.word	0x42470000

080011c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler>

080011c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler>

080011c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler>

080011c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler>

080011c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler>

080011ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f7ff fa13 	bl	80005fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bd08      	pop	{r3, pc}

080011d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80011da:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <DMA1_Stream5_IRQHandler+0xc>)
 80011dc:	f7ff fa8a 	bl	80006f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011e0:	bd08      	pop	{r3, pc}
 80011e2:	bf00      	nop
 80011e4:	20000028 	.word	0x20000028

080011e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4a03      	ldr	r2, [pc, #12]	@ (80011f8 <SystemInit+0x10>)
 80011ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80011ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001234 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001200:	f7ff fff2 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	@ (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800122a:	f000 f819 	bl	8001260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f997 	bl	8000560 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001240:	080015d8 	.word	0x080015d8
  ldr r2, =_sbss
 8001244:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001248:	2000008c 	.word	0x2000008c

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>

0800124e <memset>:
 800124e:	4402      	add	r2, r0
 8001250:	4603      	mov	r3, r0
 8001252:	4293      	cmp	r3, r2
 8001254:	d100      	bne.n	8001258 <memset+0xa>
 8001256:	4770      	bx	lr
 8001258:	f803 1b01 	strb.w	r1, [r3], #1
 800125c:	e7f9      	b.n	8001252 <memset+0x4>
	...

08001260 <__libc_init_array>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <__libc_init_array+0x38>)
 8001264:	4d0d      	ldr	r5, [pc, #52]	@ (800129c <__libc_init_array+0x3c>)
 8001266:	1b5b      	subs	r3, r3, r5
 8001268:	109c      	asrs	r4, r3, #2
 800126a:	2600      	movs	r6, #0
 800126c:	42a6      	cmp	r6, r4
 800126e:	d109      	bne.n	8001284 <__libc_init_array+0x24>
 8001270:	f000 f996 	bl	80015a0 <_init>
 8001274:	4d0a      	ldr	r5, [pc, #40]	@ (80012a0 <__libc_init_array+0x40>)
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <__libc_init_array+0x44>)
 8001278:	1b5b      	subs	r3, r3, r5
 800127a:	109c      	asrs	r4, r3, #2
 800127c:	2600      	movs	r6, #0
 800127e:	42a6      	cmp	r6, r4
 8001280:	d105      	bne.n	800128e <__libc_init_array+0x2e>
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	f855 3b04 	ldr.w	r3, [r5], #4
 8001288:	4798      	blx	r3
 800128a:	3601      	adds	r6, #1
 800128c:	e7ee      	b.n	800126c <__libc_init_array+0xc>
 800128e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001292:	4798      	blx	r3
 8001294:	3601      	adds	r6, #1
 8001296:	e7f2      	b.n	800127e <__libc_init_array+0x1e>
 8001298:	080015d0 	.word	0x080015d0
 800129c:	080015d0 	.word	0x080015d0
 80012a0:	080015d0 	.word	0x080015d0
 80012a4:	080015d4 	.word	0x080015d4

080012a8 <__udivmoddi4>:
 80012a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012ac:	9d08      	ldr	r5, [sp, #32]
 80012ae:	460f      	mov	r7, r1
 80012b0:	4604      	mov	r4, r0
 80012b2:	468c      	mov	ip, r1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d148      	bne.n	800134a <__udivmoddi4+0xa2>
 80012b8:	428a      	cmp	r2, r1
 80012ba:	4616      	mov	r6, r2
 80012bc:	d961      	bls.n	8001382 <__udivmoddi4+0xda>
 80012be:	fab2 f382 	clz	r3, r2
 80012c2:	b14b      	cbz	r3, 80012d8 <__udivmoddi4+0x30>
 80012c4:	f1c3 0220 	rsb	r2, r3, #32
 80012c8:	fa01 fc03 	lsl.w	ip, r1, r3
 80012cc:	fa20 f202 	lsr.w	r2, r0, r2
 80012d0:	409e      	lsls	r6, r3
 80012d2:	ea42 0c0c 	orr.w	ip, r2, ip
 80012d6:	409c      	lsls	r4, r3
 80012d8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80012dc:	b2b7      	uxth	r7, r6
 80012de:	fbbc f1fe 	udiv	r1, ip, lr
 80012e2:	0c22      	lsrs	r2, r4, #16
 80012e4:	fb0e cc11 	mls	ip, lr, r1, ip
 80012e8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80012ec:	fb01 f007 	mul.w	r0, r1, r7
 80012f0:	4290      	cmp	r0, r2
 80012f2:	d909      	bls.n	8001308 <__udivmoddi4+0x60>
 80012f4:	18b2      	adds	r2, r6, r2
 80012f6:	f101 3cff 	add.w	ip, r1, #4294967295
 80012fa:	f080 80ee 	bcs.w	80014da <__udivmoddi4+0x232>
 80012fe:	4290      	cmp	r0, r2
 8001300:	f240 80eb 	bls.w	80014da <__udivmoddi4+0x232>
 8001304:	3902      	subs	r1, #2
 8001306:	4432      	add	r2, r6
 8001308:	1a12      	subs	r2, r2, r0
 800130a:	b2a4      	uxth	r4, r4
 800130c:	fbb2 f0fe 	udiv	r0, r2, lr
 8001310:	fb0e 2210 	mls	r2, lr, r0, r2
 8001314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001318:	fb00 f707 	mul.w	r7, r0, r7
 800131c:	42a7      	cmp	r7, r4
 800131e:	d909      	bls.n	8001334 <__udivmoddi4+0x8c>
 8001320:	1934      	adds	r4, r6, r4
 8001322:	f100 32ff 	add.w	r2, r0, #4294967295
 8001326:	f080 80da 	bcs.w	80014de <__udivmoddi4+0x236>
 800132a:	42a7      	cmp	r7, r4
 800132c:	f240 80d7 	bls.w	80014de <__udivmoddi4+0x236>
 8001330:	4434      	add	r4, r6
 8001332:	3802      	subs	r0, #2
 8001334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001338:	1be4      	subs	r4, r4, r7
 800133a:	2100      	movs	r1, #0
 800133c:	b11d      	cbz	r5, 8001346 <__udivmoddi4+0x9e>
 800133e:	40dc      	lsrs	r4, r3
 8001340:	2300      	movs	r3, #0
 8001342:	e9c5 4300 	strd	r4, r3, [r5]
 8001346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800134a:	428b      	cmp	r3, r1
 800134c:	d906      	bls.n	800135c <__udivmoddi4+0xb4>
 800134e:	b10d      	cbz	r5, 8001354 <__udivmoddi4+0xac>
 8001350:	e9c5 0100 	strd	r0, r1, [r5]
 8001354:	2100      	movs	r1, #0
 8001356:	4608      	mov	r0, r1
 8001358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135c:	fab3 f183 	clz	r1, r3
 8001360:	2900      	cmp	r1, #0
 8001362:	d148      	bne.n	80013f6 <__udivmoddi4+0x14e>
 8001364:	42bb      	cmp	r3, r7
 8001366:	d302      	bcc.n	800136e <__udivmoddi4+0xc6>
 8001368:	4282      	cmp	r2, r0
 800136a:	f200 8107 	bhi.w	800157c <__udivmoddi4+0x2d4>
 800136e:	1a84      	subs	r4, r0, r2
 8001370:	eb67 0203 	sbc.w	r2, r7, r3
 8001374:	2001      	movs	r0, #1
 8001376:	4694      	mov	ip, r2
 8001378:	2d00      	cmp	r5, #0
 800137a:	d0e4      	beq.n	8001346 <__udivmoddi4+0x9e>
 800137c:	e9c5 4c00 	strd	r4, ip, [r5]
 8001380:	e7e1      	b.n	8001346 <__udivmoddi4+0x9e>
 8001382:	2a00      	cmp	r2, #0
 8001384:	f000 8092 	beq.w	80014ac <__udivmoddi4+0x204>
 8001388:	fab2 f382 	clz	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 80a8 	bne.w	80014e2 <__udivmoddi4+0x23a>
 8001392:	1a8a      	subs	r2, r1, r2
 8001394:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8001398:	fa1f fc86 	uxth.w	ip, r6
 800139c:	2101      	movs	r1, #1
 800139e:	0c20      	lsrs	r0, r4, #16
 80013a0:	fbb2 f7fe 	udiv	r7, r2, lr
 80013a4:	fb0e 2217 	mls	r2, lr, r7, r2
 80013a8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80013ac:	fb0c f007 	mul.w	r0, ip, r7
 80013b0:	4290      	cmp	r0, r2
 80013b2:	d907      	bls.n	80013c4 <__udivmoddi4+0x11c>
 80013b4:	18b2      	adds	r2, r6, r2
 80013b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80013ba:	d202      	bcs.n	80013c2 <__udivmoddi4+0x11a>
 80013bc:	4290      	cmp	r0, r2
 80013be:	f200 80e2 	bhi.w	8001586 <__udivmoddi4+0x2de>
 80013c2:	4647      	mov	r7, r8
 80013c4:	1a12      	subs	r2, r2, r0
 80013c6:	b2a4      	uxth	r4, r4
 80013c8:	fbb2 f0fe 	udiv	r0, r2, lr
 80013cc:	fb0e 2210 	mls	r2, lr, r0, r2
 80013d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80013d4:	fb0c fc00 	mul.w	ip, ip, r0
 80013d8:	45a4      	cmp	ip, r4
 80013da:	d907      	bls.n	80013ec <__udivmoddi4+0x144>
 80013dc:	1934      	adds	r4, r6, r4
 80013de:	f100 32ff 	add.w	r2, r0, #4294967295
 80013e2:	d202      	bcs.n	80013ea <__udivmoddi4+0x142>
 80013e4:	45a4      	cmp	ip, r4
 80013e6:	f200 80cb 	bhi.w	8001580 <__udivmoddi4+0x2d8>
 80013ea:	4610      	mov	r0, r2
 80013ec:	eba4 040c 	sub.w	r4, r4, ip
 80013f0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80013f4:	e7a2      	b.n	800133c <__udivmoddi4+0x94>
 80013f6:	f1c1 0620 	rsb	r6, r1, #32
 80013fa:	408b      	lsls	r3, r1
 80013fc:	fa22 fc06 	lsr.w	ip, r2, r6
 8001400:	ea4c 0c03 	orr.w	ip, ip, r3
 8001404:	fa07 f401 	lsl.w	r4, r7, r1
 8001408:	fa20 f306 	lsr.w	r3, r0, r6
 800140c:	40f7      	lsrs	r7, r6
 800140e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001412:	4323      	orrs	r3, r4
 8001414:	fa00 f801 	lsl.w	r8, r0, r1
 8001418:	fa1f fe8c 	uxth.w	lr, ip
 800141c:	fbb7 f0f9 	udiv	r0, r7, r9
 8001420:	0c1c      	lsrs	r4, r3, #16
 8001422:	fb09 7710 	mls	r7, r9, r0, r7
 8001426:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800142a:	fb00 f70e 	mul.w	r7, r0, lr
 800142e:	42a7      	cmp	r7, r4
 8001430:	fa02 f201 	lsl.w	r2, r2, r1
 8001434:	d90a      	bls.n	800144c <__udivmoddi4+0x1a4>
 8001436:	eb1c 0404 	adds.w	r4, ip, r4
 800143a:	f100 3aff 	add.w	sl, r0, #4294967295
 800143e:	f080 809b 	bcs.w	8001578 <__udivmoddi4+0x2d0>
 8001442:	42a7      	cmp	r7, r4
 8001444:	f240 8098 	bls.w	8001578 <__udivmoddi4+0x2d0>
 8001448:	3802      	subs	r0, #2
 800144a:	4464      	add	r4, ip
 800144c:	1be4      	subs	r4, r4, r7
 800144e:	b29f      	uxth	r7, r3
 8001450:	fbb4 f3f9 	udiv	r3, r4, r9
 8001454:	fb09 4413 	mls	r4, r9, r3, r4
 8001458:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800145c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001460:	45a6      	cmp	lr, r4
 8001462:	d909      	bls.n	8001478 <__udivmoddi4+0x1d0>
 8001464:	eb1c 0404 	adds.w	r4, ip, r4
 8001468:	f103 37ff 	add.w	r7, r3, #4294967295
 800146c:	f080 8082 	bcs.w	8001574 <__udivmoddi4+0x2cc>
 8001470:	45a6      	cmp	lr, r4
 8001472:	d97f      	bls.n	8001574 <__udivmoddi4+0x2cc>
 8001474:	3b02      	subs	r3, #2
 8001476:	4464      	add	r4, ip
 8001478:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800147c:	eba4 040e 	sub.w	r4, r4, lr
 8001480:	fba0 e702 	umull	lr, r7, r0, r2
 8001484:	42bc      	cmp	r4, r7
 8001486:	4673      	mov	r3, lr
 8001488:	46b9      	mov	r9, r7
 800148a:	d363      	bcc.n	8001554 <__udivmoddi4+0x2ac>
 800148c:	d060      	beq.n	8001550 <__udivmoddi4+0x2a8>
 800148e:	b15d      	cbz	r5, 80014a8 <__udivmoddi4+0x200>
 8001490:	ebb8 0203 	subs.w	r2, r8, r3
 8001494:	eb64 0409 	sbc.w	r4, r4, r9
 8001498:	fa04 f606 	lsl.w	r6, r4, r6
 800149c:	fa22 f301 	lsr.w	r3, r2, r1
 80014a0:	431e      	orrs	r6, r3
 80014a2:	40cc      	lsrs	r4, r1
 80014a4:	e9c5 6400 	strd	r6, r4, [r5]
 80014a8:	2100      	movs	r1, #0
 80014aa:	e74c      	b.n	8001346 <__udivmoddi4+0x9e>
 80014ac:	0862      	lsrs	r2, r4, #1
 80014ae:	0848      	lsrs	r0, r1, #1
 80014b0:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 80014b4:	0c0b      	lsrs	r3, r1, #16
 80014b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80014ba:	b28a      	uxth	r2, r1
 80014bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80014c0:	fbb3 f1f6 	udiv	r1, r3, r6
 80014c4:	07e4      	lsls	r4, r4, #31
 80014c6:	46b4      	mov	ip, r6
 80014c8:	4637      	mov	r7, r6
 80014ca:	46b6      	mov	lr, r6
 80014cc:	231f      	movs	r3, #31
 80014ce:	fbb0 f0f6 	udiv	r0, r0, r6
 80014d2:	1bd2      	subs	r2, r2, r7
 80014d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014d8:	e761      	b.n	800139e <__udivmoddi4+0xf6>
 80014da:	4661      	mov	r1, ip
 80014dc:	e714      	b.n	8001308 <__udivmoddi4+0x60>
 80014de:	4610      	mov	r0, r2
 80014e0:	e728      	b.n	8001334 <__udivmoddi4+0x8c>
 80014e2:	f1c3 0120 	rsb	r1, r3, #32
 80014e6:	fa20 f201 	lsr.w	r2, r0, r1
 80014ea:	409e      	lsls	r6, r3
 80014ec:	fa27 f101 	lsr.w	r1, r7, r1
 80014f0:	409f      	lsls	r7, r3
 80014f2:	433a      	orrs	r2, r7
 80014f4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80014f8:	fa1f fc86 	uxth.w	ip, r6
 80014fc:	fbb1 f7fe 	udiv	r7, r1, lr
 8001500:	fb0e 1017 	mls	r0, lr, r7, r1
 8001504:	0c11      	lsrs	r1, r2, #16
 8001506:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800150a:	fb07 f80c 	mul.w	r8, r7, ip
 800150e:	4588      	cmp	r8, r1
 8001510:	fa04 f403 	lsl.w	r4, r4, r3
 8001514:	d93a      	bls.n	800158c <__udivmoddi4+0x2e4>
 8001516:	1871      	adds	r1, r6, r1
 8001518:	f107 30ff 	add.w	r0, r7, #4294967295
 800151c:	d201      	bcs.n	8001522 <__udivmoddi4+0x27a>
 800151e:	4588      	cmp	r8, r1
 8001520:	d81f      	bhi.n	8001562 <__udivmoddi4+0x2ba>
 8001522:	eba1 0108 	sub.w	r1, r1, r8
 8001526:	fbb1 f8fe 	udiv	r8, r1, lr
 800152a:	fb08 f70c 	mul.w	r7, r8, ip
 800152e:	fb0e 1118 	mls	r1, lr, r8, r1
 8001532:	b292      	uxth	r2, r2
 8001534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001538:	42ba      	cmp	r2, r7
 800153a:	d22f      	bcs.n	800159c <__udivmoddi4+0x2f4>
 800153c:	18b2      	adds	r2, r6, r2
 800153e:	f108 31ff 	add.w	r1, r8, #4294967295
 8001542:	d2c6      	bcs.n	80014d2 <__udivmoddi4+0x22a>
 8001544:	42ba      	cmp	r2, r7
 8001546:	d2c4      	bcs.n	80014d2 <__udivmoddi4+0x22a>
 8001548:	f1a8 0102 	sub.w	r1, r8, #2
 800154c:	4432      	add	r2, r6
 800154e:	e7c0      	b.n	80014d2 <__udivmoddi4+0x22a>
 8001550:	45f0      	cmp	r8, lr
 8001552:	d29c      	bcs.n	800148e <__udivmoddi4+0x1e6>
 8001554:	ebbe 0302 	subs.w	r3, lr, r2
 8001558:	eb67 070c 	sbc.w	r7, r7, ip
 800155c:	3801      	subs	r0, #1
 800155e:	46b9      	mov	r9, r7
 8001560:	e795      	b.n	800148e <__udivmoddi4+0x1e6>
 8001562:	eba6 0808 	sub.w	r8, r6, r8
 8001566:	4441      	add	r1, r8
 8001568:	1eb8      	subs	r0, r7, #2
 800156a:	fbb1 f8fe 	udiv	r8, r1, lr
 800156e:	fb08 f70c 	mul.w	r7, r8, ip
 8001572:	e7dc      	b.n	800152e <__udivmoddi4+0x286>
 8001574:	463b      	mov	r3, r7
 8001576:	e77f      	b.n	8001478 <__udivmoddi4+0x1d0>
 8001578:	4650      	mov	r0, sl
 800157a:	e767      	b.n	800144c <__udivmoddi4+0x1a4>
 800157c:	4608      	mov	r0, r1
 800157e:	e6fb      	b.n	8001378 <__udivmoddi4+0xd0>
 8001580:	4434      	add	r4, r6
 8001582:	3802      	subs	r0, #2
 8001584:	e732      	b.n	80013ec <__udivmoddi4+0x144>
 8001586:	3f02      	subs	r7, #2
 8001588:	4432      	add	r2, r6
 800158a:	e71b      	b.n	80013c4 <__udivmoddi4+0x11c>
 800158c:	eba1 0108 	sub.w	r1, r1, r8
 8001590:	4638      	mov	r0, r7
 8001592:	fbb1 f8fe 	udiv	r8, r1, lr
 8001596:	fb08 f70c 	mul.w	r7, r8, ip
 800159a:	e7c8      	b.n	800152e <__udivmoddi4+0x286>
 800159c:	4641      	mov	r1, r8
 800159e:	e798      	b.n	80014d2 <__udivmoddi4+0x22a>

080015a0 <_init>:
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a2:	bf00      	nop
 80015a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a6:	bc08      	pop	{r3}
 80015a8:	469e      	mov	lr, r3
 80015aa:	4770      	bx	lr

080015ac <_fini>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	bf00      	nop
 80015b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b2:	bc08      	pop	{r3}
 80015b4:	469e      	mov	lr, r3
 80015b6:	4770      	bx	lr
