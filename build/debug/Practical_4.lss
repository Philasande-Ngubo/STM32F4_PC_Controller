
build/debug/Practical_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006b4  080006b4  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006b4  080006b4  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006b4  080006b4  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006b4  080006b4  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006b4  080006b4  000016b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006b8  080006b8  000016b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080006bc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080006c8  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080006c8  0000208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000430d  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ef5  00000000  00000000  00006382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000390  00000000  00000000  00007278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000028b  00000000  00000000  00007608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ab5  00000000  00000000  00007893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001aeb  00000000  00000000  0000a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00000738  00000000  00000000  0000be34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00000fd6  00000000  00000000  0000c56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0000d542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800069c 	.word	0x0800069c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800069c 	.word	0x0800069c

08000204 <initLEDs>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void initLEDs(){
 8000204:	b082      	sub	sp, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000206:	2300      	movs	r3, #0
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <initLEDs+0x2c>)
 800020c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800020e:	f042 0202 	orr.w	r2, r2, #2
 8000212:	631a      	str	r2, [r3, #48]	@ 0x30
 8000214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000216:	f003 0302 	and.w	r3, r3, #2
 800021a:	9301      	str	r3, [sp, #4]
 800021c:	9b01      	ldr	r3, [sp, #4]
  GPIOB->MODER = 0x5555;
 800021e:	4b05      	ldr	r3, [pc, #20]	@ (8000234 <initLEDs+0x30>)
 8000220:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000224:	601a      	str	r2, [r3, #0]
  GPIOB->ODR = 0xFF;
 8000226:	22ff      	movs	r2, #255	@ 0xff
 8000228:	615a      	str	r2, [r3, #20]
}
 800022a:	b002      	add	sp, #8
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020400 	.word	0x40020400

08000238 <main>:
{
 8000238:	b508      	push	{r3, lr}
  HAL_Init();
 800023a:	f000 f829 	bl	8000290 <HAL_Init>
  initLEDs();
 800023e:	f7ff ffe1 	bl	8000204 <initLEDs>
  while (1)
 8000242:	e7fe      	b.n	8000242 <main+0xa>

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000248:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <HAL_InitTick+0x40>)
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000250:	fbb3 f3f2 	udiv	r3, r3, r2
 8000254:	4a0c      	ldr	r2, [pc, #48]	@ (8000288 <HAL_InitTick+0x44>)
 8000256:	6810      	ldr	r0, [r2, #0]
 8000258:	fbb0 f0f3 	udiv	r0, r0, r3
 800025c:	f000 f894 	bl	8000388 <HAL_SYSTICK_Config>
 8000260:	b968      	cbnz	r0, 800027e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	2c0f      	cmp	r4, #15
 8000264:	d901      	bls.n	800026a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000266:	2001      	movs	r0, #1
 8000268:	e00a      	b.n	8000280 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800026a:	2200      	movs	r2, #0
 800026c:	4621      	mov	r1, r4
 800026e:	f04f 30ff 	mov.w	r0, #4294967295
 8000272:	f000 f879 	bl	8000368 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000276:	4b05      	ldr	r3, [pc, #20]	@ (800028c <HAL_InitTick+0x48>)
 8000278:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800027a:	2000      	movs	r0, #0
 800027c:	e000      	b.n	8000280 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800027e:	2001      	movs	r0, #1
}
 8000280:	bd10      	pop	{r4, pc}
 8000282:	bf00      	nop
 8000284:	20000000 	.word	0x20000000
 8000288:	20000008 	.word	0x20000008
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_Init>:
{
 8000290:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000292:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <HAL_Init+0x30>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800029a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80002a2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80002aa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002ac:	2003      	movs	r0, #3
 80002ae:	f000 f849 	bl	8000344 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002b2:	200f      	movs	r0, #15
 80002b4:	f7ff ffc6 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 80002b8:	f000 f968 	bl	800058c <HAL_MspInit>
}
 80002bc:	2000      	movs	r0, #0
 80002be:	bd08      	pop	{r3, pc}
 80002c0:	40023c00 	.word	0x40023c00

080002c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002c4:	4a03      	ldr	r2, [pc, #12]	@ (80002d4 <HAL_IncTick+0x10>)
 80002c6:	6811      	ldr	r1, [r2, #0]
 80002c8:	4b03      	ldr	r3, [pc, #12]	@ (80002d8 <HAL_IncTick+0x14>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	440b      	add	r3, r1
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000088 	.word	0x20000088
 80002d8:	20000000 	.word	0x20000000

080002dc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80002dc:	2800      	cmp	r0, #0
 80002de:	db08      	blt.n	80002f2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	0109      	lsls	r1, r1, #4
 80002e2:	b2c9      	uxtb	r1, r1
 80002e4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80002e8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80002ec:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80002f0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	f000 000f 	and.w	r0, r0, #15
 80002f6:	0109      	lsls	r1, r1, #4
 80002f8:	b2c9      	uxtb	r1, r1
 80002fa:	4b01      	ldr	r3, [pc, #4]	@ (8000300 <__NVIC_SetPriority+0x24>)
 80002fc:	5419      	strb	r1, [r3, r0]
  }
}
 80002fe:	4770      	bx	lr
 8000300:	e000ed14 	.word	0xe000ed14

08000304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000304:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000306:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030a:	f1c0 0c07 	rsb	ip, r0, #7
 800030e:	f1bc 0f04 	cmp.w	ip, #4
 8000312:	bf28      	it	cs
 8000314:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000318:	1d03      	adds	r3, r0, #4
 800031a:	2b06      	cmp	r3, #6
 800031c:	d90f      	bls.n	800033e <NVIC_EncodePriority+0x3a>
 800031e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000320:	f04f 3eff 	mov.w	lr, #4294967295
 8000324:	fa0e f00c 	lsl.w	r0, lr, ip
 8000328:	ea21 0100 	bic.w	r1, r1, r0
 800032c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000332:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000336:	ea41 0002 	orr.w	r0, r1, r2
 800033a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	2300      	movs	r3, #0
 8000340:	e7ee      	b.n	8000320 <NVIC_EncodePriority+0x1c>
	...

08000344 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000344:	4a07      	ldr	r2, [pc, #28]	@ (8000364 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000346:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000348:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800034c:	041b      	lsls	r3, r3, #16
 800034e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000350:	0200      	lsls	r0, r0, #8
 8000352:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000356:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800035c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000360:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000362:	4770      	bx	lr
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000368:	b510      	push	{r4, lr}
 800036a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <HAL_NVIC_SetPriority+0x1c>)
 800036e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000370:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000374:	f7ff ffc6 	bl	8000304 <NVIC_EncodePriority>
 8000378:	4601      	mov	r1, r0
 800037a:	4620      	mov	r0, r4
 800037c:	f7ff ffae 	bl	80002dc <__NVIC_SetPriority>
}
 8000380:	bd10      	pop	{r4, pc}
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000388:	3801      	subs	r0, #1
 800038a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800038e:	d20b      	bcs.n	80003a8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000390:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000394:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000396:	4a05      	ldr	r2, [pc, #20]	@ (80003ac <HAL_SYSTICK_Config+0x24>)
 8000398:	21f0      	movs	r1, #240	@ 0xf0
 800039a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800039e:	2000      	movs	r0, #0
 80003a0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a2:	2207      	movs	r2, #7
 80003a4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003a8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003aa:	4770      	bx	lr
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80003b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003b2:	b083      	sub	sp, #12
 80003b4:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80003b6:	2300      	movs	r3, #0
 80003b8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80003ba:	4b72      	ldr	r3, [pc, #456]	@ (8000584 <HAL_DMA_IRQHandler+0x1d4>)
 80003bc:	681d      	ldr	r5, [r3, #0]
 80003be:	4b72      	ldr	r3, [pc, #456]	@ (8000588 <HAL_DMA_IRQHandler+0x1d8>)
 80003c0:	fba3 3505 	umull	r3, r5, r3, r5
 80003c4:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80003c6:	6d87      	ldr	r7, [r0, #88]	@ 0x58

  tmpisr = regs->ISR;
 80003c8:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80003ca:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80003cc:	2308      	movs	r3, #8
 80003ce:	4093      	lsls	r3, r2
 80003d0:	4233      	tst	r3, r6
 80003d2:	d010      	beq.n	80003f6 <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80003d4:	6803      	ldr	r3, [r0, #0]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	f012 0f04 	tst.w	r2, #4
 80003dc:	d00b      	beq.n	80003f6 <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	f022 0204 	bic.w	r2, r2, #4
 80003e4:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80003e6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80003e8:	2308      	movs	r3, #8
 80003ea:	4093      	lsls	r3, r2
 80003ec:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80003ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6543      	str	r3, [r0, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80003f6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80003f8:	2301      	movs	r3, #1
 80003fa:	4093      	lsls	r3, r2
 80003fc:	4233      	tst	r3, r6
 80003fe:	d009      	beq.n	8000414 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000400:	6822      	ldr	r2, [r4, #0]
 8000402:	6952      	ldr	r2, [r2, #20]
 8000404:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000408:	d004      	beq.n	8000414 <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800040a:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800040c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000414:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000416:	2304      	movs	r3, #4
 8000418:	4093      	lsls	r3, r2
 800041a:	4233      	tst	r3, r6
 800041c:	d009      	beq.n	8000432 <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800041e:	6822      	ldr	r2, [r4, #0]
 8000420:	6812      	ldr	r2, [r2, #0]
 8000422:	f012 0f02 	tst.w	r2, #2
 8000426:	d004      	beq.n	8000432 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000428:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800042a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800042c:	f043 0304 	orr.w	r3, r3, #4
 8000430:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000432:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000434:	2310      	movs	r3, #16
 8000436:	4093      	lsls	r3, r2
 8000438:	4233      	tst	r3, r6
 800043a:	d024      	beq.n	8000486 <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800043c:	6822      	ldr	r2, [r4, #0]
 800043e:	6812      	ldr	r2, [r2, #0]
 8000440:	f012 0f08 	tst.w	r2, #8
 8000444:	d01f      	beq.n	8000486 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000446:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000448:	6823      	ldr	r3, [r4, #0]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000450:	d00d      	beq.n	800046e <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000458:	d104      	bne.n	8000464 <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800045a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800045c:	b19b      	cbz	r3, 8000486 <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800045e:	4620      	mov	r0, r4
 8000460:	4798      	blx	r3
 8000462:	e010      	b.n	8000486 <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000464:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000466:	b173      	cbz	r3, 8000486 <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000468:	4620      	mov	r0, r4
 800046a:	4798      	blx	r3
 800046c:	e00b      	b.n	8000486 <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000474:	d103      	bne.n	800047e <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	f022 0208 	bic.w	r2, r2, #8
 800047c:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800047e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000480:	b10b      	cbz	r3, 8000486 <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000482:	4620      	mov	r0, r4
 8000484:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000486:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000488:	2320      	movs	r3, #32
 800048a:	4093      	lsls	r3, r2
 800048c:	4233      	tst	r3, r6
 800048e:	d054      	beq.n	800053a <HAL_DMA_IRQHandler+0x18a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000490:	6822      	ldr	r2, [r4, #0]
 8000492:	6812      	ldr	r2, [r2, #0]
 8000494:	f012 0f10 	tst.w	r2, #16
 8000498:	d04f      	beq.n	800053a <HAL_DMA_IRQHandler+0x18a>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800049a:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800049c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80004a0:	2b05      	cmp	r3, #5
 80004a2:	d00e      	beq.n	80004c2 <HAL_DMA_IRQHandler+0x112>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80004a4:	6823      	ldr	r3, [r4, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80004ac:	d033      	beq.n	8000516 <HAL_DMA_IRQHandler+0x166>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80004b4:	d12a      	bne.n	800050c <HAL_DMA_IRQHandler+0x15c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80004b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d03e      	beq.n	800053a <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80004bc:	4620      	mov	r0, r4
 80004be:	4798      	blx	r3
 80004c0:	e03b      	b.n	800053a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80004c2:	6822      	ldr	r2, [r4, #0]
 80004c4:	6813      	ldr	r3, [r2, #0]
 80004c6:	f023 0316 	bic.w	r3, r3, #22
 80004ca:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80004cc:	6822      	ldr	r2, [r4, #0]
 80004ce:	6953      	ldr	r3, [r2, #20]
 80004d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004d4:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80004d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80004d8:	b1a3      	cbz	r3, 8000504 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80004da:	6822      	ldr	r2, [r4, #0]
 80004dc:	6813      	ldr	r3, [r2, #0]
 80004de:	f023 0308 	bic.w	r3, r3, #8
 80004e2:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80004e4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80004e6:	233f      	movs	r3, #63	@ 0x3f
 80004e8:	4093      	lsls	r3, r2
 80004ea:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80004ec:	2301      	movs	r3, #1
 80004ee:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80004f2:	2300      	movs	r3, #0
 80004f4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80004f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d03f      	beq.n	800057e <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 80004fe:	4620      	mov	r0, r4
 8000500:	4798      	blx	r3
        return;
 8000502:	e03c      	b.n	800057e <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000504:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1e7      	bne.n	80004da <HAL_DMA_IRQHandler+0x12a>
 800050a:	e7eb      	b.n	80004e4 <HAL_DMA_IRQHandler+0x134>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800050c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800050e:	b1a3      	cbz	r3, 800053a <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000510:	4620      	mov	r0, r4
 8000512:	4798      	blx	r3
 8000514:	e011      	b.n	800053a <HAL_DMA_IRQHandler+0x18a>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800051c:	d109      	bne.n	8000532 <HAL_DMA_IRQHandler+0x182>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	f022 0210 	bic.w	r2, r2, #16
 8000524:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000526:	2301      	movs	r3, #1
 8000528:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800052c:	2300      	movs	r3, #0
 800052e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000532:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000534:	b10b      	cbz	r3, 800053a <HAL_DMA_IRQHandler+0x18a>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000536:	4620      	mov	r0, r4
 8000538:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800053a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800053c:	b1fb      	cbz	r3, 800057e <HAL_DMA_IRQHandler+0x1ce>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800053e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000540:	f013 0f01 	tst.w	r3, #1
 8000544:	d017      	beq.n	8000576 <HAL_DMA_IRQHandler+0x1c6>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000546:	2305      	movs	r3, #5
 8000548:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800054c:	6822      	ldr	r2, [r4, #0]
 800054e:	6813      	ldr	r3, [r2, #0]
 8000550:	f023 0301 	bic.w	r3, r3, #1
 8000554:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 8000556:	9b01      	ldr	r3, [sp, #4]
 8000558:	3301      	adds	r3, #1
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	42ab      	cmp	r3, r5
 800055e:	d804      	bhi.n	800056a <HAL_DMA_IRQHandler+0x1ba>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000560:	6823      	ldr	r3, [r4, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f013 0f01 	tst.w	r3, #1
 8000568:	d1f5      	bne.n	8000556 <HAL_DMA_IRQHandler+0x1a6>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800056a:	2301      	movs	r3, #1
 800056c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000570:	2300      	movs	r3, #0
 8000572:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000576:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000578:	b10b      	cbz	r3, 800057e <HAL_DMA_IRQHandler+0x1ce>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800057a:	4620      	mov	r0, r4
 800057c:	4798      	blx	r3
    }
  }
}
 800057e:	b003      	add	sp, #12
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	bf00      	nop
 8000584:	20000008 	.word	0x20000008
 8000588:	1b4e81b5 	.word	0x1b4e81b5

0800058c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	2100      	movs	r1, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <HAL_MspInit+0x34>)
 8000594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800059a:	645a      	str	r2, [r3, #68]	@ 0x44
 800059c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800059e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	9101      	str	r1, [sp, #4]
 80005a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005aa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80005ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80005b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	b002      	add	sp, #8
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800

080005c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c4:	e7fe      	b.n	80005c4 <NMI_Handler>

080005c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler>

080005c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <MemManage_Handler>

080005ca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler>

080005cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler>

080005ce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d0:	4770      	bx	lr

080005d2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d6:	f7ff fe75 	bl	80002c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005da:	bd08      	pop	{r3, pc}

080005dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80005dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80005de:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <DMA1_Stream5_IRQHandler+0xc>)
 80005e0:	f7ff fee6 	bl	80003b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80005e4:	bd08      	pop	{r3, pc}
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028

080005ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005ec:	4a03      	ldr	r2, [pc, #12]	@ (80005fc <SystemInit+0x10>)
 80005ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80005f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000638 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000604:	f7ff fff2 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	@ (8000640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	@ (800064c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800062e:	f000 f811 	bl	8000654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000632:	f7ff fe01 	bl	8000238 <main>
  bx  lr    
 8000636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000644:	080006bc 	.word	0x080006bc
  ldr r2, =_sbss
 8000648:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800064c:	2000008c 	.word	0x2000008c

08000650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC_IRQHandler>
	...

08000654 <__libc_init_array>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <__libc_init_array+0x38>)
 8000658:	4d0d      	ldr	r5, [pc, #52]	@ (8000690 <__libc_init_array+0x3c>)
 800065a:	1b5b      	subs	r3, r3, r5
 800065c:	109c      	asrs	r4, r3, #2
 800065e:	2600      	movs	r6, #0
 8000660:	42a6      	cmp	r6, r4
 8000662:	d109      	bne.n	8000678 <__libc_init_array+0x24>
 8000664:	f000 f81a 	bl	800069c <_init>
 8000668:	4d0a      	ldr	r5, [pc, #40]	@ (8000694 <__libc_init_array+0x40>)
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <__libc_init_array+0x44>)
 800066c:	1b5b      	subs	r3, r3, r5
 800066e:	109c      	asrs	r4, r3, #2
 8000670:	2600      	movs	r6, #0
 8000672:	42a6      	cmp	r6, r4
 8000674:	d105      	bne.n	8000682 <__libc_init_array+0x2e>
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f855 3b04 	ldr.w	r3, [r5], #4
 800067c:	4798      	blx	r3
 800067e:	3601      	adds	r6, #1
 8000680:	e7ee      	b.n	8000660 <__libc_init_array+0xc>
 8000682:	f855 3b04 	ldr.w	r3, [r5], #4
 8000686:	4798      	blx	r3
 8000688:	3601      	adds	r6, #1
 800068a:	e7f2      	b.n	8000672 <__libc_init_array+0x1e>
 800068c:	080006b4 	.word	0x080006b4
 8000690:	080006b4 	.word	0x080006b4
 8000694:	080006b4 	.word	0x080006b4
 8000698:	080006b8 	.word	0x080006b8

0800069c <_init>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	bf00      	nop
 80006a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a2:	bc08      	pop	{r3}
 80006a4:	469e      	mov	lr, r3
 80006a6:	4770      	bx	lr

080006a8 <_fini>:
 80006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006aa:	bf00      	nop
 80006ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ae:	bc08      	pop	{r3}
 80006b0:	469e      	mov	lr, r3
 80006b2:	4770      	bx	lr
