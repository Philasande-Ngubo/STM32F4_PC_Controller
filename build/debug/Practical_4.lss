
build/debug/Practical_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000714  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008d8  080008d8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008d8  080008d8  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080008d8  080008d8  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080008d8  080008d8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008d8  080008d8  000018d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008dc  080008dc  000018dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080008e0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080008ec  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080008ec  0000208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004bab  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001125  00000000  00000000  00006c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003e0  00000000  00000000  00007d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002c4  00000000  00000000  00008128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003257  00000000  00000000  000083ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001c3e  00000000  00000000  0000b643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000007fc  00000000  00000000  0000d284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000135c  00000000  00000000  0000da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0000eddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080008c0 	.word	0x080008c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080008c0 	.word	0x080008c0

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24

  HAL_Init();
 8000208:	f000 f854 	bl	80002b4 <HAL_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800020c:	2400      	movs	r4, #0
 800020e:	9400      	str	r4, [sp, #0]
 8000210:	4b13      	ldr	r3, [pc, #76]	@ (8000260 <main+0x5c>)
 8000212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000214:	f042 0202 	orr.w	r2, r2, #2
 8000218:	631a      	str	r2, [r3, #48]	@ 0x30
 800021a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021c:	f003 0302 	and.w	r3, r3, #2
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	9b00      	ldr	r3, [sp, #0]
    
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000224:	a901      	add	r1, sp, #4
 8000226:	9401      	str	r4, [sp, #4]
 8000228:	604c      	str	r4, [r1, #4]
 800022a:	608c      	str	r4, [r1, #8]
 800022c:	60cc      	str	r4, [r1, #12]
 800022e:	610c      	str	r4, [r1, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000230:	2608      	movs	r6, #8
 8000232:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull output
 8000234:	2701      	movs	r7, #1
 8000236:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;

    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000238:	4d0a      	ldr	r5, [pc, #40]	@ (8000264 <main+0x60>)
 800023a:	4628      	mov	r0, r5
 800023c:	f000 f9b8 	bl	80005b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000240:	463a      	mov	r2, r7
 8000242:	4631      	mov	r1, r6
 8000244:	4628      	mov	r0, r5
 8000246:	f000 faa3 	bl	8000790 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800024a:	4622      	mov	r2, r4
 800024c:	4631      	mov	r1, r6
 800024e:	4628      	mov	r0, r5
 8000250:	f000 fa9e 	bl	8000790 <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000254:	4631      	mov	r1, r6
 8000256:	4628      	mov	r0, r5
 8000258:	f000 faa0 	bl	800079c <HAL_GPIO_TogglePin>
  while (1)
 800025c:	e7d6      	b.n	800020c <main+0x8>
 800025e:	bf00      	nop
 8000260:	40023800 	.word	0x40023800
 8000264:	40020400 	.word	0x40020400

08000268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000268:	b510      	push	{r4, lr}
 800026a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800026c:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <HAL_InitTick+0x40>)
 800026e:	781a      	ldrb	r2, [r3, #0]
 8000270:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000274:	fbb3 f3f2 	udiv	r3, r3, r2
 8000278:	4a0c      	ldr	r2, [pc, #48]	@ (80002ac <HAL_InitTick+0x44>)
 800027a:	6810      	ldr	r0, [r2, #0]
 800027c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000280:	f000 f894 	bl	80003ac <HAL_SYSTICK_Config>
 8000284:	b968      	cbnz	r0, 80002a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000286:	2c0f      	cmp	r4, #15
 8000288:	d901      	bls.n	800028e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800028a:	2001      	movs	r0, #1
 800028c:	e00a      	b.n	80002a4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800028e:	2200      	movs	r2, #0
 8000290:	4621      	mov	r1, r4
 8000292:	f04f 30ff 	mov.w	r0, #4294967295
 8000296:	f000 f879 	bl	800038c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800029a:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <HAL_InitTick+0x48>)
 800029c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800029e:	2000      	movs	r0, #0
 80002a0:	e000      	b.n	80002a4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80002a2:	2001      	movs	r0, #1
}
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	bf00      	nop
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000008 	.word	0x20000008
 80002b0:	20000004 	.word	0x20000004

080002b4 <HAL_Init>:
{
 80002b4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <HAL_Init+0x30>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80002be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80002c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80002ce:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d0:	2003      	movs	r0, #3
 80002d2:	f000 f849 	bl	8000368 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002d6:	200f      	movs	r0, #15
 80002d8:	f7ff ffc6 	bl	8000268 <HAL_InitTick>
  HAL_MspInit();
 80002dc:	f000 fa68 	bl	80007b0 <HAL_MspInit>
}
 80002e0:	2000      	movs	r0, #0
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	40023c00 	.word	0x40023c00

080002e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002e8:	4a03      	ldr	r2, [pc, #12]	@ (80002f8 <HAL_IncTick+0x10>)
 80002ea:	6811      	ldr	r1, [r2, #0]
 80002ec:	4b03      	ldr	r3, [pc, #12]	@ (80002fc <HAL_IncTick+0x14>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	440b      	add	r3, r1
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	20000088 	.word	0x20000088
 80002fc:	20000000 	.word	0x20000000

08000300 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000300:	2800      	cmp	r0, #0
 8000302:	db08      	blt.n	8000316 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	0109      	lsls	r1, r1, #4
 8000306:	b2c9      	uxtb	r1, r1
 8000308:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800030c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000310:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000314:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	f000 000f 	and.w	r0, r0, #15
 800031a:	0109      	lsls	r1, r1, #4
 800031c:	b2c9      	uxtb	r1, r1
 800031e:	4b01      	ldr	r3, [pc, #4]	@ (8000324 <__NVIC_SetPriority+0x24>)
 8000320:	5419      	strb	r1, [r3, r0]
  }
}
 8000322:	4770      	bx	lr
 8000324:	e000ed14 	.word	0xe000ed14

08000328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000328:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800032a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800032e:	f1c0 0c07 	rsb	ip, r0, #7
 8000332:	f1bc 0f04 	cmp.w	ip, #4
 8000336:	bf28      	it	cs
 8000338:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033c:	1d03      	adds	r3, r0, #4
 800033e:	2b06      	cmp	r3, #6
 8000340:	d90f      	bls.n	8000362 <NVIC_EncodePriority+0x3a>
 8000342:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000344:	f04f 3eff 	mov.w	lr, #4294967295
 8000348:	fa0e f00c 	lsl.w	r0, lr, ip
 800034c:	ea21 0100 	bic.w	r1, r1, r0
 8000350:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000352:	fa0e fe03 	lsl.w	lr, lr, r3
 8000356:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800035a:	ea41 0002 	orr.w	r0, r1, r2
 800035e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000362:	2300      	movs	r3, #0
 8000364:	e7ee      	b.n	8000344 <NVIC_EncodePriority+0x1c>
	...

08000368 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000368:	4a07      	ldr	r2, [pc, #28]	@ (8000388 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800036a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800036c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000370:	041b      	lsls	r3, r3, #16
 8000372:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000374:	0200      	lsls	r0, r0, #8
 8000376:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800037a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800037c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000384:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000386:	4770      	bx	lr
 8000388:	e000ed00 	.word	0xe000ed00

0800038c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800038c:	b510      	push	{r4, lr}
 800038e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <HAL_NVIC_SetPriority+0x1c>)
 8000392:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000394:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000398:	f7ff ffc6 	bl	8000328 <NVIC_EncodePriority>
 800039c:	4601      	mov	r1, r0
 800039e:	4620      	mov	r0, r4
 80003a0:	f7ff ffae 	bl	8000300 <__NVIC_SetPriority>
}
 80003a4:	bd10      	pop	{r4, pc}
 80003a6:	bf00      	nop
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ac:	3801      	subs	r0, #1
 80003ae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80003b2:	d20b      	bcs.n	80003cc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80003b8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	4a05      	ldr	r2, [pc, #20]	@ (80003d0 <HAL_SYSTICK_Config+0x24>)
 80003bc:	21f0      	movs	r1, #240	@ 0xf0
 80003be:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c2:	2000      	movs	r0, #0
 80003c4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c6:	2207      	movs	r2, #7
 80003c8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003cc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003ce:	4770      	bx	lr
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80003d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d6:	b083      	sub	sp, #12
 80003d8:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80003da:	2300      	movs	r3, #0
 80003dc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80003de:	4b72      	ldr	r3, [pc, #456]	@ (80005a8 <HAL_DMA_IRQHandler+0x1d4>)
 80003e0:	681d      	ldr	r5, [r3, #0]
 80003e2:	4b72      	ldr	r3, [pc, #456]	@ (80005ac <HAL_DMA_IRQHandler+0x1d8>)
 80003e4:	fba3 3505 	umull	r3, r5, r3, r5
 80003e8:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80003ea:	6d87      	ldr	r7, [r0, #88]	@ 0x58

  tmpisr = regs->ISR;
 80003ec:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80003ee:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80003f0:	2308      	movs	r3, #8
 80003f2:	4093      	lsls	r3, r2
 80003f4:	4233      	tst	r3, r6
 80003f6:	d010      	beq.n	800041a <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80003f8:	6803      	ldr	r3, [r0, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	f012 0f04 	tst.w	r2, #4
 8000400:	d00b      	beq.n	800041a <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	f022 0204 	bic.w	r2, r2, #4
 8000408:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800040a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800040c:	2308      	movs	r3, #8
 800040e:	4093      	lsls	r3, r2
 8000410:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000412:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6543      	str	r3, [r0, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800041a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800041c:	2301      	movs	r3, #1
 800041e:	4093      	lsls	r3, r2
 8000420:	4233      	tst	r3, r6
 8000422:	d009      	beq.n	8000438 <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000424:	6822      	ldr	r2, [r4, #0]
 8000426:	6952      	ldr	r2, [r2, #20]
 8000428:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800042c:	d004      	beq.n	8000438 <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800042e:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000430:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000432:	f043 0302 	orr.w	r3, r3, #2
 8000436:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000438:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800043a:	2304      	movs	r3, #4
 800043c:	4093      	lsls	r3, r2
 800043e:	4233      	tst	r3, r6
 8000440:	d009      	beq.n	8000456 <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000442:	6822      	ldr	r2, [r4, #0]
 8000444:	6812      	ldr	r2, [r2, #0]
 8000446:	f012 0f02 	tst.w	r2, #2
 800044a:	d004      	beq.n	8000456 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800044c:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800044e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6563      	str	r3, [r4, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000456:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000458:	2310      	movs	r3, #16
 800045a:	4093      	lsls	r3, r2
 800045c:	4233      	tst	r3, r6
 800045e:	d024      	beq.n	80004aa <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000460:	6822      	ldr	r2, [r4, #0]
 8000462:	6812      	ldr	r2, [r2, #0]
 8000464:	f012 0f08 	tst.w	r2, #8
 8000468:	d01f      	beq.n	80004aa <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800046a:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800046c:	6823      	ldr	r3, [r4, #0]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000474:	d00d      	beq.n	8000492 <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800047c:	d104      	bne.n	8000488 <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800047e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000480:	b19b      	cbz	r3, 80004aa <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000482:	4620      	mov	r0, r4
 8000484:	4798      	blx	r3
 8000486:	e010      	b.n	80004aa <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000488:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800048a:	b173      	cbz	r3, 80004aa <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800048c:	4620      	mov	r0, r4
 800048e:	4798      	blx	r3
 8000490:	e00b      	b.n	80004aa <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000498:	d103      	bne.n	80004a2 <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	f022 0208 	bic.w	r2, r2, #8
 80004a0:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80004a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80004a4:	b10b      	cbz	r3, 80004aa <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80004a6:	4620      	mov	r0, r4
 80004a8:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80004aa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80004ac:	2320      	movs	r3, #32
 80004ae:	4093      	lsls	r3, r2
 80004b0:	4233      	tst	r3, r6
 80004b2:	d054      	beq.n	800055e <HAL_DMA_IRQHandler+0x18a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80004b4:	6822      	ldr	r2, [r4, #0]
 80004b6:	6812      	ldr	r2, [r2, #0]
 80004b8:	f012 0f10 	tst.w	r2, #16
 80004bc:	d04f      	beq.n	800055e <HAL_DMA_IRQHandler+0x18a>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80004be:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80004c0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80004c4:	2b05      	cmp	r3, #5
 80004c6:	d00e      	beq.n	80004e6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80004c8:	6823      	ldr	r3, [r4, #0]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80004d0:	d033      	beq.n	800053a <HAL_DMA_IRQHandler+0x166>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80004d8:	d12a      	bne.n	8000530 <HAL_DMA_IRQHandler+0x15c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80004da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d03e      	beq.n	800055e <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80004e0:	4620      	mov	r0, r4
 80004e2:	4798      	blx	r3
 80004e4:	e03b      	b.n	800055e <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80004e6:	6822      	ldr	r2, [r4, #0]
 80004e8:	6813      	ldr	r3, [r2, #0]
 80004ea:	f023 0316 	bic.w	r3, r3, #22
 80004ee:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80004f0:	6822      	ldr	r2, [r4, #0]
 80004f2:	6953      	ldr	r3, [r2, #20]
 80004f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004f8:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80004fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80004fc:	b1a3      	cbz	r3, 8000528 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80004fe:	6822      	ldr	r2, [r4, #0]
 8000500:	6813      	ldr	r3, [r2, #0]
 8000502:	f023 0308 	bic.w	r3, r3, #8
 8000506:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000508:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800050a:	233f      	movs	r3, #63	@ 0x3f
 800050c:	4093      	lsls	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000510:	2301      	movs	r3, #1
 8000512:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000516:	2300      	movs	r3, #0
 8000518:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800051c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800051e:	2b00      	cmp	r3, #0
 8000520:	d03f      	beq.n	80005a2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8000522:	4620      	mov	r0, r4
 8000524:	4798      	blx	r3
        return;
 8000526:	e03c      	b.n	80005a2 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000528:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800052a:	2b00      	cmp	r3, #0
 800052c:	d1e7      	bne.n	80004fe <HAL_DMA_IRQHandler+0x12a>
 800052e:	e7eb      	b.n	8000508 <HAL_DMA_IRQHandler+0x134>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000530:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000532:	b1a3      	cbz	r3, 800055e <HAL_DMA_IRQHandler+0x18a>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000534:	4620      	mov	r0, r4
 8000536:	4798      	blx	r3
 8000538:	e011      	b.n	800055e <HAL_DMA_IRQHandler+0x18a>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000540:	d109      	bne.n	8000556 <HAL_DMA_IRQHandler+0x182>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	f022 0210 	bic.w	r2, r2, #16
 8000548:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800054a:	2301      	movs	r3, #1
 800054c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000550:	2300      	movs	r3, #0
 8000552:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000556:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000558:	b10b      	cbz	r3, 800055e <HAL_DMA_IRQHandler+0x18a>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800055a:	4620      	mov	r0, r4
 800055c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800055e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000560:	b1fb      	cbz	r3, 80005a2 <HAL_DMA_IRQHandler+0x1ce>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000562:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000564:	f013 0f01 	tst.w	r3, #1
 8000568:	d017      	beq.n	800059a <HAL_DMA_IRQHandler+0x1c6>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800056a:	2305      	movs	r3, #5
 800056c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000570:	6822      	ldr	r2, [r4, #0]
 8000572:	6813      	ldr	r3, [r2, #0]
 8000574:	f023 0301 	bic.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 800057a:	9b01      	ldr	r3, [sp, #4]
 800057c:	3301      	adds	r3, #1
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	42ab      	cmp	r3, r5
 8000582:	d804      	bhi.n	800058e <HAL_DMA_IRQHandler+0x1ba>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f013 0f01 	tst.w	r3, #1
 800058c:	d1f5      	bne.n	800057a <HAL_DMA_IRQHandler+0x1a6>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800058e:	2301      	movs	r3, #1
 8000590:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000594:	2300      	movs	r3, #0
 8000596:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800059a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800059c:	b10b      	cbz	r3, 80005a2 <HAL_DMA_IRQHandler+0x1ce>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800059e:	4620      	mov	r0, r4
 80005a0:	4798      	blx	r3
    }
  }
}
 80005a2:	b003      	add	sp, #12
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000008 	.word	0x20000008
 80005ac:	1b4e81b5 	.word	0x1b4e81b5

080005b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	2b0f      	cmp	r3, #15
 80005b4:	f200 80e3 	bhi.w	800077e <HAL_GPIO_Init+0x1ce>
{
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	e065      	b.n	800068a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005be:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005c0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80005c4:	2403      	movs	r4, #3
 80005c6:	fa04 f40e 	lsl.w	r4, r4, lr
 80005ca:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005ce:	68cc      	ldr	r4, [r1, #12]
 80005d0:	fa04 f40e 	lsl.w	r4, r4, lr
 80005d4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80005d6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005d8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005da:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80005de:	684a      	ldr	r2, [r1, #4]
 80005e0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80005e4:	409a      	lsls	r2, r3
 80005e6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005e8:	6042      	str	r2, [r0, #4]
 80005ea:	e05c      	b.n	80006a6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80005ec:	08dc      	lsrs	r4, r3, #3
 80005ee:	3408      	adds	r4, #8
 80005f0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005f4:	f003 0507 	and.w	r5, r3, #7
 80005f8:	00ad      	lsls	r5, r5, #2
 80005fa:	f04f 0e0f 	mov.w	lr, #15
 80005fe:	fa0e fe05 	lsl.w	lr, lr, r5
 8000602:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000606:	690a      	ldr	r2, [r1, #16]
 8000608:	40aa      	lsls	r2, r5
 800060a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800060e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000612:	e05c      	b.n	80006ce <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000614:	2206      	movs	r2, #6
 8000616:	e000      	b.n	800061a <HAL_GPIO_Init+0x6a>
 8000618:	2200      	movs	r2, #0
 800061a:	fa02 f20e 	lsl.w	r2, r2, lr
 800061e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000620:	3402      	adds	r4, #2
 8000622:	4d57      	ldr	r5, [pc, #348]	@ (8000780 <HAL_GPIO_Init+0x1d0>)
 8000624:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000628:	4a56      	ldr	r2, [pc, #344]	@ (8000784 <HAL_GPIO_Init+0x1d4>)
 800062a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800062c:	ea6f 020c 	mvn.w	r2, ip
 8000630:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000634:	684e      	ldr	r6, [r1, #4]
 8000636:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800063a:	d001      	beq.n	8000640 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800063c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000640:	4c50      	ldr	r4, [pc, #320]	@ (8000784 <HAL_GPIO_Init+0x1d4>)
 8000642:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000644:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000646:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800064a:	684e      	ldr	r6, [r1, #4]
 800064c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000650:	d001      	beq.n	8000656 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000652:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000656:	4c4b      	ldr	r4, [pc, #300]	@ (8000784 <HAL_GPIO_Init+0x1d4>)
 8000658:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800065a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800065c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000660:	684e      	ldr	r6, [r1, #4]
 8000662:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000666:	d001      	beq.n	800066c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000668:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800066c:	4c45      	ldr	r4, [pc, #276]	@ (8000784 <HAL_GPIO_Init+0x1d4>)
 800066e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000670:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000672:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000674:	684d      	ldr	r5, [r1, #4]
 8000676:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800067a:	d001      	beq.n	8000680 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800067c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000680:	4c40      	ldr	r4, [pc, #256]	@ (8000784 <HAL_GPIO_Init+0x1d4>)
 8000682:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000684:	3301      	adds	r3, #1
 8000686:	2b0f      	cmp	r3, #15
 8000688:	d877      	bhi.n	800077a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 800068a:	2201      	movs	r2, #1
 800068c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068e:	680c      	ldr	r4, [r1, #0]
 8000690:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000694:	ea32 0404 	bics.w	r4, r2, r4
 8000698:	d1f4      	bne.n	8000684 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800069a:	684c      	ldr	r4, [r1, #4]
 800069c:	f004 0403 	and.w	r4, r4, #3
 80006a0:	3c01      	subs	r4, #1
 80006a2:	2c01      	cmp	r4, #1
 80006a4:	d98b      	bls.n	80005be <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006a6:	684a      	ldr	r2, [r1, #4]
 80006a8:	f002 0203 	and.w	r2, r2, #3
 80006ac:	2a03      	cmp	r2, #3
 80006ae:	d009      	beq.n	80006c4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80006b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006b2:	005d      	lsls	r5, r3, #1
 80006b4:	2203      	movs	r2, #3
 80006b6:	40aa      	lsls	r2, r5
 80006b8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006bc:	688a      	ldr	r2, [r1, #8]
 80006be:	40aa      	lsls	r2, r5
 80006c0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80006c2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006c4:	684a      	ldr	r2, [r1, #4]
 80006c6:	f002 0203 	and.w	r2, r2, #3
 80006ca:	2a02      	cmp	r2, #2
 80006cc:	d08e      	beq.n	80005ec <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80006ce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006d4:	2203      	movs	r2, #3
 80006d6:	fa02 f20e 	lsl.w	r2, r2, lr
 80006da:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006de:	684a      	ldr	r2, [r1, #4]
 80006e0:	f002 0203 	and.w	r2, r2, #3
 80006e4:	fa02 f20e 	lsl.w	r2, r2, lr
 80006e8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80006ea:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80006ec:	684a      	ldr	r2, [r1, #4]
 80006ee:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80006f2:	d0c7      	beq.n	8000684 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f4:	2200      	movs	r2, #0
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	4a23      	ldr	r2, [pc, #140]	@ (8000788 <HAL_GPIO_Init+0x1d8>)
 80006fa:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80006fc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000700:	6454      	str	r4, [r2, #68]	@ 0x44
 8000702:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000704:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800070c:	089c      	lsrs	r4, r3, #2
 800070e:	1ca5      	adds	r5, r4, #2
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <HAL_GPIO_Init+0x1d0>)
 8000712:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000716:	f003 0e03 	and.w	lr, r3, #3
 800071a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800071e:	220f      	movs	r2, #15
 8000720:	fa02 f20e 	lsl.w	r2, r2, lr
 8000724:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000728:	4a18      	ldr	r2, [pc, #96]	@ (800078c <HAL_GPIO_Init+0x1dc>)
 800072a:	4290      	cmp	r0, r2
 800072c:	f43f af74 	beq.w	8000618 <HAL_GPIO_Init+0x68>
 8000730:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000734:	4290      	cmp	r0, r2
 8000736:	d016      	beq.n	8000766 <HAL_GPIO_Init+0x1b6>
 8000738:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800073c:	4290      	cmp	r0, r2
 800073e:	d014      	beq.n	800076a <HAL_GPIO_Init+0x1ba>
 8000740:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000744:	4290      	cmp	r0, r2
 8000746:	d012      	beq.n	800076e <HAL_GPIO_Init+0x1be>
 8000748:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800074c:	4290      	cmp	r0, r2
 800074e:	d010      	beq.n	8000772 <HAL_GPIO_Init+0x1c2>
 8000750:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000754:	4290      	cmp	r0, r2
 8000756:	d00e      	beq.n	8000776 <HAL_GPIO_Init+0x1c6>
 8000758:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800075c:	4290      	cmp	r0, r2
 800075e:	f43f af59 	beq.w	8000614 <HAL_GPIO_Init+0x64>
 8000762:	2207      	movs	r2, #7
 8000764:	e759      	b.n	800061a <HAL_GPIO_Init+0x6a>
 8000766:	2201      	movs	r2, #1
 8000768:	e757      	b.n	800061a <HAL_GPIO_Init+0x6a>
 800076a:	2202      	movs	r2, #2
 800076c:	e755      	b.n	800061a <HAL_GPIO_Init+0x6a>
 800076e:	2203      	movs	r2, #3
 8000770:	e753      	b.n	800061a <HAL_GPIO_Init+0x6a>
 8000772:	2204      	movs	r2, #4
 8000774:	e751      	b.n	800061a <HAL_GPIO_Init+0x6a>
 8000776:	2205      	movs	r2, #5
 8000778:	e74f      	b.n	800061a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800077a:	b002      	add	sp, #8
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	4770      	bx	lr
 8000780:	40013800 	.word	0x40013800
 8000784:	40013c00 	.word	0x40013c00
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000790:	b10a      	cbz	r2, 8000796 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000792:	6181      	str	r1, [r0, #24]
 8000794:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000796:	0409      	lsls	r1, r1, #16
 8000798:	6181      	str	r1, [r0, #24]
  }
}
 800079a:	4770      	bx	lr

0800079c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800079c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800079e:	ea01 0203 	and.w	r2, r1, r3
 80007a2:	ea21 0103 	bic.w	r1, r1, r3
 80007a6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80007aa:	6181      	str	r1, [r0, #24]
}
 80007ac:	4770      	bx	lr
	...

080007b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2100      	movs	r1, #0
 80007b4:	9100      	str	r1, [sp, #0]
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <HAL_MspInit+0x34>)
 80007b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007be:	645a      	str	r2, [r3, #68]	@ 0x44
 80007c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007c2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007c6:	9200      	str	r2, [sp, #0]
 80007c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	9101      	str	r1, [sp, #4]
 80007cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80007d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	b002      	add	sp, #8
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	e7fe      	b.n	80007e8 <NMI_Handler>

080007ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler>

080007ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler>

080007ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler>

080007f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler>

080007f2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f7ff fd75 	bl	80002e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bd08      	pop	{r3, pc}

08000800 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000800:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000802:	4802      	ldr	r0, [pc, #8]	@ (800080c <DMA1_Stream5_IRQHandler+0xc>)
 8000804:	f7ff fde6 	bl	80003d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000808:	bd08      	pop	{r3, pc}
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028

08000810 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000810:	4a03      	ldr	r2, [pc, #12]	@ (8000820 <SystemInit+0x10>)
 8000812:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000816:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800081a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800085c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000828:	f7ff fff2 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	@ (8000864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	@ (8000870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000852:	f000 f811 	bl	8000878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000856:	f7ff fcd5 	bl	8000204 <main>
  bx  lr    
 800085a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800085c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000868:	080008e0 	.word	0x080008e0
  ldr r2, =_sbss
 800086c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000870:	2000008c 	.word	0x2000008c

08000874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC_IRQHandler>
	...

08000878 <__libc_init_array>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <__libc_init_array+0x38>)
 800087c:	4d0d      	ldr	r5, [pc, #52]	@ (80008b4 <__libc_init_array+0x3c>)
 800087e:	1b5b      	subs	r3, r3, r5
 8000880:	109c      	asrs	r4, r3, #2
 8000882:	2600      	movs	r6, #0
 8000884:	42a6      	cmp	r6, r4
 8000886:	d109      	bne.n	800089c <__libc_init_array+0x24>
 8000888:	f000 f81a 	bl	80008c0 <_init>
 800088c:	4d0a      	ldr	r5, [pc, #40]	@ (80008b8 <__libc_init_array+0x40>)
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <__libc_init_array+0x44>)
 8000890:	1b5b      	subs	r3, r3, r5
 8000892:	109c      	asrs	r4, r3, #2
 8000894:	2600      	movs	r6, #0
 8000896:	42a6      	cmp	r6, r4
 8000898:	d105      	bne.n	80008a6 <__libc_init_array+0x2e>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a0:	4798      	blx	r3
 80008a2:	3601      	adds	r6, #1
 80008a4:	e7ee      	b.n	8000884 <__libc_init_array+0xc>
 80008a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008aa:	4798      	blx	r3
 80008ac:	3601      	adds	r6, #1
 80008ae:	e7f2      	b.n	8000896 <__libc_init_array+0x1e>
 80008b0:	080008d8 	.word	0x080008d8
 80008b4:	080008d8 	.word	0x080008d8
 80008b8:	080008d8 	.word	0x080008d8
 80008bc:	080008dc 	.word	0x080008dc

080008c0 <_init>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	bf00      	nop
 80008c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c6:	bc08      	pop	{r3}
 80008c8:	469e      	mov	lr, r3
 80008ca:	4770      	bx	lr

080008cc <_fini>:
 80008cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ce:	bf00      	nop
 80008d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008d2:	bc08      	pop	{r3}
 80008d4:	469e      	mov	lr, r3
 80008d6:	4770      	bx	lr
